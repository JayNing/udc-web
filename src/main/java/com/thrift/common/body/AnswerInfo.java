/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-10")
public class AnswerInfo implements org.apache.thrift.TBase<AnswerInfo, AnswerInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AnswerInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnswerInfo");

  private static final org.apache.thrift.protocol.TField ANS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ansId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ANS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("ansFlag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ANS_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ansContent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ANS_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("ansLike", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetId", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AnswerInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AnswerInfoTupleSchemeFactory();

  public int ansId; // required
  public int queId; // required
  public long createTime; // required
  public int ansFlag; // required
  public String ansContent; // required
  public int userId; // required
  public int ansLike; // required
  public int targetId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANS_ID((short)1, "ansId"),
    QUE_ID((short)2, "queId"),
    CREATE_TIME((short)3, "createTime"),
    ANS_FLAG((short)4, "ansFlag"),
    ANS_CONTENT((short)5, "ansContent"),
    USER_ID((short)6, "userId"),
    ANS_LIKE((short)7, "ansLike"),
    TARGET_ID((short)8, "targetId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANS_ID
          return ANS_ID;
        case 2: // QUE_ID
          return QUE_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // ANS_FLAG
          return ANS_FLAG;
        case 5: // ANS_CONTENT
          return ANS_CONTENT;
        case 6: // USER_ID
          return USER_ID;
        case 7: // ANS_LIKE
          return ANS_LIKE;
        case 8: // TARGET_ID
          return TARGET_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANSID_ISSET_ID = 0;
  private static final int __QUEID_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __ANSFLAG_ISSET_ID = 3;
  private static final int __USERID_ISSET_ID = 4;
  private static final int __ANSLIKE_ISSET_ID = 5;
  private static final int __TARGETID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANS_ID, new org.apache.thrift.meta_data.FieldMetaData("ansId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUE_ID, new org.apache.thrift.meta_data.FieldMetaData("queId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("ansFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANS_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("ansContent", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANS_LIKE, new org.apache.thrift.meta_data.FieldMetaData("ansLike", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("targetId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnswerInfo.class, metaDataMap);
  }

  public AnswerInfo() {
  }

  public AnswerInfo(
    int ansId,
    int queId,
    long createTime,
    int ansFlag,
    String ansContent,
    int userId,
    int ansLike,
    int targetId)
  {
    this();
    this.ansId = ansId;
    setAnsIdIsSet(true);
    this.queId = queId;
    setQueIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.ansFlag = ansFlag;
    setAnsFlagIsSet(true);
    this.ansContent = ansContent;
    this.userId = userId;
    setUserIdIsSet(true);
    this.ansLike = ansLike;
    setAnsLikeIsSet(true);
    this.targetId = targetId;
    setTargetIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnswerInfo(AnswerInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ansId = other.ansId;
    this.queId = other.queId;
    this.createTime = other.createTime;
    this.ansFlag = other.ansFlag;
    if (other.isSetAnsContent()) {
      this.ansContent = other.ansContent;
    }
    this.userId = other.userId;
    this.ansLike = other.ansLike;
    this.targetId = other.targetId;
  }

  public AnswerInfo deepCopy() {
    return new AnswerInfo(this);
  }

  @Override
  public void clear() {
    setAnsIdIsSet(false);
    this.ansId = 0;
    setQueIdIsSet(false);
    this.queId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setAnsFlagIsSet(false);
    this.ansFlag = 0;
    this.ansContent = null;
    setUserIdIsSet(false);
    this.userId = 0;
    setAnsLikeIsSet(false);
    this.ansLike = 0;
    setTargetIdIsSet(false);
    this.targetId = 0;
  }

  public int getAnsId() {
    return this.ansId;
  }

  public AnswerInfo setAnsId(int ansId) {
    this.ansId = ansId;
    setAnsIdIsSet(true);
    return this;
  }

  public void unsetAnsId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSID_ISSET_ID);
  }

  /** Returns true if field ansId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSID_ISSET_ID);
  }

  public void setAnsIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSID_ISSET_ID, value);
  }

  public int getQueId() {
    return this.queId;
  }

  public AnswerInfo setQueId(int queId) {
    this.queId = queId;
    setQueIdIsSet(true);
    return this;
  }

  public void unsetQueId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEID_ISSET_ID);
  }

  /** Returns true if field queId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEID_ISSET_ID);
  }

  public void setQueIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public AnswerInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getAnsFlag() {
    return this.ansFlag;
  }

  public AnswerInfo setAnsFlag(int ansFlag) {
    this.ansFlag = ansFlag;
    setAnsFlagIsSet(true);
    return this;
  }

  public void unsetAnsFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSFLAG_ISSET_ID);
  }

  /** Returns true if field ansFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSFLAG_ISSET_ID);
  }

  public void setAnsFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSFLAG_ISSET_ID, value);
  }

  public String getAnsContent() {
    return this.ansContent;
  }

  public AnswerInfo setAnsContent(String ansContent) {
    this.ansContent = ansContent;
    return this;
  }

  public void unsetAnsContent() {
    this.ansContent = null;
  }

  /** Returns true if field ansContent is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsContent() {
    return this.ansContent != null;
  }

  public void setAnsContentIsSet(boolean value) {
    if (!value) {
      this.ansContent = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public AnswerInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getAnsLike() {
    return this.ansLike;
  }

  public AnswerInfo setAnsLike(int ansLike) {
    this.ansLike = ansLike;
    setAnsLikeIsSet(true);
    return this;
  }

  public void unsetAnsLike() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSLIKE_ISSET_ID);
  }

  /** Returns true if field ansLike is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsLike() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSLIKE_ISSET_ID);
  }

  public void setAnsLikeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSLIKE_ISSET_ID, value);
  }

  public int getTargetId() {
    return this.targetId;
  }

  public AnswerInfo setTargetId(int targetId) {
    this.targetId = targetId;
    setTargetIdIsSet(true);
    return this;
  }

  public void unsetTargetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  /** Returns true if field targetId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  public void setTargetIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANS_ID:
      if (value == null) {
        unsetAnsId();
      } else {
        setAnsId((Integer)value);
      }
      break;

    case QUE_ID:
      if (value == null) {
        unsetQueId();
      } else {
        setQueId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ANS_FLAG:
      if (value == null) {
        unsetAnsFlag();
      } else {
        setAnsFlag((Integer)value);
      }
      break;

    case ANS_CONTENT:
      if (value == null) {
        unsetAnsContent();
      } else {
        setAnsContent((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ANS_LIKE:
      if (value == null) {
        unsetAnsLike();
      } else {
        setAnsLike((Integer)value);
      }
      break;

    case TARGET_ID:
      if (value == null) {
        unsetTargetId();
      } else {
        setTargetId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANS_ID:
      return getAnsId();

    case QUE_ID:
      return getQueId();

    case CREATE_TIME:
      return getCreateTime();

    case ANS_FLAG:
      return getAnsFlag();

    case ANS_CONTENT:
      return getAnsContent();

    case USER_ID:
      return getUserId();

    case ANS_LIKE:
      return getAnsLike();

    case TARGET_ID:
      return getTargetId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANS_ID:
      return isSetAnsId();
    case QUE_ID:
      return isSetQueId();
    case CREATE_TIME:
      return isSetCreateTime();
    case ANS_FLAG:
      return isSetAnsFlag();
    case ANS_CONTENT:
      return isSetAnsContent();
    case USER_ID:
      return isSetUserId();
    case ANS_LIKE:
      return isSetAnsLike();
    case TARGET_ID:
      return isSetTargetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnswerInfo)
      return this.equals((AnswerInfo)that);
    return false;
  }

  public boolean equals(AnswerInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ansId = true;
    boolean that_present_ansId = true;
    if (this_present_ansId || that_present_ansId) {
      if (!(this_present_ansId && that_present_ansId))
        return false;
      if (this.ansId != that.ansId)
        return false;
    }

    boolean this_present_queId = true;
    boolean that_present_queId = true;
    if (this_present_queId || that_present_queId) {
      if (!(this_present_queId && that_present_queId))
        return false;
      if (this.queId != that.queId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_ansFlag = true;
    boolean that_present_ansFlag = true;
    if (this_present_ansFlag || that_present_ansFlag) {
      if (!(this_present_ansFlag && that_present_ansFlag))
        return false;
      if (this.ansFlag != that.ansFlag)
        return false;
    }

    boolean this_present_ansContent = true && this.isSetAnsContent();
    boolean that_present_ansContent = true && that.isSetAnsContent();
    if (this_present_ansContent || that_present_ansContent) {
      if (!(this_present_ansContent && that_present_ansContent))
        return false;
      if (!this.ansContent.equals(that.ansContent))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_ansLike = true;
    boolean that_present_ansLike = true;
    if (this_present_ansLike || that_present_ansLike) {
      if (!(this_present_ansLike && that_present_ansLike))
        return false;
      if (this.ansLike != that.ansLike)
        return false;
    }

    boolean this_present_targetId = true;
    boolean that_present_targetId = true;
    if (this_present_targetId || that_present_targetId) {
      if (!(this_present_targetId && that_present_targetId))
        return false;
      if (this.targetId != that.targetId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ansId;

    hashCode = hashCode * 8191 + queId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + ansFlag;

    hashCode = hashCode * 8191 + ((isSetAnsContent()) ? 131071 : 524287);
    if (isSetAnsContent())
      hashCode = hashCode * 8191 + ansContent.hashCode();

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ansLike;

    hashCode = hashCode * 8191 + targetId;

    return hashCode;
  }

  @Override
  public int compareTo(AnswerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnsId()).compareTo(other.isSetAnsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ansId, other.ansId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueId()).compareTo(other.isSetQueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queId, other.queId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnsFlag()).compareTo(other.isSetAnsFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ansFlag, other.ansFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnsContent()).compareTo(other.isSetAnsContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ansContent, other.ansContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnsLike()).compareTo(other.isSetAnsLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ansLike, other.ansLike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetId()).compareTo(other.isSetTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetId, other.targetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AnswerInfo(");
    boolean first = true;

    sb.append("ansId:");
    sb.append(this.ansId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queId:");
    sb.append(this.queId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ansFlag:");
    sb.append(this.ansFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ansContent:");
    if (this.ansContent == null) {
      sb.append("null");
    } else {
      sb.append(this.ansContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ansLike:");
    sb.append(this.ansLike);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetId:");
    sb.append(this.targetId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnswerInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AnswerInfoStandardScheme getScheme() {
      return new AnswerInfoStandardScheme();
    }
  }

  private static class AnswerInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<AnswerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnswerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ansId = iprot.readI32();
              struct.setAnsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queId = iprot.readI32();
              struct.setQueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ansFlag = iprot.readI32();
              struct.setAnsFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANS_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ansContent = iprot.readString();
              struct.setAnsContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ANS_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ansLike = iprot.readI32();
              struct.setAnsLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetId = iprot.readI32();
              struct.setTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnswerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANS_ID_FIELD_DESC);
      oprot.writeI32(struct.ansId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUE_ID_FIELD_DESC);
      oprot.writeI32(struct.queId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANS_FLAG_FIELD_DESC);
      oprot.writeI32(struct.ansFlag);
      oprot.writeFieldEnd();
      if (struct.ansContent != null) {
        oprot.writeFieldBegin(ANS_CONTENT_FIELD_DESC);
        oprot.writeString(struct.ansContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANS_LIKE_FIELD_DESC);
      oprot.writeI32(struct.ansLike);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
      oprot.writeI32(struct.targetId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnswerInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AnswerInfoTupleScheme getScheme() {
      return new AnswerInfoTupleScheme();
    }
  }

  private static class AnswerInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<AnswerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnswerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAnsId()) {
        optionals.set(0);
      }
      if (struct.isSetQueId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetAnsFlag()) {
        optionals.set(3);
      }
      if (struct.isSetAnsContent()) {
        optionals.set(4);
      }
      if (struct.isSetUserId()) {
        optionals.set(5);
      }
      if (struct.isSetAnsLike()) {
        optionals.set(6);
      }
      if (struct.isSetTargetId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetAnsId()) {
        oprot.writeI32(struct.ansId);
      }
      if (struct.isSetQueId()) {
        oprot.writeI32(struct.queId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetAnsFlag()) {
        oprot.writeI32(struct.ansFlag);
      }
      if (struct.isSetAnsContent()) {
        oprot.writeString(struct.ansContent);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetAnsLike()) {
        oprot.writeI32(struct.ansLike);
      }
      if (struct.isSetTargetId()) {
        oprot.writeI32(struct.targetId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnswerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.ansId = iprot.readI32();
        struct.setAnsIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queId = iprot.readI32();
        struct.setQueIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ansFlag = iprot.readI32();
        struct.setAnsFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ansContent = iprot.readString();
        struct.setAnsContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ansLike = iprot.readI32();
        struct.setAnsLikeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.targetId = iprot.readI32();
        struct.setTargetIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

