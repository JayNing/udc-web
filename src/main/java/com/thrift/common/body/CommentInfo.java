/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-10")
public class CommentInfo implements org.apache.thrift.TBase<CommentInfo, CommentInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CommentInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommentInfo");

  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COM_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("comFlag", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COM_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("comType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ESSAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("essayId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField COM_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("comLike", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CommentInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CommentInfoTupleSchemeFactory();

  public int commentId; // required
  public long createTime; // required
  public int comFlag; // required
  public String comContent; // required
  public int comType; // required
  public int essayId; // required
  public int userId; // required
  public int targetId; // required
  public int comLike; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMENT_ID((short)1, "commentId"),
    CREATE_TIME((short)2, "createTime"),
    COM_FLAG((short)3, "comFlag"),
    COM_CONTENT((short)4, "comContent"),
    COM_TYPE((short)5, "comType"),
    ESSAY_ID((short)6, "essayId"),
    USER_ID((short)7, "userId"),
    TARGET_ID((short)8, "targetId"),
    COM_LIKE((short)9, "comLike");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENT_ID
          return COMMENT_ID;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // COM_FLAG
          return COM_FLAG;
        case 4: // COM_CONTENT
          return COM_CONTENT;
        case 5: // COM_TYPE
          return COM_TYPE;
        case 6: // ESSAY_ID
          return ESSAY_ID;
        case 7: // USER_ID
          return USER_ID;
        case 8: // TARGET_ID
          return TARGET_ID;
        case 9: // COM_LIKE
          return COM_LIKE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMENTID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __COMFLAG_ISSET_ID = 2;
  private static final int __COMTYPE_ISSET_ID = 3;
  private static final int __ESSAYID_ISSET_ID = 4;
  private static final int __USERID_ISSET_ID = 5;
  private static final int __TARGETID_ISSET_ID = 6;
  private static final int __COMLIKE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COM_FLAG, new org.apache.thrift.meta_data.FieldMetaData("comFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COM_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("comContent", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("comType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESSAY_ID, new org.apache.thrift.meta_data.FieldMetaData("essayId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("targetId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COM_LIKE, new org.apache.thrift.meta_data.FieldMetaData("comLike", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommentInfo.class, metaDataMap);
  }

  public CommentInfo() {
  }

  public CommentInfo(
    int commentId,
    long createTime,
    int comFlag,
    String comContent,
    int comType,
    int essayId,
    int userId,
    int targetId,
    int comLike)
  {
    this();
    this.commentId = commentId;
    setCommentIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.comFlag = comFlag;
    setComFlagIsSet(true);
    this.comContent = comContent;
    this.comType = comType;
    setComTypeIsSet(true);
    this.essayId = essayId;
    setEssayIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.targetId = targetId;
    setTargetIdIsSet(true);
    this.comLike = comLike;
    setComLikeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommentInfo(CommentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.commentId = other.commentId;
    this.createTime = other.createTime;
    this.comFlag = other.comFlag;
    if (other.isSetComContent()) {
      this.comContent = other.comContent;
    }
    this.comType = other.comType;
    this.essayId = other.essayId;
    this.userId = other.userId;
    this.targetId = other.targetId;
    this.comLike = other.comLike;
  }

  public CommentInfo deepCopy() {
    return new CommentInfo(this);
  }

  @Override
  public void clear() {
    setCommentIdIsSet(false);
    this.commentId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setComFlagIsSet(false);
    this.comFlag = 0;
    this.comContent = null;
    setComTypeIsSet(false);
    this.comType = 0;
    setEssayIdIsSet(false);
    this.essayId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setTargetIdIsSet(false);
    this.targetId = 0;
    setComLikeIsSet(false);
    this.comLike = 0;
  }

  public int getCommentId() {
    return this.commentId;
  }

  public CommentInfo setCommentId(int commentId) {
    this.commentId = commentId;
    setCommentIdIsSet(true);
    return this;
  }

  public void unsetCommentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  public void setCommentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public CommentInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getComFlag() {
    return this.comFlag;
  }

  public CommentInfo setComFlag(int comFlag) {
    this.comFlag = comFlag;
    setComFlagIsSet(true);
    return this;
  }

  public void unsetComFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMFLAG_ISSET_ID);
  }

  /** Returns true if field comFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetComFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMFLAG_ISSET_ID);
  }

  public void setComFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMFLAG_ISSET_ID, value);
  }

  public String getComContent() {
    return this.comContent;
  }

  public CommentInfo setComContent(String comContent) {
    this.comContent = comContent;
    return this;
  }

  public void unsetComContent() {
    this.comContent = null;
  }

  /** Returns true if field comContent is set (has been assigned a value) and false otherwise */
  public boolean isSetComContent() {
    return this.comContent != null;
  }

  public void setComContentIsSet(boolean value) {
    if (!value) {
      this.comContent = null;
    }
  }

  public int getComType() {
    return this.comType;
  }

  public CommentInfo setComType(int comType) {
    this.comType = comType;
    setComTypeIsSet(true);
    return this;
  }

  public void unsetComType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMTYPE_ISSET_ID);
  }

  /** Returns true if field comType is set (has been assigned a value) and false otherwise */
  public boolean isSetComType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMTYPE_ISSET_ID);
  }

  public void setComTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMTYPE_ISSET_ID, value);
  }

  public int getEssayId() {
    return this.essayId;
  }

  public CommentInfo setEssayId(int essayId) {
    this.essayId = essayId;
    setEssayIdIsSet(true);
    return this;
  }

  public void unsetEssayId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESSAYID_ISSET_ID);
  }

  /** Returns true if field essayId is set (has been assigned a value) and false otherwise */
  public boolean isSetEssayId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESSAYID_ISSET_ID);
  }

  public void setEssayIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESSAYID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CommentInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getTargetId() {
    return this.targetId;
  }

  public CommentInfo setTargetId(int targetId) {
    this.targetId = targetId;
    setTargetIdIsSet(true);
    return this;
  }

  public void unsetTargetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  /** Returns true if field targetId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  public void setTargetIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETID_ISSET_ID, value);
  }

  public int getComLike() {
    return this.comLike;
  }

  public CommentInfo setComLike(int comLike) {
    this.comLike = comLike;
    setComLikeIsSet(true);
    return this;
  }

  public void unsetComLike() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMLIKE_ISSET_ID);
  }

  /** Returns true if field comLike is set (has been assigned a value) and false otherwise */
  public boolean isSetComLike() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMLIKE_ISSET_ID);
  }

  public void setComLikeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMLIKE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case COM_FLAG:
      if (value == null) {
        unsetComFlag();
      } else {
        setComFlag((Integer)value);
      }
      break;

    case COM_CONTENT:
      if (value == null) {
        unsetComContent();
      } else {
        setComContent((String)value);
      }
      break;

    case COM_TYPE:
      if (value == null) {
        unsetComType();
      } else {
        setComType((Integer)value);
      }
      break;

    case ESSAY_ID:
      if (value == null) {
        unsetEssayId();
      } else {
        setEssayId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case TARGET_ID:
      if (value == null) {
        unsetTargetId();
      } else {
        setTargetId((Integer)value);
      }
      break;

    case COM_LIKE:
      if (value == null) {
        unsetComLike();
      } else {
        setComLike((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENT_ID:
      return getCommentId();

    case CREATE_TIME:
      return getCreateTime();

    case COM_FLAG:
      return getComFlag();

    case COM_CONTENT:
      return getComContent();

    case COM_TYPE:
      return getComType();

    case ESSAY_ID:
      return getEssayId();

    case USER_ID:
      return getUserId();

    case TARGET_ID:
      return getTargetId();

    case COM_LIKE:
      return getComLike();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENT_ID:
      return isSetCommentId();
    case CREATE_TIME:
      return isSetCreateTime();
    case COM_FLAG:
      return isSetComFlag();
    case COM_CONTENT:
      return isSetComContent();
    case COM_TYPE:
      return isSetComType();
    case ESSAY_ID:
      return isSetEssayId();
    case USER_ID:
      return isSetUserId();
    case TARGET_ID:
      return isSetTargetId();
    case COM_LIKE:
      return isSetComLike();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommentInfo)
      return this.equals((CommentInfo)that);
    return false;
  }

  public boolean equals(CommentInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commentId = true;
    boolean that_present_commentId = true;
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (this.commentId != that.commentId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_comFlag = true;
    boolean that_present_comFlag = true;
    if (this_present_comFlag || that_present_comFlag) {
      if (!(this_present_comFlag && that_present_comFlag))
        return false;
      if (this.comFlag != that.comFlag)
        return false;
    }

    boolean this_present_comContent = true && this.isSetComContent();
    boolean that_present_comContent = true && that.isSetComContent();
    if (this_present_comContent || that_present_comContent) {
      if (!(this_present_comContent && that_present_comContent))
        return false;
      if (!this.comContent.equals(that.comContent))
        return false;
    }

    boolean this_present_comType = true;
    boolean that_present_comType = true;
    if (this_present_comType || that_present_comType) {
      if (!(this_present_comType && that_present_comType))
        return false;
      if (this.comType != that.comType)
        return false;
    }

    boolean this_present_essayId = true;
    boolean that_present_essayId = true;
    if (this_present_essayId || that_present_essayId) {
      if (!(this_present_essayId && that_present_essayId))
        return false;
      if (this.essayId != that.essayId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_targetId = true;
    boolean that_present_targetId = true;
    if (this_present_targetId || that_present_targetId) {
      if (!(this_present_targetId && that_present_targetId))
        return false;
      if (this.targetId != that.targetId)
        return false;
    }

    boolean this_present_comLike = true;
    boolean that_present_comLike = true;
    if (this_present_comLike || that_present_comLike) {
      if (!(this_present_comLike && that_present_comLike))
        return false;
      if (this.comLike != that.comLike)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + commentId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + comFlag;

    hashCode = hashCode * 8191 + ((isSetComContent()) ? 131071 : 524287);
    if (isSetComContent())
      hashCode = hashCode * 8191 + comContent.hashCode();

    hashCode = hashCode * 8191 + comType;

    hashCode = hashCode * 8191 + essayId;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + targetId;

    hashCode = hashCode * 8191 + comLike;

    return hashCode;
  }

  @Override
  public int compareTo(CommentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComFlag()).compareTo(other.isSetComFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comFlag, other.comFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComContent()).compareTo(other.isSetComContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comContent, other.comContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComType()).compareTo(other.isSetComType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comType, other.comType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEssayId()).compareTo(other.isSetEssayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEssayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.essayId, other.essayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetId()).compareTo(other.isSetTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetId, other.targetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComLike()).compareTo(other.isSetComLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comLike, other.comLike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommentInfo(");
    boolean first = true;

    sb.append("commentId:");
    sb.append(this.commentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comFlag:");
    sb.append(this.comFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comContent:");
    if (this.comContent == null) {
      sb.append("null");
    } else {
      sb.append(this.comContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comType:");
    sb.append(this.comType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("essayId:");
    sb.append(this.essayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetId:");
    sb.append(this.targetId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comLike:");
    sb.append(this.comLike);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommentInfoStandardScheme getScheme() {
      return new CommentInfoStandardScheme();
    }
  }

  private static class CommentInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<CommentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentId = iprot.readI32();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COM_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comFlag = iprot.readI32();
              struct.setComFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COM_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comContent = iprot.readString();
              struct.setComContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comType = iprot.readI32();
              struct.setComTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ESSAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.essayId = iprot.readI32();
              struct.setEssayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetId = iprot.readI32();
              struct.setTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COM_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comLike = iprot.readI32();
              struct.setComLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.commentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COM_FLAG_FIELD_DESC);
      oprot.writeI32(struct.comFlag);
      oprot.writeFieldEnd();
      if (struct.comContent != null) {
        oprot.writeFieldBegin(COM_CONTENT_FIELD_DESC);
        oprot.writeString(struct.comContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.comType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESSAY_ID_FIELD_DESC);
      oprot.writeI32(struct.essayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
      oprot.writeI32(struct.targetId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COM_LIKE_FIELD_DESC);
      oprot.writeI32(struct.comLike);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommentInfoTupleScheme getScheme() {
      return new CommentInfoTupleScheme();
    }
  }

  private static class CommentInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<CommentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommentId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(1);
      }
      if (struct.isSetComFlag()) {
        optionals.set(2);
      }
      if (struct.isSetComContent()) {
        optionals.set(3);
      }
      if (struct.isSetComType()) {
        optionals.set(4);
      }
      if (struct.isSetEssayId()) {
        optionals.set(5);
      }
      if (struct.isSetUserId()) {
        optionals.set(6);
      }
      if (struct.isSetTargetId()) {
        optionals.set(7);
      }
      if (struct.isSetComLike()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCommentId()) {
        oprot.writeI32(struct.commentId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetComFlag()) {
        oprot.writeI32(struct.comFlag);
      }
      if (struct.isSetComContent()) {
        oprot.writeString(struct.comContent);
      }
      if (struct.isSetComType()) {
        oprot.writeI32(struct.comType);
      }
      if (struct.isSetEssayId()) {
        oprot.writeI32(struct.essayId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetTargetId()) {
        oprot.writeI32(struct.targetId);
      }
      if (struct.isSetComLike()) {
        oprot.writeI32(struct.comLike);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.commentId = iprot.readI32();
        struct.setCommentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comFlag = iprot.readI32();
        struct.setComFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comContent = iprot.readString();
        struct.setComContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.comType = iprot.readI32();
        struct.setComTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.essayId = iprot.readI32();
        struct.setEssayIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.targetId = iprot.readI32();
        struct.setTargetIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.comLike = iprot.readI32();
        struct.setComLikeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

