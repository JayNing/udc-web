/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-27")
public class Department implements org.apache.thrift.TBase<Department, Department._Fields>, java.io.Serializable, Cloneable, Comparable<Department> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Department");

  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_DEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentDepId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DepartmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DepartmentTupleSchemeFactory();

  public int departmentId; // required
  public String departmentName; // required
  public String description; // required
  public int flag; // required
  public int parentDepId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPARTMENT_ID((short)1, "departmentId"),
    DEPARTMENT_NAME((short)2, "departmentName"),
    DESCRIPTION((short)3, "description"),
    FLAG((short)4, "flag"),
    PARENT_DEP_ID((short)5, "parentDepId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 2: // DEPARTMENT_NAME
          return DEPARTMENT_NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // FLAG
          return FLAG;
        case 5: // PARENT_DEP_ID
          return PARENT_DEP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTMENTID_ISSET_ID = 0;
  private static final int __FLAG_ISSET_ID = 1;
  private static final int __PARENTDEPID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("departmentName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_DEP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentDepId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Department.class, metaDataMap);
  }

  public Department() {
  }

  public Department(
    int departmentId,
    String departmentName,
    String description,
    int flag,
    int parentDepId)
  {
    this();
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    this.departmentName = departmentName;
    this.description = description;
    this.flag = flag;
    setFlagIsSet(true);
    this.parentDepId = parentDepId;
    setParentDepIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Department(Department other) {
    __isset_bitfield = other.__isset_bitfield;
    this.departmentId = other.departmentId;
    if (other.isSetDepartmentName()) {
      this.departmentName = other.departmentName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.flag = other.flag;
    this.parentDepId = other.parentDepId;
  }

  public Department deepCopy() {
    return new Department(this);
  }

  @Override
  public void clear() {
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    this.departmentName = null;
    this.description = null;
    setFlagIsSet(false);
    this.flag = 0;
    setParentDepIdIsSet(false);
    this.parentDepId = 0;
  }

  public int getDepartmentId() {
    return this.departmentId;
  }

  public Department setDepartmentId(int departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public String getDepartmentName() {
    return this.departmentName;
  }

  public Department setDepartmentName(String departmentName) {
    this.departmentName = departmentName;
    return this;
  }

  public void unsetDepartmentName() {
    this.departmentName = null;
  }

  /** Returns true if field departmentName is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentName() {
    return this.departmentName != null;
  }

  public void setDepartmentNameIsSet(boolean value) {
    if (!value) {
      this.departmentName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Department setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getFlag() {
    return this.flag;
  }

  public Department setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public int getParentDepId() {
    return this.parentDepId;
  }

  public Department setParentDepId(int parentDepId) {
    this.parentDepId = parentDepId;
    setParentDepIdIsSet(true);
    return this;
  }

  public void unsetParentDepId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTDEPID_ISSET_ID);
  }

  /** Returns true if field parentDepId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentDepId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTDEPID_ISSET_ID);
  }

  public void setParentDepIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTDEPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Integer)value);
      }
      break;

    case DEPARTMENT_NAME:
      if (value == null) {
        unsetDepartmentName();
      } else {
        setDepartmentName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case PARENT_DEP_ID:
      if (value == null) {
        unsetParentDepId();
      } else {
        setParentDepId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPARTMENT_ID:
      return getDepartmentId();

    case DEPARTMENT_NAME:
      return getDepartmentName();

    case DESCRIPTION:
      return getDescription();

    case FLAG:
      return getFlag();

    case PARENT_DEP_ID:
      return getParentDepId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case DEPARTMENT_NAME:
      return isSetDepartmentName();
    case DESCRIPTION:
      return isSetDescription();
    case FLAG:
      return isSetFlag();
    case PARENT_DEP_ID:
      return isSetParentDepId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Department)
      return this.equals((Department)that);
    return false;
  }

  public boolean equals(Department that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_departmentId = true;
    boolean that_present_departmentId = true;
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_departmentName = true && this.isSetDepartmentName();
    boolean that_present_departmentName = true && that.isSetDepartmentName();
    if (this_present_departmentName || that_present_departmentName) {
      if (!(this_present_departmentName && that_present_departmentName))
        return false;
      if (!this.departmentName.equals(that.departmentName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_parentDepId = true;
    boolean that_present_parentDepId = true;
    if (this_present_parentDepId || that_present_parentDepId) {
      if (!(this_present_parentDepId && that_present_parentDepId))
        return false;
      if (this.parentDepId != that.parentDepId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + departmentId;

    hashCode = hashCode * 8191 + ((isSetDepartmentName()) ? 131071 : 524287);
    if (isSetDepartmentName())
      hashCode = hashCode * 8191 + departmentName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + flag;

    hashCode = hashCode * 8191 + parentDepId;

    return hashCode;
  }

  @Override
  public int compareTo(Department other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentName()).compareTo(other.isSetDepartmentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentName, other.departmentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentDepId()).compareTo(other.isSetParentDepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentDepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentDepId, other.parentDepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Department(");
    boolean first = true;

    sb.append("departmentId:");
    sb.append(this.departmentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("departmentName:");
    if (this.departmentName == null) {
      sb.append("null");
    } else {
      sb.append(this.departmentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentDepId:");
    sb.append(this.parentDepId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DepartmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DepartmentStandardScheme getScheme() {
      return new DepartmentStandardScheme();
    }
  }

  private static class DepartmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Department> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Department struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.departmentId = iprot.readI32();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPARTMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departmentName = iprot.readString();
              struct.setDepartmentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARENT_DEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentDepId = iprot.readI32();
              struct.setParentDepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Department struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.departmentId);
      oprot.writeFieldEnd();
      if (struct.departmentName != null) {
        oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.departmentName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_DEP_ID_FIELD_DESC);
      oprot.writeI32(struct.parentDepId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DepartmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DepartmentTupleScheme getScheme() {
      return new DepartmentTupleScheme();
    }
  }

  private static class DepartmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Department> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Department struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDepartmentId()) {
        optionals.set(0);
      }
      if (struct.isSetDepartmentName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetFlag()) {
        optionals.set(3);
      }
      if (struct.isSetParentDepId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDepartmentId()) {
        oprot.writeI32(struct.departmentId);
      }
      if (struct.isSetDepartmentName()) {
        oprot.writeString(struct.departmentName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetParentDepId()) {
        oprot.writeI32(struct.parentDepId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Department struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.departmentId = iprot.readI32();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.departmentName = iprot.readString();
        struct.setDepartmentNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parentDepId = iprot.readI32();
        struct.setParentDepIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

