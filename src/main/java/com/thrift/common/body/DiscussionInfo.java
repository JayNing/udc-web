/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-30")
public class DiscussionInfo implements org.apache.thrift.TBase<DiscussionInfo, DiscussionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DiscussionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DiscussionInfo");

  private static final org.apache.thrift.protocol.TField DIS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("disId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("disType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DIS_RELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("disRelationId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DIS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("disFlag", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DIS_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("isTop", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ESSAY_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("essayTypeId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField KNLG_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("knlgCategoryId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TAG_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("TagStrings", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField KNLG_CATEGORY_FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("knlgCategoryFlowId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField KNLG_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("knlgFlag", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField USEFUL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("usefulCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UN_USEFUL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("unUsefulCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField LAST_EDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastEditTime", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DiscussionInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DiscussionInfoTupleSchemeFactory();

  public int disId; // required
  public int disType; // required
  public int disRelationId; // required
  public long createTime; // required
  public int disFlag; // required
  public String disTitle; // required
  public int userId; // required
  public int isTop; // required
  public int essayTypeId; // required
  public int knlgCategoryId; // required
  public String tagIds; // required
  public String TagStrings; // required
  public int knlgCategoryFlowId; // required
  public int knlgFlag; // required
  public int usefulCount; // required
  public int unUsefulCount; // required
  public long lastEditTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIS_ID((short)1, "disId"),
    DIS_TYPE((short)2, "disType"),
    DIS_RELATION_ID((short)3, "disRelationId"),
    CREATE_TIME((short)4, "createTime"),
    DIS_FLAG((short)5, "disFlag"),
    DIS_TITLE((short)6, "disTitle"),
    USER_ID((short)7, "userId"),
    IS_TOP((short)8, "isTop"),
    ESSAY_TYPE_ID((short)9, "essayTypeId"),
    KNLG_CATEGORY_ID((short)10, "knlgCategoryId"),
    TAG_IDS((short)11, "tagIds"),
    TAG_STRINGS((short)12, "TagStrings"),
    KNLG_CATEGORY_FLOW_ID((short)13, "knlgCategoryFlowId"),
    KNLG_FLAG((short)14, "knlgFlag"),
    USEFUL_COUNT((short)15, "usefulCount"),
    UN_USEFUL_COUNT((short)16, "unUsefulCount"),
    LAST_EDIT_TIME((short)17, "lastEditTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIS_ID
          return DIS_ID;
        case 2: // DIS_TYPE
          return DIS_TYPE;
        case 3: // DIS_RELATION_ID
          return DIS_RELATION_ID;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // DIS_FLAG
          return DIS_FLAG;
        case 6: // DIS_TITLE
          return DIS_TITLE;
        case 7: // USER_ID
          return USER_ID;
        case 8: // IS_TOP
          return IS_TOP;
        case 9: // ESSAY_TYPE_ID
          return ESSAY_TYPE_ID;
        case 10: // KNLG_CATEGORY_ID
          return KNLG_CATEGORY_ID;
        case 11: // TAG_IDS
          return TAG_IDS;
        case 12: // TAG_STRINGS
          return TAG_STRINGS;
        case 13: // KNLG_CATEGORY_FLOW_ID
          return KNLG_CATEGORY_FLOW_ID;
        case 14: // KNLG_FLAG
          return KNLG_FLAG;
        case 15: // USEFUL_COUNT
          return USEFUL_COUNT;
        case 16: // UN_USEFUL_COUNT
          return UN_USEFUL_COUNT;
        case 17: // LAST_EDIT_TIME
          return LAST_EDIT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISID_ISSET_ID = 0;
  private static final int __DISTYPE_ISSET_ID = 1;
  private static final int __DISRELATIONID_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __DISFLAG_ISSET_ID = 4;
  private static final int __USERID_ISSET_ID = 5;
  private static final int __ISTOP_ISSET_ID = 6;
  private static final int __ESSAYTYPEID_ISSET_ID = 7;
  private static final int __KNLGCATEGORYID_ISSET_ID = 8;
  private static final int __KNLGCATEGORYFLOWID_ISSET_ID = 9;
  private static final int __KNLGFLAG_ISSET_ID = 10;
  private static final int __USEFULCOUNT_ISSET_ID = 11;
  private static final int __UNUSEFULCOUNT_ISSET_ID = 12;
  private static final int __LASTEDITTIME_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIS_ID, new org.apache.thrift.meta_data.FieldMetaData("disId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("disType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIS_RELATION_ID, new org.apache.thrift.meta_data.FieldMetaData("disRelationId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("disFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIS_TITLE, new org.apache.thrift.meta_data.FieldMetaData("disTitle", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TOP, new org.apache.thrift.meta_data.FieldMetaData("isTop", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESSAY_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("essayTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNLG_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("knlgCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("TagStrings", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KNLG_CATEGORY_FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("knlgCategoryFlowId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNLG_FLAG, new org.apache.thrift.meta_data.FieldMetaData("knlgFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USEFUL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("usefulCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UN_USEFUL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("unUsefulCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_EDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastEditTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DiscussionInfo.class, metaDataMap);
  }

  public DiscussionInfo() {
  }

  public DiscussionInfo(
    int disId,
    int disType,
    int disRelationId,
    long createTime,
    int disFlag,
    String disTitle,
    int userId,
    int isTop,
    int essayTypeId,
    int knlgCategoryId,
    String tagIds,
    String TagStrings,
    int knlgCategoryFlowId,
    int knlgFlag,
    int usefulCount,
    int unUsefulCount,
    long lastEditTime)
  {
    this();
    this.disId = disId;
    setDisIdIsSet(true);
    this.disType = disType;
    setDisTypeIsSet(true);
    this.disRelationId = disRelationId;
    setDisRelationIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.disFlag = disFlag;
    setDisFlagIsSet(true);
    this.disTitle = disTitle;
    this.userId = userId;
    setUserIdIsSet(true);
    this.isTop = isTop;
    setIsTopIsSet(true);
    this.essayTypeId = essayTypeId;
    setEssayTypeIdIsSet(true);
    this.knlgCategoryId = knlgCategoryId;
    setKnlgCategoryIdIsSet(true);
    this.tagIds = tagIds;
    this.TagStrings = TagStrings;
    this.knlgCategoryFlowId = knlgCategoryFlowId;
    setKnlgCategoryFlowIdIsSet(true);
    this.knlgFlag = knlgFlag;
    setKnlgFlagIsSet(true);
    this.usefulCount = usefulCount;
    setUsefulCountIsSet(true);
    this.unUsefulCount = unUsefulCount;
    setUnUsefulCountIsSet(true);
    this.lastEditTime = lastEditTime;
    setLastEditTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DiscussionInfo(DiscussionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.disId = other.disId;
    this.disType = other.disType;
    this.disRelationId = other.disRelationId;
    this.createTime = other.createTime;
    this.disFlag = other.disFlag;
    if (other.isSetDisTitle()) {
      this.disTitle = other.disTitle;
    }
    this.userId = other.userId;
    this.isTop = other.isTop;
    this.essayTypeId = other.essayTypeId;
    this.knlgCategoryId = other.knlgCategoryId;
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    if (other.isSetTagStrings()) {
      this.TagStrings = other.TagStrings;
    }
    this.knlgCategoryFlowId = other.knlgCategoryFlowId;
    this.knlgFlag = other.knlgFlag;
    this.usefulCount = other.usefulCount;
    this.unUsefulCount = other.unUsefulCount;
    this.lastEditTime = other.lastEditTime;
  }

  public DiscussionInfo deepCopy() {
    return new DiscussionInfo(this);
  }

  @Override
  public void clear() {
    setDisIdIsSet(false);
    this.disId = 0;
    setDisTypeIsSet(false);
    this.disType = 0;
    setDisRelationIdIsSet(false);
    this.disRelationId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setDisFlagIsSet(false);
    this.disFlag = 0;
    this.disTitle = null;
    setUserIdIsSet(false);
    this.userId = 0;
    setIsTopIsSet(false);
    this.isTop = 0;
    setEssayTypeIdIsSet(false);
    this.essayTypeId = 0;
    setKnlgCategoryIdIsSet(false);
    this.knlgCategoryId = 0;
    this.tagIds = null;
    this.TagStrings = null;
    setKnlgCategoryFlowIdIsSet(false);
    this.knlgCategoryFlowId = 0;
    setKnlgFlagIsSet(false);
    this.knlgFlag = 0;
    setUsefulCountIsSet(false);
    this.usefulCount = 0;
    setUnUsefulCountIsSet(false);
    this.unUsefulCount = 0;
    setLastEditTimeIsSet(false);
    this.lastEditTime = 0;
  }

  public int getDisId() {
    return this.disId;
  }

  public DiscussionInfo setDisId(int disId) {
    this.disId = disId;
    setDisIdIsSet(true);
    return this;
  }

  public void unsetDisId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISID_ISSET_ID);
  }

  /** Returns true if field disId is set (has been assigned a value) and false otherwise */
  public boolean isSetDisId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISID_ISSET_ID);
  }

  public void setDisIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISID_ISSET_ID, value);
  }

  public int getDisType() {
    return this.disType;
  }

  public DiscussionInfo setDisType(int disType) {
    this.disType = disType;
    setDisTypeIsSet(true);
    return this;
  }

  public void unsetDisType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTYPE_ISSET_ID);
  }

  /** Returns true if field disType is set (has been assigned a value) and false otherwise */
  public boolean isSetDisType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTYPE_ISSET_ID);
  }

  public void setDisTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTYPE_ISSET_ID, value);
  }

  public int getDisRelationId() {
    return this.disRelationId;
  }

  public DiscussionInfo setDisRelationId(int disRelationId) {
    this.disRelationId = disRelationId;
    setDisRelationIdIsSet(true);
    return this;
  }

  public void unsetDisRelationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISRELATIONID_ISSET_ID);
  }

  /** Returns true if field disRelationId is set (has been assigned a value) and false otherwise */
  public boolean isSetDisRelationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISRELATIONID_ISSET_ID);
  }

  public void setDisRelationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISRELATIONID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public DiscussionInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getDisFlag() {
    return this.disFlag;
  }

  public DiscussionInfo setDisFlag(int disFlag) {
    this.disFlag = disFlag;
    setDisFlagIsSet(true);
    return this;
  }

  public void unsetDisFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISFLAG_ISSET_ID);
  }

  /** Returns true if field disFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDisFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISFLAG_ISSET_ID);
  }

  public void setDisFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISFLAG_ISSET_ID, value);
  }

  public String getDisTitle() {
    return this.disTitle;
  }

  public DiscussionInfo setDisTitle(String disTitle) {
    this.disTitle = disTitle;
    return this;
  }

  public void unsetDisTitle() {
    this.disTitle = null;
  }

  /** Returns true if field disTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetDisTitle() {
    return this.disTitle != null;
  }

  public void setDisTitleIsSet(boolean value) {
    if (!value) {
      this.disTitle = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public DiscussionInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getIsTop() {
    return this.isTop;
  }

  public DiscussionInfo setIsTop(int isTop) {
    this.isTop = isTop;
    setIsTopIsSet(true);
    return this;
  }

  public void unsetIsTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTOP_ISSET_ID);
  }

  /** Returns true if field isTop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTOP_ISSET_ID);
  }

  public void setIsTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTOP_ISSET_ID, value);
  }

  public int getEssayTypeId() {
    return this.essayTypeId;
  }

  public DiscussionInfo setEssayTypeId(int essayTypeId) {
    this.essayTypeId = essayTypeId;
    setEssayTypeIdIsSet(true);
    return this;
  }

  public void unsetEssayTypeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESSAYTYPEID_ISSET_ID);
  }

  /** Returns true if field essayTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEssayTypeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESSAYTYPEID_ISSET_ID);
  }

  public void setEssayTypeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESSAYTYPEID_ISSET_ID, value);
  }

  public int getKnlgCategoryId() {
    return this.knlgCategoryId;
  }

  public DiscussionInfo setKnlgCategoryId(int knlgCategoryId) {
    this.knlgCategoryId = knlgCategoryId;
    setKnlgCategoryIdIsSet(true);
    return this;
  }

  public void unsetKnlgCategoryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KNLGCATEGORYID_ISSET_ID);
  }

  /** Returns true if field knlgCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetKnlgCategoryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KNLGCATEGORYID_ISSET_ID);
  }

  public void setKnlgCategoryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KNLGCATEGORYID_ISSET_ID, value);
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public DiscussionInfo setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public String getTagStrings() {
    return this.TagStrings;
  }

  public DiscussionInfo setTagStrings(String TagStrings) {
    this.TagStrings = TagStrings;
    return this;
  }

  public void unsetTagStrings() {
    this.TagStrings = null;
  }

  /** Returns true if field TagStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetTagStrings() {
    return this.TagStrings != null;
  }

  public void setTagStringsIsSet(boolean value) {
    if (!value) {
      this.TagStrings = null;
    }
  }

  public int getKnlgCategoryFlowId() {
    return this.knlgCategoryFlowId;
  }

  public DiscussionInfo setKnlgCategoryFlowId(int knlgCategoryFlowId) {
    this.knlgCategoryFlowId = knlgCategoryFlowId;
    setKnlgCategoryFlowIdIsSet(true);
    return this;
  }

  public void unsetKnlgCategoryFlowId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KNLGCATEGORYFLOWID_ISSET_ID);
  }

  /** Returns true if field knlgCategoryFlowId is set (has been assigned a value) and false otherwise */
  public boolean isSetKnlgCategoryFlowId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KNLGCATEGORYFLOWID_ISSET_ID);
  }

  public void setKnlgCategoryFlowIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KNLGCATEGORYFLOWID_ISSET_ID, value);
  }

  public int getKnlgFlag() {
    return this.knlgFlag;
  }

  public DiscussionInfo setKnlgFlag(int knlgFlag) {
    this.knlgFlag = knlgFlag;
    setKnlgFlagIsSet(true);
    return this;
  }

  public void unsetKnlgFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KNLGFLAG_ISSET_ID);
  }

  /** Returns true if field knlgFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetKnlgFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KNLGFLAG_ISSET_ID);
  }

  public void setKnlgFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KNLGFLAG_ISSET_ID, value);
  }

  public int getUsefulCount() {
    return this.usefulCount;
  }

  public DiscussionInfo setUsefulCount(int usefulCount) {
    this.usefulCount = usefulCount;
    setUsefulCountIsSet(true);
    return this;
  }

  public void unsetUsefulCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USEFULCOUNT_ISSET_ID);
  }

  /** Returns true if field usefulCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUsefulCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USEFULCOUNT_ISSET_ID);
  }

  public void setUsefulCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USEFULCOUNT_ISSET_ID, value);
  }

  public int getUnUsefulCount() {
    return this.unUsefulCount;
  }

  public DiscussionInfo setUnUsefulCount(int unUsefulCount) {
    this.unUsefulCount = unUsefulCount;
    setUnUsefulCountIsSet(true);
    return this;
  }

  public void unsetUnUsefulCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNUSEFULCOUNT_ISSET_ID);
  }

  /** Returns true if field unUsefulCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnUsefulCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNUSEFULCOUNT_ISSET_ID);
  }

  public void setUnUsefulCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNUSEFULCOUNT_ISSET_ID, value);
  }

  public long getLastEditTime() {
    return this.lastEditTime;
  }

  public DiscussionInfo setLastEditTime(long lastEditTime) {
    this.lastEditTime = lastEditTime;
    setLastEditTimeIsSet(true);
    return this;
  }

  public void unsetLastEditTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTEDITTIME_ISSET_ID);
  }

  /** Returns true if field lastEditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastEditTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTEDITTIME_ISSET_ID);
  }

  public void setLastEditTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTEDITTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIS_ID:
      if (value == null) {
        unsetDisId();
      } else {
        setDisId((Integer)value);
      }
      break;

    case DIS_TYPE:
      if (value == null) {
        unsetDisType();
      } else {
        setDisType((Integer)value);
      }
      break;

    case DIS_RELATION_ID:
      if (value == null) {
        unsetDisRelationId();
      } else {
        setDisRelationId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case DIS_FLAG:
      if (value == null) {
        unsetDisFlag();
      } else {
        setDisFlag((Integer)value);
      }
      break;

    case DIS_TITLE:
      if (value == null) {
        unsetDisTitle();
      } else {
        setDisTitle((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case IS_TOP:
      if (value == null) {
        unsetIsTop();
      } else {
        setIsTop((Integer)value);
      }
      break;

    case ESSAY_TYPE_ID:
      if (value == null) {
        unsetEssayTypeId();
      } else {
        setEssayTypeId((Integer)value);
      }
      break;

    case KNLG_CATEGORY_ID:
      if (value == null) {
        unsetKnlgCategoryId();
      } else {
        setKnlgCategoryId((Integer)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case TAG_STRINGS:
      if (value == null) {
        unsetTagStrings();
      } else {
        setTagStrings((String)value);
      }
      break;

    case KNLG_CATEGORY_FLOW_ID:
      if (value == null) {
        unsetKnlgCategoryFlowId();
      } else {
        setKnlgCategoryFlowId((Integer)value);
      }
      break;

    case KNLG_FLAG:
      if (value == null) {
        unsetKnlgFlag();
      } else {
        setKnlgFlag((Integer)value);
      }
      break;

    case USEFUL_COUNT:
      if (value == null) {
        unsetUsefulCount();
      } else {
        setUsefulCount((Integer)value);
      }
      break;

    case UN_USEFUL_COUNT:
      if (value == null) {
        unsetUnUsefulCount();
      } else {
        setUnUsefulCount((Integer)value);
      }
      break;

    case LAST_EDIT_TIME:
      if (value == null) {
        unsetLastEditTime();
      } else {
        setLastEditTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIS_ID:
      return getDisId();

    case DIS_TYPE:
      return getDisType();

    case DIS_RELATION_ID:
      return getDisRelationId();

    case CREATE_TIME:
      return getCreateTime();

    case DIS_FLAG:
      return getDisFlag();

    case DIS_TITLE:
      return getDisTitle();

    case USER_ID:
      return getUserId();

    case IS_TOP:
      return getIsTop();

    case ESSAY_TYPE_ID:
      return getEssayTypeId();

    case KNLG_CATEGORY_ID:
      return getKnlgCategoryId();

    case TAG_IDS:
      return getTagIds();

    case TAG_STRINGS:
      return getTagStrings();

    case KNLG_CATEGORY_FLOW_ID:
      return getKnlgCategoryFlowId();

    case KNLG_FLAG:
      return getKnlgFlag();

    case USEFUL_COUNT:
      return getUsefulCount();

    case UN_USEFUL_COUNT:
      return getUnUsefulCount();

    case LAST_EDIT_TIME:
      return getLastEditTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIS_ID:
      return isSetDisId();
    case DIS_TYPE:
      return isSetDisType();
    case DIS_RELATION_ID:
      return isSetDisRelationId();
    case CREATE_TIME:
      return isSetCreateTime();
    case DIS_FLAG:
      return isSetDisFlag();
    case DIS_TITLE:
      return isSetDisTitle();
    case USER_ID:
      return isSetUserId();
    case IS_TOP:
      return isSetIsTop();
    case ESSAY_TYPE_ID:
      return isSetEssayTypeId();
    case KNLG_CATEGORY_ID:
      return isSetKnlgCategoryId();
    case TAG_IDS:
      return isSetTagIds();
    case TAG_STRINGS:
      return isSetTagStrings();
    case KNLG_CATEGORY_FLOW_ID:
      return isSetKnlgCategoryFlowId();
    case KNLG_FLAG:
      return isSetKnlgFlag();
    case USEFUL_COUNT:
      return isSetUsefulCount();
    case UN_USEFUL_COUNT:
      return isSetUnUsefulCount();
    case LAST_EDIT_TIME:
      return isSetLastEditTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DiscussionInfo)
      return this.equals((DiscussionInfo)that);
    return false;
  }

  public boolean equals(DiscussionInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_disId = true;
    boolean that_present_disId = true;
    if (this_present_disId || that_present_disId) {
      if (!(this_present_disId && that_present_disId))
        return false;
      if (this.disId != that.disId)
        return false;
    }

    boolean this_present_disType = true;
    boolean that_present_disType = true;
    if (this_present_disType || that_present_disType) {
      if (!(this_present_disType && that_present_disType))
        return false;
      if (this.disType != that.disType)
        return false;
    }

    boolean this_present_disRelationId = true;
    boolean that_present_disRelationId = true;
    if (this_present_disRelationId || that_present_disRelationId) {
      if (!(this_present_disRelationId && that_present_disRelationId))
        return false;
      if (this.disRelationId != that.disRelationId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_disFlag = true;
    boolean that_present_disFlag = true;
    if (this_present_disFlag || that_present_disFlag) {
      if (!(this_present_disFlag && that_present_disFlag))
        return false;
      if (this.disFlag != that.disFlag)
        return false;
    }

    boolean this_present_disTitle = true && this.isSetDisTitle();
    boolean that_present_disTitle = true && that.isSetDisTitle();
    if (this_present_disTitle || that_present_disTitle) {
      if (!(this_present_disTitle && that_present_disTitle))
        return false;
      if (!this.disTitle.equals(that.disTitle))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_isTop = true;
    boolean that_present_isTop = true;
    if (this_present_isTop || that_present_isTop) {
      if (!(this_present_isTop && that_present_isTop))
        return false;
      if (this.isTop != that.isTop)
        return false;
    }

    boolean this_present_essayTypeId = true;
    boolean that_present_essayTypeId = true;
    if (this_present_essayTypeId || that_present_essayTypeId) {
      if (!(this_present_essayTypeId && that_present_essayTypeId))
        return false;
      if (this.essayTypeId != that.essayTypeId)
        return false;
    }

    boolean this_present_knlgCategoryId = true;
    boolean that_present_knlgCategoryId = true;
    if (this_present_knlgCategoryId || that_present_knlgCategoryId) {
      if (!(this_present_knlgCategoryId && that_present_knlgCategoryId))
        return false;
      if (this.knlgCategoryId != that.knlgCategoryId)
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_TagStrings = true && this.isSetTagStrings();
    boolean that_present_TagStrings = true && that.isSetTagStrings();
    if (this_present_TagStrings || that_present_TagStrings) {
      if (!(this_present_TagStrings && that_present_TagStrings))
        return false;
      if (!this.TagStrings.equals(that.TagStrings))
        return false;
    }

    boolean this_present_knlgCategoryFlowId = true;
    boolean that_present_knlgCategoryFlowId = true;
    if (this_present_knlgCategoryFlowId || that_present_knlgCategoryFlowId) {
      if (!(this_present_knlgCategoryFlowId && that_present_knlgCategoryFlowId))
        return false;
      if (this.knlgCategoryFlowId != that.knlgCategoryFlowId)
        return false;
    }

    boolean this_present_knlgFlag = true;
    boolean that_present_knlgFlag = true;
    if (this_present_knlgFlag || that_present_knlgFlag) {
      if (!(this_present_knlgFlag && that_present_knlgFlag))
        return false;
      if (this.knlgFlag != that.knlgFlag)
        return false;
    }

    boolean this_present_usefulCount = true;
    boolean that_present_usefulCount = true;
    if (this_present_usefulCount || that_present_usefulCount) {
      if (!(this_present_usefulCount && that_present_usefulCount))
        return false;
      if (this.usefulCount != that.usefulCount)
        return false;
    }

    boolean this_present_unUsefulCount = true;
    boolean that_present_unUsefulCount = true;
    if (this_present_unUsefulCount || that_present_unUsefulCount) {
      if (!(this_present_unUsefulCount && that_present_unUsefulCount))
        return false;
      if (this.unUsefulCount != that.unUsefulCount)
        return false;
    }

    boolean this_present_lastEditTime = true;
    boolean that_present_lastEditTime = true;
    if (this_present_lastEditTime || that_present_lastEditTime) {
      if (!(this_present_lastEditTime && that_present_lastEditTime))
        return false;
      if (this.lastEditTime != that.lastEditTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + disId;

    hashCode = hashCode * 8191 + disType;

    hashCode = hashCode * 8191 + disRelationId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + disFlag;

    hashCode = hashCode * 8191 + ((isSetDisTitle()) ? 131071 : 524287);
    if (isSetDisTitle())
      hashCode = hashCode * 8191 + disTitle.hashCode();

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + isTop;

    hashCode = hashCode * 8191 + essayTypeId;

    hashCode = hashCode * 8191 + knlgCategoryId;

    hashCode = hashCode * 8191 + ((isSetTagIds()) ? 131071 : 524287);
    if (isSetTagIds())
      hashCode = hashCode * 8191 + tagIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetTagStrings()) ? 131071 : 524287);
    if (isSetTagStrings())
      hashCode = hashCode * 8191 + TagStrings.hashCode();

    hashCode = hashCode * 8191 + knlgCategoryFlowId;

    hashCode = hashCode * 8191 + knlgFlag;

    hashCode = hashCode * 8191 + usefulCount;

    hashCode = hashCode * 8191 + unUsefulCount;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastEditTime);

    return hashCode;
  }

  @Override
  public int compareTo(DiscussionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDisId()).compareTo(other.isSetDisId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disId, other.disId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisType()).compareTo(other.isSetDisType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disType, other.disType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisRelationId()).compareTo(other.isSetDisRelationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisRelationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disRelationId, other.disRelationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisFlag()).compareTo(other.isSetDisFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disFlag, other.disFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisTitle()).compareTo(other.isSetDisTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disTitle, other.disTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTop()).compareTo(other.isSetIsTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTop, other.isTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEssayTypeId()).compareTo(other.isSetEssayTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEssayTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.essayTypeId, other.essayTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnlgCategoryId()).compareTo(other.isSetKnlgCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnlgCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knlgCategoryId, other.knlgCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(other.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, other.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagStrings()).compareTo(other.isSetTagStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TagStrings, other.TagStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnlgCategoryFlowId()).compareTo(other.isSetKnlgCategoryFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnlgCategoryFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knlgCategoryFlowId, other.knlgCategoryFlowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnlgFlag()).compareTo(other.isSetKnlgFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnlgFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knlgFlag, other.knlgFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsefulCount()).compareTo(other.isSetUsefulCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsefulCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usefulCount, other.usefulCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnUsefulCount()).compareTo(other.isSetUnUsefulCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnUsefulCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unUsefulCount, other.unUsefulCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastEditTime()).compareTo(other.isSetLastEditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastEditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastEditTime, other.lastEditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DiscussionInfo(");
    boolean first = true;

    sb.append("disId:");
    sb.append(this.disId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disType:");
    sb.append(this.disType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disRelationId:");
    sb.append(this.disRelationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disFlag:");
    sb.append(this.disFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disTitle:");
    if (this.disTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.disTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTop:");
    sb.append(this.isTop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("essayTypeId:");
    sb.append(this.essayTypeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("knlgCategoryId:");
    sb.append(this.knlgCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TagStrings:");
    if (this.TagStrings == null) {
      sb.append("null");
    } else {
      sb.append(this.TagStrings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("knlgCategoryFlowId:");
    sb.append(this.knlgCategoryFlowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("knlgFlag:");
    sb.append(this.knlgFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usefulCount:");
    sb.append(this.usefulCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unUsefulCount:");
    sb.append(this.unUsefulCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastEditTime:");
    sb.append(this.lastEditTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DiscussionInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DiscussionInfoStandardScheme getScheme() {
      return new DiscussionInfoStandardScheme();
    }
  }

  private static class DiscussionInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<DiscussionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DiscussionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disId = iprot.readI32();
              struct.setDisIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disType = iprot.readI32();
              struct.setDisTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIS_RELATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disRelationId = iprot.readI32();
              struct.setDisRelationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disFlag = iprot.readI32();
              struct.setDisFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIS_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.disTitle = iprot.readString();
              struct.setDisTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isTop = iprot.readI32();
              struct.setIsTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ESSAY_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.essayTypeId = iprot.readI32();
              struct.setEssayTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KNLG_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knlgCategoryId = iprot.readI32();
              struct.setKnlgCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TAG_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TagStrings = iprot.readString();
              struct.setTagStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // KNLG_CATEGORY_FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knlgCategoryFlowId = iprot.readI32();
              struct.setKnlgCategoryFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // KNLG_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knlgFlag = iprot.readI32();
              struct.setKnlgFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USEFUL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usefulCount = iprot.readI32();
              struct.setUsefulCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UN_USEFUL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unUsefulCount = iprot.readI32();
              struct.setUnUsefulCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAST_EDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastEditTime = iprot.readI64();
              struct.setLastEditTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DiscussionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIS_ID_FIELD_DESC);
      oprot.writeI32(struct.disId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.disType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIS_RELATION_ID_FIELD_DESC);
      oprot.writeI32(struct.disRelationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIS_FLAG_FIELD_DESC);
      oprot.writeI32(struct.disFlag);
      oprot.writeFieldEnd();
      if (struct.disTitle != null) {
        oprot.writeFieldBegin(DIS_TITLE_FIELD_DESC);
        oprot.writeString(struct.disTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TOP_FIELD_DESC);
      oprot.writeI32(struct.isTop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESSAY_TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.essayTypeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KNLG_CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.knlgCategoryId);
      oprot.writeFieldEnd();
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      if (struct.TagStrings != null) {
        oprot.writeFieldBegin(TAG_STRINGS_FIELD_DESC);
        oprot.writeString(struct.TagStrings);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KNLG_CATEGORY_FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.knlgCategoryFlowId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KNLG_FLAG_FIELD_DESC);
      oprot.writeI32(struct.knlgFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USEFUL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.usefulCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_USEFUL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.unUsefulCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_EDIT_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastEditTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DiscussionInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DiscussionInfoTupleScheme getScheme() {
      return new DiscussionInfoTupleScheme();
    }
  }

  private static class DiscussionInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<DiscussionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DiscussionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDisId()) {
        optionals.set(0);
      }
      if (struct.isSetDisType()) {
        optionals.set(1);
      }
      if (struct.isSetDisRelationId()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetDisFlag()) {
        optionals.set(4);
      }
      if (struct.isSetDisTitle()) {
        optionals.set(5);
      }
      if (struct.isSetUserId()) {
        optionals.set(6);
      }
      if (struct.isSetIsTop()) {
        optionals.set(7);
      }
      if (struct.isSetEssayTypeId()) {
        optionals.set(8);
      }
      if (struct.isSetKnlgCategoryId()) {
        optionals.set(9);
      }
      if (struct.isSetTagIds()) {
        optionals.set(10);
      }
      if (struct.isSetTagStrings()) {
        optionals.set(11);
      }
      if (struct.isSetKnlgCategoryFlowId()) {
        optionals.set(12);
      }
      if (struct.isSetKnlgFlag()) {
        optionals.set(13);
      }
      if (struct.isSetUsefulCount()) {
        optionals.set(14);
      }
      if (struct.isSetUnUsefulCount()) {
        optionals.set(15);
      }
      if (struct.isSetLastEditTime()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetDisId()) {
        oprot.writeI32(struct.disId);
      }
      if (struct.isSetDisType()) {
        oprot.writeI32(struct.disType);
      }
      if (struct.isSetDisRelationId()) {
        oprot.writeI32(struct.disRelationId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetDisFlag()) {
        oprot.writeI32(struct.disFlag);
      }
      if (struct.isSetDisTitle()) {
        oprot.writeString(struct.disTitle);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetIsTop()) {
        oprot.writeI32(struct.isTop);
      }
      if (struct.isSetEssayTypeId()) {
        oprot.writeI32(struct.essayTypeId);
      }
      if (struct.isSetKnlgCategoryId()) {
        oprot.writeI32(struct.knlgCategoryId);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetTagStrings()) {
        oprot.writeString(struct.TagStrings);
      }
      if (struct.isSetKnlgCategoryFlowId()) {
        oprot.writeI32(struct.knlgCategoryFlowId);
      }
      if (struct.isSetKnlgFlag()) {
        oprot.writeI32(struct.knlgFlag);
      }
      if (struct.isSetUsefulCount()) {
        oprot.writeI32(struct.usefulCount);
      }
      if (struct.isSetUnUsefulCount()) {
        oprot.writeI32(struct.unUsefulCount);
      }
      if (struct.isSetLastEditTime()) {
        oprot.writeI64(struct.lastEditTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DiscussionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.disId = iprot.readI32();
        struct.setDisIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.disType = iprot.readI32();
        struct.setDisTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disRelationId = iprot.readI32();
        struct.setDisRelationIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.disFlag = iprot.readI32();
        struct.setDisFlagIsSet(true);
      }
      if (incoming.get(5)) {
        struct.disTitle = iprot.readString();
        struct.setDisTitleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isTop = iprot.readI32();
        struct.setIsTopIsSet(true);
      }
      if (incoming.get(8)) {
        struct.essayTypeId = iprot.readI32();
        struct.setEssayTypeIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.knlgCategoryId = iprot.readI32();
        struct.setKnlgCategoryIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.TagStrings = iprot.readString();
        struct.setTagStringsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.knlgCategoryFlowId = iprot.readI32();
        struct.setKnlgCategoryFlowIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.knlgFlag = iprot.readI32();
        struct.setKnlgFlagIsSet(true);
      }
      if (incoming.get(14)) {
        struct.usefulCount = iprot.readI32();
        struct.setUsefulCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.unUsefulCount = iprot.readI32();
        struct.setUnUsefulCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastEditTime = iprot.readI64();
        struct.setLastEditTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

