/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-31")
public class ExamInfo implements org.apache.thrift.TBase<ExamInfo, ExamInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ExamInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExamInfo");

  private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXAM_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("examTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ASSM_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("assmStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ASSM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assmUserId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ASSM_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("assmContent", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ASSM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("assmTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ORGANISER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("organiserId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExamInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExamInfoTupleSchemeFactory();

  public int examId; // required
  public String examTitle; // required
  public long startTime; // required
  public long endTime; // required
  public int time; // required
  public int assmStatus; // required
  public int assmUserId; // required
  public String assmContent; // required
  public long assmTime; // required
  public int organiserId; // required
  public long createTime; // required
  public int flag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXAM_ID((short)1, "examId"),
    EXAM_TITLE((short)2, "examTitle"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    TIME((short)5, "time"),
    ASSM_STATUS((short)6, "assmStatus"),
    ASSM_USER_ID((short)7, "assmUserId"),
    ASSM_CONTENT((short)8, "assmContent"),
    ASSM_TIME((short)9, "assmTime"),
    ORGANISER_ID((short)10, "organiserId"),
    CREATE_TIME((short)11, "createTime"),
    FLAG((short)12, "flag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXAM_ID
          return EXAM_ID;
        case 2: // EXAM_TITLE
          return EXAM_TITLE;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // TIME
          return TIME;
        case 6: // ASSM_STATUS
          return ASSM_STATUS;
        case 7: // ASSM_USER_ID
          return ASSM_USER_ID;
        case 8: // ASSM_CONTENT
          return ASSM_CONTENT;
        case 9: // ASSM_TIME
          return ASSM_TIME;
        case 10: // ORGANISER_ID
          return ORGANISER_ID;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXAMID_ISSET_ID = 0;
  private static final int __STARTTIME_ISSET_ID = 1;
  private static final int __ENDTIME_ISSET_ID = 2;
  private static final int __TIME_ISSET_ID = 3;
  private static final int __ASSMSTATUS_ISSET_ID = 4;
  private static final int __ASSMUSERID_ISSET_ID = 5;
  private static final int __ASSMTIME_ISSET_ID = 6;
  private static final int __ORGANISERID_ISSET_ID = 7;
  private static final int __CREATETIME_ISSET_ID = 8;
  private static final int __FLAG_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("examId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXAM_TITLE, new org.apache.thrift.meta_data.FieldMetaData("examTitle", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSM_STATUS, new org.apache.thrift.meta_data.FieldMetaData("assmStatus", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("assmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSM_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("assmContent", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSM_TIME, new org.apache.thrift.meta_data.FieldMetaData("assmTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORGANISER_ID, new org.apache.thrift.meta_data.FieldMetaData("organiserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExamInfo.class, metaDataMap);
  }

  public ExamInfo() {
  }

  public ExamInfo(
    int examId,
    String examTitle,
    long startTime,
    long endTime,
    int time,
    int assmStatus,
    int assmUserId,
    String assmContent,
    long assmTime,
    int organiserId,
    long createTime,
    int flag)
  {
    this();
    this.examId = examId;
    setExamIdIsSet(true);
    this.examTitle = examTitle;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.assmStatus = assmStatus;
    setAssmStatusIsSet(true);
    this.assmUserId = assmUserId;
    setAssmUserIdIsSet(true);
    this.assmContent = assmContent;
    this.assmTime = assmTime;
    setAssmTimeIsSet(true);
    this.organiserId = organiserId;
    setOrganiserIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExamInfo(ExamInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.examId = other.examId;
    if (other.isSetExamTitle()) {
      this.examTitle = other.examTitle;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.time = other.time;
    this.assmStatus = other.assmStatus;
    this.assmUserId = other.assmUserId;
    if (other.isSetAssmContent()) {
      this.assmContent = other.assmContent;
    }
    this.assmTime = other.assmTime;
    this.organiserId = other.organiserId;
    this.createTime = other.createTime;
    this.flag = other.flag;
  }

  public ExamInfo deepCopy() {
    return new ExamInfo(this);
  }

  @Override
  public void clear() {
    setExamIdIsSet(false);
    this.examId = 0;
    this.examTitle = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setTimeIsSet(false);
    this.time = 0;
    setAssmStatusIsSet(false);
    this.assmStatus = 0;
    setAssmUserIdIsSet(false);
    this.assmUserId = 0;
    this.assmContent = null;
    setAssmTimeIsSet(false);
    this.assmTime = 0;
    setOrganiserIdIsSet(false);
    this.organiserId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFlagIsSet(false);
    this.flag = 0;
  }

  public int getExamId() {
    return this.examId;
  }

  public ExamInfo setExamId(int examId) {
    this.examId = examId;
    setExamIdIsSet(true);
    return this;
  }

  public void unsetExamId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXAMID_ISSET_ID);
  }

  /** Returns true if field examId is set (has been assigned a value) and false otherwise */
  public boolean isSetExamId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXAMID_ISSET_ID);
  }

  public void setExamIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXAMID_ISSET_ID, value);
  }

  public String getExamTitle() {
    return this.examTitle;
  }

  public ExamInfo setExamTitle(String examTitle) {
    this.examTitle = examTitle;
    return this;
  }

  public void unsetExamTitle() {
    this.examTitle = null;
  }

  /** Returns true if field examTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetExamTitle() {
    return this.examTitle != null;
  }

  public void setExamTitleIsSet(boolean value) {
    if (!value) {
      this.examTitle = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public ExamInfo setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public ExamInfo setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getTime() {
    return this.time;
  }

  public ExamInfo setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public int getAssmStatus() {
    return this.assmStatus;
  }

  public ExamInfo setAssmStatus(int assmStatus) {
    this.assmStatus = assmStatus;
    setAssmStatusIsSet(true);
    return this;
  }

  public void unsetAssmStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASSMSTATUS_ISSET_ID);
  }

  /** Returns true if field assmStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAssmStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASSMSTATUS_ISSET_ID);
  }

  public void setAssmStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASSMSTATUS_ISSET_ID, value);
  }

  public int getAssmUserId() {
    return this.assmUserId;
  }

  public ExamInfo setAssmUserId(int assmUserId) {
    this.assmUserId = assmUserId;
    setAssmUserIdIsSet(true);
    return this;
  }

  public void unsetAssmUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASSMUSERID_ISSET_ID);
  }

  /** Returns true if field assmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAssmUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASSMUSERID_ISSET_ID);
  }

  public void setAssmUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASSMUSERID_ISSET_ID, value);
  }

  public String getAssmContent() {
    return this.assmContent;
  }

  public ExamInfo setAssmContent(String assmContent) {
    this.assmContent = assmContent;
    return this;
  }

  public void unsetAssmContent() {
    this.assmContent = null;
  }

  /** Returns true if field assmContent is set (has been assigned a value) and false otherwise */
  public boolean isSetAssmContent() {
    return this.assmContent != null;
  }

  public void setAssmContentIsSet(boolean value) {
    if (!value) {
      this.assmContent = null;
    }
  }

  public long getAssmTime() {
    return this.assmTime;
  }

  public ExamInfo setAssmTime(long assmTime) {
    this.assmTime = assmTime;
    setAssmTimeIsSet(true);
    return this;
  }

  public void unsetAssmTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASSMTIME_ISSET_ID);
  }

  /** Returns true if field assmTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAssmTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASSMTIME_ISSET_ID);
  }

  public void setAssmTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASSMTIME_ISSET_ID, value);
  }

  public int getOrganiserId() {
    return this.organiserId;
  }

  public ExamInfo setOrganiserId(int organiserId) {
    this.organiserId = organiserId;
    setOrganiserIdIsSet(true);
    return this;
  }

  public void unsetOrganiserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORGANISERID_ISSET_ID);
  }

  /** Returns true if field organiserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganiserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORGANISERID_ISSET_ID);
  }

  public void setOrganiserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORGANISERID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ExamInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public ExamInfo setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXAM_ID:
      if (value == null) {
        unsetExamId();
      } else {
        setExamId((Integer)value);
      }
      break;

    case EXAM_TITLE:
      if (value == null) {
        unsetExamTitle();
      } else {
        setExamTitle((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case ASSM_STATUS:
      if (value == null) {
        unsetAssmStatus();
      } else {
        setAssmStatus((Integer)value);
      }
      break;

    case ASSM_USER_ID:
      if (value == null) {
        unsetAssmUserId();
      } else {
        setAssmUserId((Integer)value);
      }
      break;

    case ASSM_CONTENT:
      if (value == null) {
        unsetAssmContent();
      } else {
        setAssmContent((String)value);
      }
      break;

    case ASSM_TIME:
      if (value == null) {
        unsetAssmTime();
      } else {
        setAssmTime((Long)value);
      }
      break;

    case ORGANISER_ID:
      if (value == null) {
        unsetOrganiserId();
      } else {
        setOrganiserId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXAM_ID:
      return getExamId();

    case EXAM_TITLE:
      return getExamTitle();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case TIME:
      return getTime();

    case ASSM_STATUS:
      return getAssmStatus();

    case ASSM_USER_ID:
      return getAssmUserId();

    case ASSM_CONTENT:
      return getAssmContent();

    case ASSM_TIME:
      return getAssmTime();

    case ORGANISER_ID:
      return getOrganiserId();

    case CREATE_TIME:
      return getCreateTime();

    case FLAG:
      return getFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXAM_ID:
      return isSetExamId();
    case EXAM_TITLE:
      return isSetExamTitle();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TIME:
      return isSetTime();
    case ASSM_STATUS:
      return isSetAssmStatus();
    case ASSM_USER_ID:
      return isSetAssmUserId();
    case ASSM_CONTENT:
      return isSetAssmContent();
    case ASSM_TIME:
      return isSetAssmTime();
    case ORGANISER_ID:
      return isSetOrganiserId();
    case CREATE_TIME:
      return isSetCreateTime();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExamInfo)
      return this.equals((ExamInfo)that);
    return false;
  }

  public boolean equals(ExamInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_examId = true;
    boolean that_present_examId = true;
    if (this_present_examId || that_present_examId) {
      if (!(this_present_examId && that_present_examId))
        return false;
      if (this.examId != that.examId)
        return false;
    }

    boolean this_present_examTitle = true && this.isSetExamTitle();
    boolean that_present_examTitle = true && that.isSetExamTitle();
    if (this_present_examTitle || that_present_examTitle) {
      if (!(this_present_examTitle && that_present_examTitle))
        return false;
      if (!this.examTitle.equals(that.examTitle))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_assmStatus = true;
    boolean that_present_assmStatus = true;
    if (this_present_assmStatus || that_present_assmStatus) {
      if (!(this_present_assmStatus && that_present_assmStatus))
        return false;
      if (this.assmStatus != that.assmStatus)
        return false;
    }

    boolean this_present_assmUserId = true;
    boolean that_present_assmUserId = true;
    if (this_present_assmUserId || that_present_assmUserId) {
      if (!(this_present_assmUserId && that_present_assmUserId))
        return false;
      if (this.assmUserId != that.assmUserId)
        return false;
    }

    boolean this_present_assmContent = true && this.isSetAssmContent();
    boolean that_present_assmContent = true && that.isSetAssmContent();
    if (this_present_assmContent || that_present_assmContent) {
      if (!(this_present_assmContent && that_present_assmContent))
        return false;
      if (!this.assmContent.equals(that.assmContent))
        return false;
    }

    boolean this_present_assmTime = true;
    boolean that_present_assmTime = true;
    if (this_present_assmTime || that_present_assmTime) {
      if (!(this_present_assmTime && that_present_assmTime))
        return false;
      if (this.assmTime != that.assmTime)
        return false;
    }

    boolean this_present_organiserId = true;
    boolean that_present_organiserId = true;
    if (this_present_organiserId || that_present_organiserId) {
      if (!(this_present_organiserId && that_present_organiserId))
        return false;
      if (this.organiserId != that.organiserId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + examId;

    hashCode = hashCode * 8191 + ((isSetExamTitle()) ? 131071 : 524287);
    if (isSetExamTitle())
      hashCode = hashCode * 8191 + examTitle.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

    hashCode = hashCode * 8191 + time;

    hashCode = hashCode * 8191 + assmStatus;

    hashCode = hashCode * 8191 + assmUserId;

    hashCode = hashCode * 8191 + ((isSetAssmContent()) ? 131071 : 524287);
    if (isSetAssmContent())
      hashCode = hashCode * 8191 + assmContent.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(assmTime);

    hashCode = hashCode * 8191 + organiserId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + flag;

    return hashCode;
  }

  @Override
  public int compareTo(ExamInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExamId()).compareTo(other.isSetExamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examId, other.examId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExamTitle()).compareTo(other.isSetExamTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examTitle, other.examTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssmStatus()).compareTo(other.isSetAssmStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssmStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assmStatus, other.assmStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssmUserId()).compareTo(other.isSetAssmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assmUserId, other.assmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssmContent()).compareTo(other.isSetAssmContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssmContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assmContent, other.assmContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssmTime()).compareTo(other.isSetAssmTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssmTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assmTime, other.assmTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganiserId()).compareTo(other.isSetOrganiserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganiserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organiserId, other.organiserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExamInfo(");
    boolean first = true;

    sb.append("examId:");
    sb.append(this.examId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examTitle:");
    if (this.examTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.examTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assmStatus:");
    sb.append(this.assmStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assmUserId:");
    sb.append(this.assmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assmContent:");
    if (this.assmContent == null) {
      sb.append("null");
    } else {
      sb.append(this.assmContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assmTime:");
    sb.append(this.assmTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("organiserId:");
    sb.append(this.organiserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExamInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExamInfoStandardScheme getScheme() {
      return new ExamInfoStandardScheme();
    }
  }

  private static class ExamInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExamInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExamInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.examId = iprot.readI32();
              struct.setExamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXAM_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examTitle = iprot.readString();
              struct.setExamTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASSM_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assmStatus = iprot.readI32();
              struct.setAssmStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ASSM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assmUserId = iprot.readI32();
              struct.setAssmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASSM_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assmContent = iprot.readString();
              struct.setAssmContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASSM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.assmTime = iprot.readI64();
              struct.setAssmTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORGANISER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.organiserId = iprot.readI32();
              struct.setOrganiserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExamInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
      oprot.writeI32(struct.examId);
      oprot.writeFieldEnd();
      if (struct.examTitle != null) {
        oprot.writeFieldBegin(EXAM_TITLE_FIELD_DESC);
        oprot.writeString(struct.examTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSM_STATUS_FIELD_DESC);
      oprot.writeI32(struct.assmStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.assmUserId);
      oprot.writeFieldEnd();
      if (struct.assmContent != null) {
        oprot.writeFieldBegin(ASSM_CONTENT_FIELD_DESC);
        oprot.writeString(struct.assmContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASSM_TIME_FIELD_DESC);
      oprot.writeI64(struct.assmTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORGANISER_ID_FIELD_DESC);
      oprot.writeI32(struct.organiserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExamInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExamInfoTupleScheme getScheme() {
      return new ExamInfoTupleScheme();
    }
  }

  private static class ExamInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExamInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExamInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExamId()) {
        optionals.set(0);
      }
      if (struct.isSetExamTitle()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetAssmStatus()) {
        optionals.set(5);
      }
      if (struct.isSetAssmUserId()) {
        optionals.set(6);
      }
      if (struct.isSetAssmContent()) {
        optionals.set(7);
      }
      if (struct.isSetAssmTime()) {
        optionals.set(8);
      }
      if (struct.isSetOrganiserId()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetFlag()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetExamId()) {
        oprot.writeI32(struct.examId);
      }
      if (struct.isSetExamTitle()) {
        oprot.writeString(struct.examTitle);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetAssmStatus()) {
        oprot.writeI32(struct.assmStatus);
      }
      if (struct.isSetAssmUserId()) {
        oprot.writeI32(struct.assmUserId);
      }
      if (struct.isSetAssmContent()) {
        oprot.writeString(struct.assmContent);
      }
      if (struct.isSetAssmTime()) {
        oprot.writeI64(struct.assmTime);
      }
      if (struct.isSetOrganiserId()) {
        oprot.writeI32(struct.organiserId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExamInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.examId = iprot.readI32();
        struct.setExamIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.examTitle = iprot.readString();
        struct.setExamTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.assmStatus = iprot.readI32();
        struct.setAssmStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.assmUserId = iprot.readI32();
        struct.setAssmUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.assmContent = iprot.readString();
        struct.setAssmContentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.assmTime = iprot.readI64();
        struct.setAssmTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.organiserId = iprot.readI32();
        struct.setOrganiserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

