/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-02")
public class KnowledgeFileInfo implements org.apache.thrift.TBase<KnowledgeFileInfo, KnowledgeFileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<KnowledgeFileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KnowledgeFileInfo");

  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_ORIGINAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileOriginalName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileExt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KnowledgeFileInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KnowledgeFileInfoTupleSchemeFactory();

  public int fileId; // required
  public String fileUrl; // required
  public String fileOriginalName; // required
  public String fileName; // required
  public int fileType; // required
  public String fileExt; // required
  public long createTime; // required
  public int flag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_ID((short)1, "fileId"),
    FILE_URL((short)2, "fileUrl"),
    FILE_ORIGINAL_NAME((short)3, "fileOriginalName"),
    FILE_NAME((short)4, "fileName"),
    FILE_TYPE((short)5, "fileType"),
    FILE_EXT((short)6, "fileExt"),
    CREATE_TIME((short)7, "createTime"),
    FLAG((short)8, "flag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_ID
          return FILE_ID;
        case 2: // FILE_URL
          return FILE_URL;
        case 3: // FILE_ORIGINAL_NAME
          return FILE_ORIGINAL_NAME;
        case 4: // FILE_NAME
          return FILE_NAME;
        case 5: // FILE_TYPE
          return FILE_TYPE;
        case 6: // FILE_EXT
          return FILE_EXT;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILEID_ISSET_ID = 0;
  private static final int __FILETYPE_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __FLAG_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_ORIGINAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileOriginalName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_EXT, new org.apache.thrift.meta_data.FieldMetaData("fileExt", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KnowledgeFileInfo.class, metaDataMap);
  }

  public KnowledgeFileInfo() {
  }

  public KnowledgeFileInfo(
    int fileId,
    String fileUrl,
    String fileOriginalName,
    String fileName,
    int fileType,
    String fileExt,
    long createTime,
    int flag)
  {
    this();
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.fileUrl = fileUrl;
    this.fileOriginalName = fileOriginalName;
    this.fileName = fileName;
    this.fileType = fileType;
    setFileTypeIsSet(true);
    this.fileExt = fileExt;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KnowledgeFileInfo(KnowledgeFileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fileId = other.fileId;
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    if (other.isSetFileOriginalName()) {
      this.fileOriginalName = other.fileOriginalName;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.fileType = other.fileType;
    if (other.isSetFileExt()) {
      this.fileExt = other.fileExt;
    }
    this.createTime = other.createTime;
    this.flag = other.flag;
  }

  public KnowledgeFileInfo deepCopy() {
    return new KnowledgeFileInfo(this);
  }

  @Override
  public void clear() {
    setFileIdIsSet(false);
    this.fileId = 0;
    this.fileUrl = null;
    this.fileOriginalName = null;
    this.fileName = null;
    setFileTypeIsSet(false);
    this.fileType = 0;
    this.fileExt = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFlagIsSet(false);
    this.flag = 0;
  }

  public int getFileId() {
    return this.fileId;
  }

  public KnowledgeFileInfo setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public KnowledgeFileInfo setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public String getFileOriginalName() {
    return this.fileOriginalName;
  }

  public KnowledgeFileInfo setFileOriginalName(String fileOriginalName) {
    this.fileOriginalName = fileOriginalName;
    return this;
  }

  public void unsetFileOriginalName() {
    this.fileOriginalName = null;
  }

  /** Returns true if field fileOriginalName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileOriginalName() {
    return this.fileOriginalName != null;
  }

  public void setFileOriginalNameIsSet(boolean value) {
    if (!value) {
      this.fileOriginalName = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public KnowledgeFileInfo setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getFileType() {
    return this.fileType;
  }

  public KnowledgeFileInfo setFileType(int fileType) {
    this.fileType = fileType;
    setFileTypeIsSet(true);
    return this;
  }

  public void unsetFileType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  public void setFileTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILETYPE_ISSET_ID, value);
  }

  public String getFileExt() {
    return this.fileExt;
  }

  public KnowledgeFileInfo setFileExt(String fileExt) {
    this.fileExt = fileExt;
    return this;
  }

  public void unsetFileExt() {
    this.fileExt = null;
  }

  /** Returns true if field fileExt is set (has been assigned a value) and false otherwise */
  public boolean isSetFileExt() {
    return this.fileExt != null;
  }

  public void setFileExtIsSet(boolean value) {
    if (!value) {
      this.fileExt = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public KnowledgeFileInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public KnowledgeFileInfo setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case FILE_ORIGINAL_NAME:
      if (value == null) {
        unsetFileOriginalName();
      } else {
        setFileOriginalName((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((Integer)value);
      }
      break;

    case FILE_EXT:
      if (value == null) {
        unsetFileExt();
      } else {
        setFileExt((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_ID:
      return getFileId();

    case FILE_URL:
      return getFileUrl();

    case FILE_ORIGINAL_NAME:
      return getFileOriginalName();

    case FILE_NAME:
      return getFileName();

    case FILE_TYPE:
      return getFileType();

    case FILE_EXT:
      return getFileExt();

    case CREATE_TIME:
      return getCreateTime();

    case FLAG:
      return getFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_ID:
      return isSetFileId();
    case FILE_URL:
      return isSetFileUrl();
    case FILE_ORIGINAL_NAME:
      return isSetFileOriginalName();
    case FILE_NAME:
      return isSetFileName();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_EXT:
      return isSetFileExt();
    case CREATE_TIME:
      return isSetCreateTime();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KnowledgeFileInfo)
      return this.equals((KnowledgeFileInfo)that);
    return false;
  }

  public boolean equals(KnowledgeFileInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_fileOriginalName = true && this.isSetFileOriginalName();
    boolean that_present_fileOriginalName = true && that.isSetFileOriginalName();
    if (this_present_fileOriginalName || that_present_fileOriginalName) {
      if (!(this_present_fileOriginalName && that_present_fileOriginalName))
        return false;
      if (!this.fileOriginalName.equals(that.fileOriginalName))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileType = true;
    boolean that_present_fileType = true;
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (this.fileType != that.fileType)
        return false;
    }

    boolean this_present_fileExt = true && this.isSetFileExt();
    boolean that_present_fileExt = true && that.isSetFileExt();
    if (this_present_fileExt || that_present_fileExt) {
      if (!(this_present_fileExt && that_present_fileExt))
        return false;
      if (!this.fileExt.equals(that.fileExt))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + fileId;

    hashCode = hashCode * 8191 + ((isSetFileUrl()) ? 131071 : 524287);
    if (isSetFileUrl())
      hashCode = hashCode * 8191 + fileUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileOriginalName()) ? 131071 : 524287);
    if (isSetFileOriginalName())
      hashCode = hashCode * 8191 + fileOriginalName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
    if (isSetFileName())
      hashCode = hashCode * 8191 + fileName.hashCode();

    hashCode = hashCode * 8191 + fileType;

    hashCode = hashCode * 8191 + ((isSetFileExt()) ? 131071 : 524287);
    if (isSetFileExt())
      hashCode = hashCode * 8191 + fileExt.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + flag;

    return hashCode;
  }

  @Override
  public int compareTo(KnowledgeFileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileOriginalName()).compareTo(other.isSetFileOriginalName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileOriginalName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOriginalName, other.fileOriginalName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileExt()).compareTo(other.isSetFileExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileExt, other.fileExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KnowledgeFileInfo(");
    boolean first = true;

    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileOriginalName:");
    if (this.fileOriginalName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileOriginalName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    sb.append(this.fileType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileExt:");
    if (this.fileExt == null) {
      sb.append("null");
    } else {
      sb.append(this.fileExt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KnowledgeFileInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KnowledgeFileInfoStandardScheme getScheme() {
      return new KnowledgeFileInfoStandardScheme();
    }
  }

  private static class KnowledgeFileInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<KnowledgeFileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KnowledgeFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_ORIGINAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileOriginalName = iprot.readString();
              struct.setFileOriginalNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = iprot.readI32();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileExt = iprot.readString();
              struct.setFileExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KnowledgeFileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.fileOriginalName != null) {
        oprot.writeFieldBegin(FILE_ORIGINAL_NAME_FIELD_DESC);
        oprot.writeString(struct.fileOriginalName);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fileType);
      oprot.writeFieldEnd();
      if (struct.fileExt != null) {
        oprot.writeFieldBegin(FILE_EXT_FIELD_DESC);
        oprot.writeString(struct.fileExt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KnowledgeFileInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KnowledgeFileInfoTupleScheme getScheme() {
      return new KnowledgeFileInfoTupleScheme();
    }
  }

  private static class KnowledgeFileInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<KnowledgeFileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KnowledgeFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFileId()) {
        optionals.set(0);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(1);
      }
      if (struct.isSetFileOriginalName()) {
        optionals.set(2);
      }
      if (struct.isSetFileName()) {
        optionals.set(3);
      }
      if (struct.isSetFileType()) {
        optionals.set(4);
      }
      if (struct.isSetFileExt()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetFlag()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetFileOriginalName()) {
        oprot.writeString(struct.fileOriginalName);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileType()) {
        oprot.writeI32(struct.fileType);
      }
      if (struct.isSetFileExt()) {
        oprot.writeString(struct.fileExt);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KnowledgeFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileOriginalName = iprot.readString();
        struct.setFileOriginalNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileType = iprot.readI32();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileExt = iprot.readString();
        struct.setFileExtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

