/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-21")
public class KnowledgeInfo implements org.apache.thrift.TBase<KnowledgeInfo, KnowledgeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<KnowledgeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KnowledgeInfo");

  private static final org.apache.thrift.protocol.TField K_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("kId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VIEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REP_CAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repCatId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TAG_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("TagStrings", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BBS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bbsFlag", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KnowledgeInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KnowledgeInfoTupleSchemeFactory();

  public int kId; // required
  public String title; // required
  public String author; // required
  public String profile; // required
  public int viewCount; // required
  public int repCatId; // required
  public int flowId; // required
  public String tagIds; // required
  public String TagStrings; // required
  public int userId; // required
  public long createTime; // required
  public int flag; // required
  public int bbsFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    K_ID((short)1, "kId"),
    TITLE((short)2, "title"),
    AUTHOR((short)3, "author"),
    PROFILE((short)4, "profile"),
    VIEW_COUNT((short)5, "viewCount"),
    REP_CAT_ID((short)6, "repCatId"),
    FLOW_ID((short)7, "flowId"),
    TAG_IDS((short)8, "tagIds"),
    TAG_STRINGS((short)9, "TagStrings"),
    USER_ID((short)10, "userId"),
    CREATE_TIME((short)11, "createTime"),
    FLAG((short)12, "flag"),
    BBS_FLAG((short)13, "bbsFlag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // K_ID
          return K_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // AUTHOR
          return AUTHOR;
        case 4: // PROFILE
          return PROFILE;
        case 5: // VIEW_COUNT
          return VIEW_COUNT;
        case 6: // REP_CAT_ID
          return REP_CAT_ID;
        case 7: // FLOW_ID
          return FLOW_ID;
        case 8: // TAG_IDS
          return TAG_IDS;
        case 9: // TAG_STRINGS
          return TAG_STRINGS;
        case 10: // USER_ID
          return USER_ID;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // FLAG
          return FLAG;
        case 13: // BBS_FLAG
          return BBS_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KID_ISSET_ID = 0;
  private static final int __VIEWCOUNT_ISSET_ID = 1;
  private static final int __REPCATID_ISSET_ID = 2;
  private static final int __FLOWID_ISSET_ID = 3;
  private static final int __USERID_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __FLAG_ISSET_ID = 6;
  private static final int __BBSFLAG_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.K_ID, new org.apache.thrift.meta_data.FieldMetaData("kId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("viewCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REP_CAT_ID, new org.apache.thrift.meta_data.FieldMetaData("repCatId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("TagStrings", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BBS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bbsFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KnowledgeInfo.class, metaDataMap);
  }

  public KnowledgeInfo() {
  }

  public KnowledgeInfo(
    int kId,
    String title,
    String author,
    String profile,
    int viewCount,
    int repCatId,
    int flowId,
    String tagIds,
    String TagStrings,
    int userId,
    long createTime,
    int flag,
    int bbsFlag)
  {
    this();
    this.kId = kId;
    setKIdIsSet(true);
    this.title = title;
    this.author = author;
    this.profile = profile;
    this.viewCount = viewCount;
    setViewCountIsSet(true);
    this.repCatId = repCatId;
    setRepCatIdIsSet(true);
    this.flowId = flowId;
    setFlowIdIsSet(true);
    this.tagIds = tagIds;
    this.TagStrings = TagStrings;
    this.userId = userId;
    setUserIdIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
    this.bbsFlag = bbsFlag;
    setBbsFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KnowledgeInfo(KnowledgeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.kId = other.kId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetProfile()) {
      this.profile = other.profile;
    }
    this.viewCount = other.viewCount;
    this.repCatId = other.repCatId;
    this.flowId = other.flowId;
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    if (other.isSetTagStrings()) {
      this.TagStrings = other.TagStrings;
    }
    this.userId = other.userId;
    this.createTime = other.createTime;
    this.flag = other.flag;
    this.bbsFlag = other.bbsFlag;
  }

  public KnowledgeInfo deepCopy() {
    return new KnowledgeInfo(this);
  }

  @Override
  public void clear() {
    setKIdIsSet(false);
    this.kId = 0;
    this.title = null;
    this.author = null;
    this.profile = null;
    setViewCountIsSet(false);
    this.viewCount = 0;
    setRepCatIdIsSet(false);
    this.repCatId = 0;
    setFlowIdIsSet(false);
    this.flowId = 0;
    this.tagIds = null;
    this.TagStrings = null;
    setUserIdIsSet(false);
    this.userId = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFlagIsSet(false);
    this.flag = 0;
    setBbsFlagIsSet(false);
    this.bbsFlag = 0;
  }

  public int getKId() {
    return this.kId;
  }

  public KnowledgeInfo setKId(int kId) {
    this.kId = kId;
    setKIdIsSet(true);
    return this;
  }

  public void unsetKId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KID_ISSET_ID);
  }

  /** Returns true if field kId is set (has been assigned a value) and false otherwise */
  public boolean isSetKId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KID_ISSET_ID);
  }

  public void setKIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public KnowledgeInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public KnowledgeInfo setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getProfile() {
    return this.profile;
  }

  public KnowledgeInfo setProfile(String profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public int getViewCount() {
    return this.viewCount;
  }

  public KnowledgeInfo setViewCount(int viewCount) {
    this.viewCount = viewCount;
    setViewCountIsSet(true);
    return this;
  }

  public void unsetViewCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID);
  }

  /** Returns true if field viewCount is set (has been assigned a value) and false otherwise */
  public boolean isSetViewCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID);
  }

  public void setViewCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID, value);
  }

  public int getRepCatId() {
    return this.repCatId;
  }

  public KnowledgeInfo setRepCatId(int repCatId) {
    this.repCatId = repCatId;
    setRepCatIdIsSet(true);
    return this;
  }

  public void unsetRepCatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPCATID_ISSET_ID);
  }

  /** Returns true if field repCatId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepCatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPCATID_ISSET_ID);
  }

  public void setRepCatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPCATID_ISSET_ID, value);
  }

  public int getFlowId() {
    return this.flowId;
  }

  public KnowledgeInfo setFlowId(int flowId) {
    this.flowId = flowId;
    setFlowIdIsSet(true);
    return this;
  }

  public void unsetFlowId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLOWID_ISSET_ID);
  }

  /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLOWID_ISSET_ID);
  }

  public void setFlowIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLOWID_ISSET_ID, value);
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public KnowledgeInfo setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public String getTagStrings() {
    return this.TagStrings;
  }

  public KnowledgeInfo setTagStrings(String TagStrings) {
    this.TagStrings = TagStrings;
    return this;
  }

  public void unsetTagStrings() {
    this.TagStrings = null;
  }

  /** Returns true if field TagStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetTagStrings() {
    return this.TagStrings != null;
  }

  public void setTagStringsIsSet(boolean value) {
    if (!value) {
      this.TagStrings = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public KnowledgeInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public KnowledgeInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public KnowledgeInfo setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public int getBbsFlag() {
    return this.bbsFlag;
  }

  public KnowledgeInfo setBbsFlag(int bbsFlag) {
    this.bbsFlag = bbsFlag;
    setBbsFlagIsSet(true);
    return this;
  }

  public void unsetBbsFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BBSFLAG_ISSET_ID);
  }

  /** Returns true if field bbsFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBbsFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BBSFLAG_ISSET_ID);
  }

  public void setBbsFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BBSFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case K_ID:
      if (value == null) {
        unsetKId();
      } else {
        setKId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((String)value);
      }
      break;

    case VIEW_COUNT:
      if (value == null) {
        unsetViewCount();
      } else {
        setViewCount((Integer)value);
      }
      break;

    case REP_CAT_ID:
      if (value == null) {
        unsetRepCatId();
      } else {
        setRepCatId((Integer)value);
      }
      break;

    case FLOW_ID:
      if (value == null) {
        unsetFlowId();
      } else {
        setFlowId((Integer)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case TAG_STRINGS:
      if (value == null) {
        unsetTagStrings();
      } else {
        setTagStrings((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case BBS_FLAG:
      if (value == null) {
        unsetBbsFlag();
      } else {
        setBbsFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case K_ID:
      return getKId();

    case TITLE:
      return getTitle();

    case AUTHOR:
      return getAuthor();

    case PROFILE:
      return getProfile();

    case VIEW_COUNT:
      return getViewCount();

    case REP_CAT_ID:
      return getRepCatId();

    case FLOW_ID:
      return getFlowId();

    case TAG_IDS:
      return getTagIds();

    case TAG_STRINGS:
      return getTagStrings();

    case USER_ID:
      return getUserId();

    case CREATE_TIME:
      return getCreateTime();

    case FLAG:
      return getFlag();

    case BBS_FLAG:
      return getBbsFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case K_ID:
      return isSetKId();
    case TITLE:
      return isSetTitle();
    case AUTHOR:
      return isSetAuthor();
    case PROFILE:
      return isSetProfile();
    case VIEW_COUNT:
      return isSetViewCount();
    case REP_CAT_ID:
      return isSetRepCatId();
    case FLOW_ID:
      return isSetFlowId();
    case TAG_IDS:
      return isSetTagIds();
    case TAG_STRINGS:
      return isSetTagStrings();
    case USER_ID:
      return isSetUserId();
    case CREATE_TIME:
      return isSetCreateTime();
    case FLAG:
      return isSetFlag();
    case BBS_FLAG:
      return isSetBbsFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KnowledgeInfo)
      return this.equals((KnowledgeInfo)that);
    return false;
  }

  public boolean equals(KnowledgeInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_kId = true;
    boolean that_present_kId = true;
    if (this_present_kId || that_present_kId) {
      if (!(this_present_kId && that_present_kId))
        return false;
      if (this.kId != that.kId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_viewCount = true;
    boolean that_present_viewCount = true;
    if (this_present_viewCount || that_present_viewCount) {
      if (!(this_present_viewCount && that_present_viewCount))
        return false;
      if (this.viewCount != that.viewCount)
        return false;
    }

    boolean this_present_repCatId = true;
    boolean that_present_repCatId = true;
    if (this_present_repCatId || that_present_repCatId) {
      if (!(this_present_repCatId && that_present_repCatId))
        return false;
      if (this.repCatId != that.repCatId)
        return false;
    }

    boolean this_present_flowId = true;
    boolean that_present_flowId = true;
    if (this_present_flowId || that_present_flowId) {
      if (!(this_present_flowId && that_present_flowId))
        return false;
      if (this.flowId != that.flowId)
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_TagStrings = true && this.isSetTagStrings();
    boolean that_present_TagStrings = true && that.isSetTagStrings();
    if (this_present_TagStrings || that_present_TagStrings) {
      if (!(this_present_TagStrings && that_present_TagStrings))
        return false;
      if (!this.TagStrings.equals(that.TagStrings))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_bbsFlag = true;
    boolean that_present_bbsFlag = true;
    if (this_present_bbsFlag || that_present_bbsFlag) {
      if (!(this_present_bbsFlag && that_present_bbsFlag))
        return false;
      if (this.bbsFlag != that.bbsFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + kId;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + author.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
    if (isSetProfile())
      hashCode = hashCode * 8191 + profile.hashCode();

    hashCode = hashCode * 8191 + viewCount;

    hashCode = hashCode * 8191 + repCatId;

    hashCode = hashCode * 8191 + flowId;

    hashCode = hashCode * 8191 + ((isSetTagIds()) ? 131071 : 524287);
    if (isSetTagIds())
      hashCode = hashCode * 8191 + tagIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetTagStrings()) ? 131071 : 524287);
    if (isSetTagStrings())
      hashCode = hashCode * 8191 + TagStrings.hashCode();

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + flag;

    hashCode = hashCode * 8191 + bbsFlag;

    return hashCode;
  }

  @Override
  public int compareTo(KnowledgeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKId()).compareTo(other.isSetKId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kId, other.kId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewCount()).compareTo(other.isSetViewCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewCount, other.viewCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepCatId()).compareTo(other.isSetRepCatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepCatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repCatId, other.repCatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(other.isSetFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, other.flowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(other.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, other.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagStrings()).compareTo(other.isSetTagStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TagStrings, other.TagStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBbsFlag()).compareTo(other.isSetBbsFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBbsFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bbsFlag, other.bbsFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KnowledgeInfo(");
    boolean first = true;

    sb.append("kId:");
    sb.append(this.kId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profile:");
    if (this.profile == null) {
      sb.append("null");
    } else {
      sb.append(this.profile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewCount:");
    sb.append(this.viewCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repCatId:");
    sb.append(this.repCatId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowId:");
    sb.append(this.flowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TagStrings:");
    if (this.TagStrings == null) {
      sb.append("null");
    } else {
      sb.append(this.TagStrings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bbsFlag:");
    sb.append(this.bbsFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KnowledgeInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KnowledgeInfoStandardScheme getScheme() {
      return new KnowledgeInfoStandardScheme();
    }
  }

  private static class KnowledgeInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<KnowledgeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KnowledgeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // K_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kId = iprot.readI32();
              struct.setKIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profile = iprot.readString();
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIEW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewCount = iprot.readI32();
              struct.setViewCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REP_CAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repCatId = iprot.readI32();
              struct.setRepCatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flowId = iprot.readI32();
              struct.setFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TAG_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TagStrings = iprot.readString();
              struct.setTagStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BBS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bbsFlag = iprot.readI32();
              struct.setBbsFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KnowledgeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(K_ID_FIELD_DESC);
      oprot.writeI32(struct.kId);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        oprot.writeString(struct.profile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIEW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.viewCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REP_CAT_ID_FIELD_DESC);
      oprot.writeI32(struct.repCatId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.flowId);
      oprot.writeFieldEnd();
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      if (struct.TagStrings != null) {
        oprot.writeFieldBegin(TAG_STRINGS_FIELD_DESC);
        oprot.writeString(struct.TagStrings);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BBS_FLAG_FIELD_DESC);
      oprot.writeI32(struct.bbsFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KnowledgeInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KnowledgeInfoTupleScheme getScheme() {
      return new KnowledgeInfoTupleScheme();
    }
  }

  private static class KnowledgeInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<KnowledgeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KnowledgeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetKId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetAuthor()) {
        optionals.set(2);
      }
      if (struct.isSetProfile()) {
        optionals.set(3);
      }
      if (struct.isSetViewCount()) {
        optionals.set(4);
      }
      if (struct.isSetRepCatId()) {
        optionals.set(5);
      }
      if (struct.isSetFlowId()) {
        optionals.set(6);
      }
      if (struct.isSetTagIds()) {
        optionals.set(7);
      }
      if (struct.isSetTagStrings()) {
        optionals.set(8);
      }
      if (struct.isSetUserId()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetFlag()) {
        optionals.set(11);
      }
      if (struct.isSetBbsFlag()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetKId()) {
        oprot.writeI32(struct.kId);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetProfile()) {
        oprot.writeString(struct.profile);
      }
      if (struct.isSetViewCount()) {
        oprot.writeI32(struct.viewCount);
      }
      if (struct.isSetRepCatId()) {
        oprot.writeI32(struct.repCatId);
      }
      if (struct.isSetFlowId()) {
        oprot.writeI32(struct.flowId);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetTagStrings()) {
        oprot.writeString(struct.TagStrings);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetBbsFlag()) {
        oprot.writeI32(struct.bbsFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KnowledgeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.kId = iprot.readI32();
        struct.setKIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.profile = iprot.readString();
        struct.setProfileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.viewCount = iprot.readI32();
        struct.setViewCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.repCatId = iprot.readI32();
        struct.setRepCatIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.flowId = iprot.readI32();
        struct.setFlowIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.TagStrings = iprot.readString();
        struct.setTagStringsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bbsFlag = iprot.readI32();
        struct.setBbsFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

