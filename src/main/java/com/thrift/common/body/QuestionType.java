/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-10")
public class QuestionType implements org.apache.thrift.TBase<QuestionType, QuestionType._Fields>, java.io.Serializable, Cloneable, Comparable<QuestionType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuestionType");

  private static final org.apache.thrift.protocol.TField QUE_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queTypeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUE_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queTypeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuestionTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuestionTypeTupleSchemeFactory();

  public int queTypeId; // required
  public String queTypeName; // required
  public long createTime; // required
  public int flag; // required
  public int parentId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUE_TYPE_ID((short)1, "queTypeId"),
    QUE_TYPE_NAME((short)2, "queTypeName"),
    CREATE_TIME((short)3, "createTime"),
    FLAG((short)4, "flag"),
    PARENT_ID((short)5, "parentId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUE_TYPE_ID
          return QUE_TYPE_ID;
        case 2: // QUE_TYPE_NAME
          return QUE_TYPE_NAME;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // FLAG
          return FLAG;
        case 5: // PARENT_ID
          return PARENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUETYPEID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __FLAG_ISSET_ID = 2;
  private static final int __PARENTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUE_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("queTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUE_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuestionType.class, metaDataMap);
  }

  public QuestionType() {
  }

  public QuestionType(
    int queTypeId,
    String queTypeName,
    long createTime,
    int flag,
    int parentId)
  {
    this();
    this.queTypeId = queTypeId;
    setQueTypeIdIsSet(true);
    this.queTypeName = queTypeName;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuestionType(QuestionType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.queTypeId = other.queTypeId;
    if (other.isSetQueTypeName()) {
      this.queTypeName = other.queTypeName;
    }
    this.createTime = other.createTime;
    this.flag = other.flag;
    this.parentId = other.parentId;
  }

  public QuestionType deepCopy() {
    return new QuestionType(this);
  }

  @Override
  public void clear() {
    setQueTypeIdIsSet(false);
    this.queTypeId = 0;
    this.queTypeName = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFlagIsSet(false);
    this.flag = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
  }

  public int getQueTypeId() {
    return this.queTypeId;
  }

  public QuestionType setQueTypeId(int queTypeId) {
    this.queTypeId = queTypeId;
    setQueTypeIdIsSet(true);
    return this;
  }

  public void unsetQueTypeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUETYPEID_ISSET_ID);
  }

  /** Returns true if field queTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueTypeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUETYPEID_ISSET_ID);
  }

  public void setQueTypeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUETYPEID_ISSET_ID, value);
  }

  public String getQueTypeName() {
    return this.queTypeName;
  }

  public QuestionType setQueTypeName(String queTypeName) {
    this.queTypeName = queTypeName;
    return this;
  }

  public void unsetQueTypeName() {
    this.queTypeName = null;
  }

  /** Returns true if field queTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueTypeName() {
    return this.queTypeName != null;
  }

  public void setQueTypeNameIsSet(boolean value) {
    if (!value) {
      this.queTypeName = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public QuestionType setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public QuestionType setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public int getParentId() {
    return this.parentId;
  }

  public QuestionType setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUE_TYPE_ID:
      if (value == null) {
        unsetQueTypeId();
      } else {
        setQueTypeId((Integer)value);
      }
      break;

    case QUE_TYPE_NAME:
      if (value == null) {
        unsetQueTypeName();
      } else {
        setQueTypeName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUE_TYPE_ID:
      return getQueTypeId();

    case QUE_TYPE_NAME:
      return getQueTypeName();

    case CREATE_TIME:
      return getCreateTime();

    case FLAG:
      return getFlag();

    case PARENT_ID:
      return getParentId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUE_TYPE_ID:
      return isSetQueTypeId();
    case QUE_TYPE_NAME:
      return isSetQueTypeName();
    case CREATE_TIME:
      return isSetCreateTime();
    case FLAG:
      return isSetFlag();
    case PARENT_ID:
      return isSetParentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuestionType)
      return this.equals((QuestionType)that);
    return false;
  }

  public boolean equals(QuestionType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_queTypeId = true;
    boolean that_present_queTypeId = true;
    if (this_present_queTypeId || that_present_queTypeId) {
      if (!(this_present_queTypeId && that_present_queTypeId))
        return false;
      if (this.queTypeId != that.queTypeId)
        return false;
    }

    boolean this_present_queTypeName = true && this.isSetQueTypeName();
    boolean that_present_queTypeName = true && that.isSetQueTypeName();
    if (this_present_queTypeName || that_present_queTypeName) {
      if (!(this_present_queTypeName && that_present_queTypeName))
        return false;
      if (!this.queTypeName.equals(that.queTypeName))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + queTypeId;

    hashCode = hashCode * 8191 + ((isSetQueTypeName()) ? 131071 : 524287);
    if (isSetQueTypeName())
      hashCode = hashCode * 8191 + queTypeName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + flag;

    hashCode = hashCode * 8191 + parentId;

    return hashCode;
  }

  @Override
  public int compareTo(QuestionType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQueTypeId()).compareTo(other.isSetQueTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queTypeId, other.queTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueTypeName()).compareTo(other.isSetQueTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queTypeName, other.queTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuestionType(");
    boolean first = true;

    sb.append("queTypeId:");
    sb.append(this.queTypeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queTypeName:");
    if (this.queTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.queTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QuestionTypeStandardScheme getScheme() {
      return new QuestionTypeStandardScheme();
    }
  }

  private static class QuestionTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuestionType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuestionType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUE_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queTypeId = iprot.readI32();
              struct.setQueTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUE_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queTypeName = iprot.readString();
              struct.setQueTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuestionType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(QUE_TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.queTypeId);
      oprot.writeFieldEnd();
      if (struct.queTypeName != null) {
        oprot.writeFieldBegin(QUE_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.queTypeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QuestionTypeTupleScheme getScheme() {
      return new QuestionTypeTupleScheme();
    }
  }

  private static class QuestionTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuestionType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuestionType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQueTypeId()) {
        optionals.set(0);
      }
      if (struct.isSetQueTypeName()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetFlag()) {
        optionals.set(3);
      }
      if (struct.isSetParentId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetQueTypeId()) {
        oprot.writeI32(struct.queTypeId);
      }
      if (struct.isSetQueTypeName()) {
        oprot.writeString(struct.queTypeName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuestionType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.queTypeId = iprot.readI32();
        struct.setQueTypeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queTypeName = iprot.readString();
        struct.setQueTypeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

