/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-27")
public class RepositoryCategoryFlow implements org.apache.thrift.TBase<RepositoryCategoryFlow, RepositoryCategoryFlow._Fields>, java.io.Serializable, Cloneable, Comparable<RepositoryCategoryFlow> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepositoryCategoryFlow");

  private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FLOW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("flowName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FLOW_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flowFlag", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RepositoryCategoryFlowStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RepositoryCategoryFlowTupleSchemeFactory();

  public int flowId; // required
  public String flowName; // required
  public long createTime; // required
  public int flowFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FLOW_ID((short)1, "flowId"),
    FLOW_NAME((short)2, "flowName"),
    CREATE_TIME((short)3, "createTime"),
    FLOW_FLAG((short)4, "flowFlag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FLOW_ID
          return FLOW_ID;
        case 2: // FLOW_NAME
          return FLOW_NAME;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // FLOW_FLAG
          return FLOW_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLOWID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __FLOWFLAG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLOW_NAME, new org.apache.thrift.meta_data.FieldMetaData("flowName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLOW_FLAG, new org.apache.thrift.meta_data.FieldMetaData("flowFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepositoryCategoryFlow.class, metaDataMap);
  }

  public RepositoryCategoryFlow() {
  }

  public RepositoryCategoryFlow(
    int flowId,
    String flowName,
    long createTime,
    int flowFlag)
  {
    this();
    this.flowId = flowId;
    setFlowIdIsSet(true);
    this.flowName = flowName;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.flowFlag = flowFlag;
    setFlowFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepositoryCategoryFlow(RepositoryCategoryFlow other) {
    __isset_bitfield = other.__isset_bitfield;
    this.flowId = other.flowId;
    if (other.isSetFlowName()) {
      this.flowName = other.flowName;
    }
    this.createTime = other.createTime;
    this.flowFlag = other.flowFlag;
  }

  public RepositoryCategoryFlow deepCopy() {
    return new RepositoryCategoryFlow(this);
  }

  @Override
  public void clear() {
    setFlowIdIsSet(false);
    this.flowId = 0;
    this.flowName = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFlowFlagIsSet(false);
    this.flowFlag = 0;
  }

  public int getFlowId() {
    return this.flowId;
  }

  public RepositoryCategoryFlow setFlowId(int flowId) {
    this.flowId = flowId;
    setFlowIdIsSet(true);
    return this;
  }

  public void unsetFlowId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLOWID_ISSET_ID);
  }

  /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLOWID_ISSET_ID);
  }

  public void setFlowIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLOWID_ISSET_ID, value);
  }

  public String getFlowName() {
    return this.flowName;
  }

  public RepositoryCategoryFlow setFlowName(String flowName) {
    this.flowName = flowName;
    return this;
  }

  public void unsetFlowName() {
    this.flowName = null;
  }

  /** Returns true if field flowName is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowName() {
    return this.flowName != null;
  }

  public void setFlowNameIsSet(boolean value) {
    if (!value) {
      this.flowName = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public RepositoryCategoryFlow setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getFlowFlag() {
    return this.flowFlag;
  }

  public RepositoryCategoryFlow setFlowFlag(int flowFlag) {
    this.flowFlag = flowFlag;
    setFlowFlagIsSet(true);
    return this;
  }

  public void unsetFlowFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLOWFLAG_ISSET_ID);
  }

  /** Returns true if field flowFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLOWFLAG_ISSET_ID);
  }

  public void setFlowFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLOWFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FLOW_ID:
      if (value == null) {
        unsetFlowId();
      } else {
        setFlowId((Integer)value);
      }
      break;

    case FLOW_NAME:
      if (value == null) {
        unsetFlowName();
      } else {
        setFlowName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case FLOW_FLAG:
      if (value == null) {
        unsetFlowFlag();
      } else {
        setFlowFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FLOW_ID:
      return getFlowId();

    case FLOW_NAME:
      return getFlowName();

    case CREATE_TIME:
      return getCreateTime();

    case FLOW_FLAG:
      return getFlowFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FLOW_ID:
      return isSetFlowId();
    case FLOW_NAME:
      return isSetFlowName();
    case CREATE_TIME:
      return isSetCreateTime();
    case FLOW_FLAG:
      return isSetFlowFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepositoryCategoryFlow)
      return this.equals((RepositoryCategoryFlow)that);
    return false;
  }

  public boolean equals(RepositoryCategoryFlow that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_flowId = true;
    boolean that_present_flowId = true;
    if (this_present_flowId || that_present_flowId) {
      if (!(this_present_flowId && that_present_flowId))
        return false;
      if (this.flowId != that.flowId)
        return false;
    }

    boolean this_present_flowName = true && this.isSetFlowName();
    boolean that_present_flowName = true && that.isSetFlowName();
    if (this_present_flowName || that_present_flowName) {
      if (!(this_present_flowName && that_present_flowName))
        return false;
      if (!this.flowName.equals(that.flowName))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_flowFlag = true;
    boolean that_present_flowFlag = true;
    if (this_present_flowFlag || that_present_flowFlag) {
      if (!(this_present_flowFlag && that_present_flowFlag))
        return false;
      if (this.flowFlag != that.flowFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + flowId;

    hashCode = hashCode * 8191 + ((isSetFlowName()) ? 131071 : 524287);
    if (isSetFlowName())
      hashCode = hashCode * 8191 + flowName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + flowFlag;

    return hashCode;
  }

  @Override
  public int compareTo(RepositoryCategoryFlow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(other.isSetFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, other.flowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowName()).compareTo(other.isSetFlowName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowName, other.flowName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowFlag()).compareTo(other.isSetFlowFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowFlag, other.flowFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepositoryCategoryFlow(");
    boolean first = true;

    sb.append("flowId:");
    sb.append(this.flowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowName:");
    if (this.flowName == null) {
      sb.append("null");
    } else {
      sb.append(this.flowName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowFlag:");
    sb.append(this.flowFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepositoryCategoryFlowStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RepositoryCategoryFlowStandardScheme getScheme() {
      return new RepositoryCategoryFlowStandardScheme();
    }
  }

  private static class RepositoryCategoryFlowStandardScheme extends org.apache.thrift.scheme.StandardScheme<RepositoryCategoryFlow> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepositoryCategoryFlow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flowId = iprot.readI32();
              struct.setFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLOW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowName = iprot.readString();
              struct.setFlowNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLOW_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flowFlag = iprot.readI32();
              struct.setFlowFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepositoryCategoryFlow struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.flowId);
      oprot.writeFieldEnd();
      if (struct.flowName != null) {
        oprot.writeFieldBegin(FLOW_NAME_FIELD_DESC);
        oprot.writeString(struct.flowName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOW_FLAG_FIELD_DESC);
      oprot.writeI32(struct.flowFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepositoryCategoryFlowTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RepositoryCategoryFlowTupleScheme getScheme() {
      return new RepositoryCategoryFlowTupleScheme();
    }
  }

  private static class RepositoryCategoryFlowTupleScheme extends org.apache.thrift.scheme.TupleScheme<RepositoryCategoryFlow> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepositoryCategoryFlow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFlowId()) {
        optionals.set(0);
      }
      if (struct.isSetFlowName()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetFlowFlag()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFlowId()) {
        oprot.writeI32(struct.flowId);
      }
      if (struct.isSetFlowName()) {
        oprot.writeString(struct.flowName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetFlowFlag()) {
        oprot.writeI32(struct.flowFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepositoryCategoryFlow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.flowId = iprot.readI32();
        struct.setFlowIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flowName = iprot.readString();
        struct.setFlowNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.flowFlag = iprot.readI32();
        struct.setFlowFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

