/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-23")
public class SpeLike implements org.apache.thrift.TBase<SpeLike, SpeLike._Fields>, java.io.Serializable, Cloneable, Comparable<SpeLike> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpeLike");

  private static final org.apache.thrift.protocol.TField LIKE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("likeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("speId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpeLikeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpeLikeTupleSchemeFactory();

  public int likeId; // required
  public int speId; // required
  public int userId; // required
  public int flag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIKE_ID((short)1, "likeId"),
    SPE_ID((short)2, "speId"),
    USER_ID((short)3, "userId"),
    FLAG((short)4, "flag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIKE_ID
          return LIKE_ID;
        case 2: // SPE_ID
          return SPE_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIKEID_ISSET_ID = 0;
  private static final int __SPEID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __FLAG_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIKE_ID, new org.apache.thrift.meta_data.FieldMetaData("likeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPE_ID, new org.apache.thrift.meta_data.FieldMetaData("speId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpeLike.class, metaDataMap);
  }

  public SpeLike() {
  }

  public SpeLike(
    int likeId,
    int speId,
    int userId,
    int flag)
  {
    this();
    this.likeId = likeId;
    setLikeIdIsSet(true);
    this.speId = speId;
    setSpeIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpeLike(SpeLike other) {
    __isset_bitfield = other.__isset_bitfield;
    this.likeId = other.likeId;
    this.speId = other.speId;
    this.userId = other.userId;
    this.flag = other.flag;
  }

  public SpeLike deepCopy() {
    return new SpeLike(this);
  }

  @Override
  public void clear() {
    setLikeIdIsSet(false);
    this.likeId = 0;
    setSpeIdIsSet(false);
    this.speId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setFlagIsSet(false);
    this.flag = 0;
  }

  public int getLikeId() {
    return this.likeId;
  }

  public SpeLike setLikeId(int likeId) {
    this.likeId = likeId;
    setLikeIdIsSet(true);
    return this;
  }

  public void unsetLikeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIKEID_ISSET_ID);
  }

  /** Returns true if field likeId is set (has been assigned a value) and false otherwise */
  public boolean isSetLikeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIKEID_ISSET_ID);
  }

  public void setLikeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIKEID_ISSET_ID, value);
  }

  public int getSpeId() {
    return this.speId;
  }

  public SpeLike setSpeId(int speId) {
    this.speId = speId;
    setSpeIdIsSet(true);
    return this;
  }

  public void unsetSpeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEID_ISSET_ID);
  }

  /** Returns true if field speId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEID_ISSET_ID);
  }

  public void setSpeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public SpeLike setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public SpeLike setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LIKE_ID:
      if (value == null) {
        unsetLikeId();
      } else {
        setLikeId((Integer)value);
      }
      break;

    case SPE_ID:
      if (value == null) {
        unsetSpeId();
      } else {
        setSpeId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LIKE_ID:
      return getLikeId();

    case SPE_ID:
      return getSpeId();

    case USER_ID:
      return getUserId();

    case FLAG:
      return getFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LIKE_ID:
      return isSetLikeId();
    case SPE_ID:
      return isSetSpeId();
    case USER_ID:
      return isSetUserId();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpeLike)
      return this.equals((SpeLike)that);
    return false;
  }

  public boolean equals(SpeLike that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_likeId = true;
    boolean that_present_likeId = true;
    if (this_present_likeId || that_present_likeId) {
      if (!(this_present_likeId && that_present_likeId))
        return false;
      if (this.likeId != that.likeId)
        return false;
    }

    boolean this_present_speId = true;
    boolean that_present_speId = true;
    if (this_present_speId || that_present_speId) {
      if (!(this_present_speId && that_present_speId))
        return false;
      if (this.speId != that.speId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + likeId;

    hashCode = hashCode * 8191 + speId;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + flag;

    return hashCode;
  }

  @Override
  public int compareTo(SpeLike other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLikeId()).compareTo(other.isSetLikeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likeId, other.likeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeId()).compareTo(other.isSetSpeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speId, other.speId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpeLike(");
    boolean first = true;

    sb.append("likeId:");
    sb.append(this.likeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("speId:");
    sb.append(this.speId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpeLikeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpeLikeStandardScheme getScheme() {
      return new SpeLikeStandardScheme();
    }
  }

  private static class SpeLikeStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpeLike> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpeLike struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIKE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.likeId = iprot.readI32();
              struct.setLikeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.speId = iprot.readI32();
              struct.setSpeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpeLike struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LIKE_ID_FIELD_DESC);
      oprot.writeI32(struct.likeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPE_ID_FIELD_DESC);
      oprot.writeI32(struct.speId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpeLikeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpeLikeTupleScheme getScheme() {
      return new SpeLikeTupleScheme();
    }
  }

  private static class SpeLikeTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpeLike> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpeLike struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLikeId()) {
        optionals.set(0);
      }
      if (struct.isSetSpeId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetFlag()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLikeId()) {
        oprot.writeI32(struct.likeId);
      }
      if (struct.isSetSpeId()) {
        oprot.writeI32(struct.speId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpeLike struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.likeId = iprot.readI32();
        struct.setLikeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.speId = iprot.readI32();
        struct.setSpeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

