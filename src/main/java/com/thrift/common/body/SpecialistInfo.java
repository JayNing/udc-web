/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-24")
public class SpecialistInfo implements org.apache.thrift.TBase<SpecialistInfo, SpecialistInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SpecialistInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecialistInfo");

  private static final org.apache.thrift.protocol.TField SPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("speId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("speName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("speProfile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HONORS_FIELD_DESC = new org.apache.thrift.protocol.TField("honors", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HEAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("headUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SPE_LIKE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("speLikeCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createUserId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecialistInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecialistInfoTupleSchemeFactory();

  public int speId; // required
  public String speName; // required
  public String jobTitle; // required
  public String speProfile; // required
  public String honors; // required
  public String headUrl; // required
  public int speLikeCount; // required
  public int flag; // required
  public long createTime; // required
  public int createUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPE_ID((short)1, "speId"),
    SPE_NAME((short)2, "speName"),
    JOB_TITLE((short)3, "jobTitle"),
    SPE_PROFILE((short)4, "speProfile"),
    HONORS((short)5, "honors"),
    HEAD_URL((short)6, "headUrl"),
    SPE_LIKE_COUNT((short)7, "speLikeCount"),
    FLAG((short)8, "flag"),
    CREATE_TIME((short)9, "createTime"),
    CREATE_USER_ID((short)10, "createUserId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPE_ID
          return SPE_ID;
        case 2: // SPE_NAME
          return SPE_NAME;
        case 3: // JOB_TITLE
          return JOB_TITLE;
        case 4: // SPE_PROFILE
          return SPE_PROFILE;
        case 5: // HONORS
          return HONORS;
        case 6: // HEAD_URL
          return HEAD_URL;
        case 7: // SPE_LIKE_COUNT
          return SPE_LIKE_COUNT;
        case 8: // FLAG
          return FLAG;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // CREATE_USER_ID
          return CREATE_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPEID_ISSET_ID = 0;
  private static final int __SPELIKECOUNT_ISSET_ID = 1;
  private static final int __FLAG_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __CREATEUSERID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPE_ID, new org.apache.thrift.meta_data.FieldMetaData("speId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("speName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TITLE, new org.apache.thrift.meta_data.FieldMetaData("jobTitle", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("speProfile", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HONORS, new org.apache.thrift.meta_data.FieldMetaData("honors", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD_URL, new org.apache.thrift.meta_data.FieldMetaData("headUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPE_LIKE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("speLikeCount", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("createUserId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecialistInfo.class, metaDataMap);
  }

  public SpecialistInfo() {
  }

  public SpecialistInfo(
    int speId,
    String speName,
    String jobTitle,
    String speProfile,
    String honors,
    String headUrl,
    int speLikeCount,
    int flag,
    long createTime,
    int createUserId)
  {
    this();
    this.speId = speId;
    setSpeIdIsSet(true);
    this.speName = speName;
    this.jobTitle = jobTitle;
    this.speProfile = speProfile;
    this.honors = honors;
    this.headUrl = headUrl;
    this.speLikeCount = speLikeCount;
    setSpeLikeCountIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.createUserId = createUserId;
    setCreateUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecialistInfo(SpecialistInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.speId = other.speId;
    if (other.isSetSpeName()) {
      this.speName = other.speName;
    }
    if (other.isSetJobTitle()) {
      this.jobTitle = other.jobTitle;
    }
    if (other.isSetSpeProfile()) {
      this.speProfile = other.speProfile;
    }
    if (other.isSetHonors()) {
      this.honors = other.honors;
    }
    if (other.isSetHeadUrl()) {
      this.headUrl = other.headUrl;
    }
    this.speLikeCount = other.speLikeCount;
    this.flag = other.flag;
    this.createTime = other.createTime;
    this.createUserId = other.createUserId;
  }

  public SpecialistInfo deepCopy() {
    return new SpecialistInfo(this);
  }

  @Override
  public void clear() {
    setSpeIdIsSet(false);
    this.speId = 0;
    this.speName = null;
    this.jobTitle = null;
    this.speProfile = null;
    this.honors = null;
    this.headUrl = null;
    setSpeLikeCountIsSet(false);
    this.speLikeCount = 0;
    setFlagIsSet(false);
    this.flag = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setCreateUserIdIsSet(false);
    this.createUserId = 0;
  }

  public int getSpeId() {
    return this.speId;
  }

  public SpecialistInfo setSpeId(int speId) {
    this.speId = speId;
    setSpeIdIsSet(true);
    return this;
  }

  public void unsetSpeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEID_ISSET_ID);
  }

  /** Returns true if field speId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEID_ISSET_ID);
  }

  public void setSpeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEID_ISSET_ID, value);
  }

  public String getSpeName() {
    return this.speName;
  }

  public SpecialistInfo setSpeName(String speName) {
    this.speName = speName;
    return this;
  }

  public void unsetSpeName() {
    this.speName = null;
  }

  /** Returns true if field speName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeName() {
    return this.speName != null;
  }

  public void setSpeNameIsSet(boolean value) {
    if (!value) {
      this.speName = null;
    }
  }

  public String getJobTitle() {
    return this.jobTitle;
  }

  public SpecialistInfo setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  public void unsetJobTitle() {
    this.jobTitle = null;
  }

  /** Returns true if field jobTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTitle() {
    return this.jobTitle != null;
  }

  public void setJobTitleIsSet(boolean value) {
    if (!value) {
      this.jobTitle = null;
    }
  }

  public String getSpeProfile() {
    return this.speProfile;
  }

  public SpecialistInfo setSpeProfile(String speProfile) {
    this.speProfile = speProfile;
    return this;
  }

  public void unsetSpeProfile() {
    this.speProfile = null;
  }

  /** Returns true if field speProfile is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeProfile() {
    return this.speProfile != null;
  }

  public void setSpeProfileIsSet(boolean value) {
    if (!value) {
      this.speProfile = null;
    }
  }

  public String getHonors() {
    return this.honors;
  }

  public SpecialistInfo setHonors(String honors) {
    this.honors = honors;
    return this;
  }

  public void unsetHonors() {
    this.honors = null;
  }

  /** Returns true if field honors is set (has been assigned a value) and false otherwise */
  public boolean isSetHonors() {
    return this.honors != null;
  }

  public void setHonorsIsSet(boolean value) {
    if (!value) {
      this.honors = null;
    }
  }

  public String getHeadUrl() {
    return this.headUrl;
  }

  public SpecialistInfo setHeadUrl(String headUrl) {
    this.headUrl = headUrl;
    return this;
  }

  public void unsetHeadUrl() {
    this.headUrl = null;
  }

  /** Returns true if field headUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadUrl() {
    return this.headUrl != null;
  }

  public void setHeadUrlIsSet(boolean value) {
    if (!value) {
      this.headUrl = null;
    }
  }

  public int getSpeLikeCount() {
    return this.speLikeCount;
  }

  public SpecialistInfo setSpeLikeCount(int speLikeCount) {
    this.speLikeCount = speLikeCount;
    setSpeLikeCountIsSet(true);
    return this;
  }

  public void unsetSpeLikeCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPELIKECOUNT_ISSET_ID);
  }

  /** Returns true if field speLikeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeLikeCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPELIKECOUNT_ISSET_ID);
  }

  public void setSpeLikeCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPELIKECOUNT_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public SpecialistInfo setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public SpecialistInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getCreateUserId() {
    return this.createUserId;
  }

  public SpecialistInfo setCreateUserId(int createUserId) {
    this.createUserId = createUserId;
    setCreateUserIdIsSet(true);
    return this;
  }

  public void unsetCreateUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATEUSERID_ISSET_ID);
  }

  /** Returns true if field createUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATEUSERID_ISSET_ID);
  }

  public void setCreateUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATEUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPE_ID:
      if (value == null) {
        unsetSpeId();
      } else {
        setSpeId((Integer)value);
      }
      break;

    case SPE_NAME:
      if (value == null) {
        unsetSpeName();
      } else {
        setSpeName((String)value);
      }
      break;

    case JOB_TITLE:
      if (value == null) {
        unsetJobTitle();
      } else {
        setJobTitle((String)value);
      }
      break;

    case SPE_PROFILE:
      if (value == null) {
        unsetSpeProfile();
      } else {
        setSpeProfile((String)value);
      }
      break;

    case HONORS:
      if (value == null) {
        unsetHonors();
      } else {
        setHonors((String)value);
      }
      break;

    case HEAD_URL:
      if (value == null) {
        unsetHeadUrl();
      } else {
        setHeadUrl((String)value);
      }
      break;

    case SPE_LIKE_COUNT:
      if (value == null) {
        unsetSpeLikeCount();
      } else {
        setSpeLikeCount((Integer)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case CREATE_USER_ID:
      if (value == null) {
        unsetCreateUserId();
      } else {
        setCreateUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPE_ID:
      return getSpeId();

    case SPE_NAME:
      return getSpeName();

    case JOB_TITLE:
      return getJobTitle();

    case SPE_PROFILE:
      return getSpeProfile();

    case HONORS:
      return getHonors();

    case HEAD_URL:
      return getHeadUrl();

    case SPE_LIKE_COUNT:
      return getSpeLikeCount();

    case FLAG:
      return getFlag();

    case CREATE_TIME:
      return getCreateTime();

    case CREATE_USER_ID:
      return getCreateUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPE_ID:
      return isSetSpeId();
    case SPE_NAME:
      return isSetSpeName();
    case JOB_TITLE:
      return isSetJobTitle();
    case SPE_PROFILE:
      return isSetSpeProfile();
    case HONORS:
      return isSetHonors();
    case HEAD_URL:
      return isSetHeadUrl();
    case SPE_LIKE_COUNT:
      return isSetSpeLikeCount();
    case FLAG:
      return isSetFlag();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATE_USER_ID:
      return isSetCreateUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpecialistInfo)
      return this.equals((SpecialistInfo)that);
    return false;
  }

  public boolean equals(SpecialistInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_speId = true;
    boolean that_present_speId = true;
    if (this_present_speId || that_present_speId) {
      if (!(this_present_speId && that_present_speId))
        return false;
      if (this.speId != that.speId)
        return false;
    }

    boolean this_present_speName = true && this.isSetSpeName();
    boolean that_present_speName = true && that.isSetSpeName();
    if (this_present_speName || that_present_speName) {
      if (!(this_present_speName && that_present_speName))
        return false;
      if (!this.speName.equals(that.speName))
        return false;
    }

    boolean this_present_jobTitle = true && this.isSetJobTitle();
    boolean that_present_jobTitle = true && that.isSetJobTitle();
    if (this_present_jobTitle || that_present_jobTitle) {
      if (!(this_present_jobTitle && that_present_jobTitle))
        return false;
      if (!this.jobTitle.equals(that.jobTitle))
        return false;
    }

    boolean this_present_speProfile = true && this.isSetSpeProfile();
    boolean that_present_speProfile = true && that.isSetSpeProfile();
    if (this_present_speProfile || that_present_speProfile) {
      if (!(this_present_speProfile && that_present_speProfile))
        return false;
      if (!this.speProfile.equals(that.speProfile))
        return false;
    }

    boolean this_present_honors = true && this.isSetHonors();
    boolean that_present_honors = true && that.isSetHonors();
    if (this_present_honors || that_present_honors) {
      if (!(this_present_honors && that_present_honors))
        return false;
      if (!this.honors.equals(that.honors))
        return false;
    }

    boolean this_present_headUrl = true && this.isSetHeadUrl();
    boolean that_present_headUrl = true && that.isSetHeadUrl();
    if (this_present_headUrl || that_present_headUrl) {
      if (!(this_present_headUrl && that_present_headUrl))
        return false;
      if (!this.headUrl.equals(that.headUrl))
        return false;
    }

    boolean this_present_speLikeCount = true;
    boolean that_present_speLikeCount = true;
    if (this_present_speLikeCount || that_present_speLikeCount) {
      if (!(this_present_speLikeCount && that_present_speLikeCount))
        return false;
      if (this.speLikeCount != that.speLikeCount)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_createUserId = true;
    boolean that_present_createUserId = true;
    if (this_present_createUserId || that_present_createUserId) {
      if (!(this_present_createUserId && that_present_createUserId))
        return false;
      if (this.createUserId != that.createUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + speId;

    hashCode = hashCode * 8191 + ((isSetSpeName()) ? 131071 : 524287);
    if (isSetSpeName())
      hashCode = hashCode * 8191 + speName.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobTitle()) ? 131071 : 524287);
    if (isSetJobTitle())
      hashCode = hashCode * 8191 + jobTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpeProfile()) ? 131071 : 524287);
    if (isSetSpeProfile())
      hashCode = hashCode * 8191 + speProfile.hashCode();

    hashCode = hashCode * 8191 + ((isSetHonors()) ? 131071 : 524287);
    if (isSetHonors())
      hashCode = hashCode * 8191 + honors.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadUrl()) ? 131071 : 524287);
    if (isSetHeadUrl())
      hashCode = hashCode * 8191 + headUrl.hashCode();

    hashCode = hashCode * 8191 + speLikeCount;

    hashCode = hashCode * 8191 + flag;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + createUserId;

    return hashCode;
  }

  @Override
  public int compareTo(SpecialistInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpeId()).compareTo(other.isSetSpeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speId, other.speId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeName()).compareTo(other.isSetSpeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speName, other.speName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTitle()).compareTo(other.isSetJobTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTitle, other.jobTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeProfile()).compareTo(other.isSetSpeProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speProfile, other.speProfile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHonors()).compareTo(other.isSetHonors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHonors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.honors, other.honors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadUrl()).compareTo(other.isSetHeadUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headUrl, other.headUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeLikeCount()).compareTo(other.isSetSpeLikeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeLikeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speLikeCount, other.speLikeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUserId()).compareTo(other.isSetCreateUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUserId, other.createUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpecialistInfo(");
    boolean first = true;

    sb.append("speId:");
    sb.append(this.speId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("speName:");
    if (this.speName == null) {
      sb.append("null");
    } else {
      sb.append(this.speName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTitle:");
    if (this.jobTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.jobTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speProfile:");
    if (this.speProfile == null) {
      sb.append("null");
    } else {
      sb.append(this.speProfile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("honors:");
    if (this.honors == null) {
      sb.append("null");
    } else {
      sb.append(this.honors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headUrl:");
    if (this.headUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.headUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speLikeCount:");
    sb.append(this.speLikeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUserId:");
    sb.append(this.createUserId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecialistInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecialistInfoStandardScheme getScheme() {
      return new SpecialistInfoStandardScheme();
    }
  }

  private static class SpecialistInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecialistInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecialistInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.speId = iprot.readI32();
              struct.setSpeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.speName = iprot.readString();
              struct.setSpeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobTitle = iprot.readString();
              struct.setJobTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.speProfile = iprot.readString();
              struct.setSpeProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HONORS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.honors = iprot.readString();
              struct.setHonorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEAD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headUrl = iprot.readString();
              struct.setHeadUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPE_LIKE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.speLikeCount = iprot.readI32();
              struct.setSpeLikeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createUserId = iprot.readI32();
              struct.setCreateUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecialistInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SPE_ID_FIELD_DESC);
      oprot.writeI32(struct.speId);
      oprot.writeFieldEnd();
      if (struct.speName != null) {
        oprot.writeFieldBegin(SPE_NAME_FIELD_DESC);
        oprot.writeString(struct.speName);
        oprot.writeFieldEnd();
      }
      if (struct.jobTitle != null) {
        oprot.writeFieldBegin(JOB_TITLE_FIELD_DESC);
        oprot.writeString(struct.jobTitle);
        oprot.writeFieldEnd();
      }
      if (struct.speProfile != null) {
        oprot.writeFieldBegin(SPE_PROFILE_FIELD_DESC);
        oprot.writeString(struct.speProfile);
        oprot.writeFieldEnd();
      }
      if (struct.honors != null) {
        oprot.writeFieldBegin(HONORS_FIELD_DESC);
        oprot.writeString(struct.honors);
        oprot.writeFieldEnd();
      }
      if (struct.headUrl != null) {
        oprot.writeFieldBegin(HEAD_URL_FIELD_DESC);
        oprot.writeString(struct.headUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPE_LIKE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.speLikeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.createUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecialistInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecialistInfoTupleScheme getScheme() {
      return new SpecialistInfoTupleScheme();
    }
  }

  private static class SpecialistInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecialistInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecialistInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSpeId()) {
        optionals.set(0);
      }
      if (struct.isSetSpeName()) {
        optionals.set(1);
      }
      if (struct.isSetJobTitle()) {
        optionals.set(2);
      }
      if (struct.isSetSpeProfile()) {
        optionals.set(3);
      }
      if (struct.isSetHonors()) {
        optionals.set(4);
      }
      if (struct.isSetHeadUrl()) {
        optionals.set(5);
      }
      if (struct.isSetSpeLikeCount()) {
        optionals.set(6);
      }
      if (struct.isSetFlag()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetCreateUserId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSpeId()) {
        oprot.writeI32(struct.speId);
      }
      if (struct.isSetSpeName()) {
        oprot.writeString(struct.speName);
      }
      if (struct.isSetJobTitle()) {
        oprot.writeString(struct.jobTitle);
      }
      if (struct.isSetSpeProfile()) {
        oprot.writeString(struct.speProfile);
      }
      if (struct.isSetHonors()) {
        oprot.writeString(struct.honors);
      }
      if (struct.isSetHeadUrl()) {
        oprot.writeString(struct.headUrl);
      }
      if (struct.isSetSpeLikeCount()) {
        oprot.writeI32(struct.speLikeCount);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetCreateUserId()) {
        oprot.writeI32(struct.createUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecialistInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.speId = iprot.readI32();
        struct.setSpeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.speName = iprot.readString();
        struct.setSpeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jobTitle = iprot.readString();
        struct.setJobTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.speProfile = iprot.readString();
        struct.setSpeProfileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.honors = iprot.readString();
        struct.setHonorsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.headUrl = iprot.readString();
        struct.setHeadUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.speLikeCount = iprot.readI32();
        struct.setSpeLikeCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createUserId = iprot.readI32();
        struct.setCreateUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

