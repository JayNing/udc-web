/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-07")
public class TagInfo implements org.apache.thrift.TBase<TagInfo, TagInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TagInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagInfo");

  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TAG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TAG_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagCounts", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TagInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TagInfoTupleSchemeFactory();

  public int tagId; // required
  public String tagName; // required
  public long createTime; // required
  public int tagType; // required
  public int tagCounts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_ID((short)1, "tagId"),
    TAG_NAME((short)2, "tagName"),
    CREATE_TIME((short)3, "createTime"),
    TAG_TYPE((short)4, "tagType"),
    TAG_COUNTS((short)5, "tagCounts");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_ID
          return TAG_ID;
        case 2: // TAG_NAME
          return TAG_NAME;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // TAG_TYPE
          return TAG_TYPE;
        case 5: // TAG_COUNTS
          return TAG_COUNTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TAGID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __TAGTYPE_ISSET_ID = 2;
  private static final int __TAGCOUNTS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tagType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("tagCounts", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagInfo.class, metaDataMap);
  }

  public TagInfo() {
  }

  public TagInfo(
    int tagId,
    String tagName,
    long createTime,
    int tagType,
    int tagCounts)
  {
    this();
    this.tagId = tagId;
    setTagIdIsSet(true);
    this.tagName = tagName;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.tagType = tagType;
    setTagTypeIsSet(true);
    this.tagCounts = tagCounts;
    setTagCountsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TagInfo(TagInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tagId = other.tagId;
    if (other.isSetTagName()) {
      this.tagName = other.tagName;
    }
    this.createTime = other.createTime;
    this.tagType = other.tagType;
    this.tagCounts = other.tagCounts;
  }

  public TagInfo deepCopy() {
    return new TagInfo(this);
  }

  @Override
  public void clear() {
    setTagIdIsSet(false);
    this.tagId = 0;
    this.tagName = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setTagTypeIsSet(false);
    this.tagType = 0;
    setTagCountsIsSet(false);
    this.tagCounts = 0;
  }

  public int getTagId() {
    return this.tagId;
  }

  public TagInfo setTagId(int tagId) {
    this.tagId = tagId;
    setTagIdIsSet(true);
    return this;
  }

  public void unsetTagId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
  }

  public void setTagIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
  }

  public String getTagName() {
    return this.tagName;
  }

  public TagInfo setTagName(String tagName) {
    this.tagName = tagName;
    return this;
  }

  public void unsetTagName() {
    this.tagName = null;
  }

  /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
  public boolean isSetTagName() {
    return this.tagName != null;
  }

  public void setTagNameIsSet(boolean value) {
    if (!value) {
      this.tagName = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TagInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getTagType() {
    return this.tagType;
  }

  public TagInfo setTagType(int tagType) {
    this.tagType = tagType;
    setTagTypeIsSet(true);
    return this;
  }

  public void unsetTagType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAGTYPE_ISSET_ID);
  }

  /** Returns true if field tagType is set (has been assigned a value) and false otherwise */
  public boolean isSetTagType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAGTYPE_ISSET_ID);
  }

  public void setTagTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAGTYPE_ISSET_ID, value);
  }

  public int getTagCounts() {
    return this.tagCounts;
  }

  public TagInfo setTagCounts(int tagCounts) {
    this.tagCounts = tagCounts;
    setTagCountsIsSet(true);
    return this;
  }

  public void unsetTagCounts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAGCOUNTS_ISSET_ID);
  }

  /** Returns true if field tagCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetTagCounts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAGCOUNTS_ISSET_ID);
  }

  public void setTagCountsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAGCOUNTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((Integer)value);
      }
      break;

    case TAG_NAME:
      if (value == null) {
        unsetTagName();
      } else {
        setTagName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case TAG_TYPE:
      if (value == null) {
        unsetTagType();
      } else {
        setTagType((Integer)value);
      }
      break;

    case TAG_COUNTS:
      if (value == null) {
        unsetTagCounts();
      } else {
        setTagCounts((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_ID:
      return getTagId();

    case TAG_NAME:
      return getTagName();

    case CREATE_TIME:
      return getCreateTime();

    case TAG_TYPE:
      return getTagType();

    case TAG_COUNTS:
      return getTagCounts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_ID:
      return isSetTagId();
    case TAG_NAME:
      return isSetTagName();
    case CREATE_TIME:
      return isSetCreateTime();
    case TAG_TYPE:
      return isSetTagType();
    case TAG_COUNTS:
      return isSetTagCounts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TagInfo)
      return this.equals((TagInfo)that);
    return false;
  }

  public boolean equals(TagInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tagId = true;
    boolean that_present_tagId = true;
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (this.tagId != that.tagId)
        return false;
    }

    boolean this_present_tagName = true && this.isSetTagName();
    boolean that_present_tagName = true && that.isSetTagName();
    if (this_present_tagName || that_present_tagName) {
      if (!(this_present_tagName && that_present_tagName))
        return false;
      if (!this.tagName.equals(that.tagName))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_tagType = true;
    boolean that_present_tagType = true;
    if (this_present_tagType || that_present_tagType) {
      if (!(this_present_tagType && that_present_tagType))
        return false;
      if (this.tagType != that.tagType)
        return false;
    }

    boolean this_present_tagCounts = true;
    boolean that_present_tagCounts = true;
    if (this_present_tagCounts || that_present_tagCounts) {
      if (!(this_present_tagCounts && that_present_tagCounts))
        return false;
      if (this.tagCounts != that.tagCounts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tagId;

    hashCode = hashCode * 8191 + ((isSetTagName()) ? 131071 : 524287);
    if (isSetTagName())
      hashCode = hashCode * 8191 + tagName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + tagType;

    hashCode = hashCode * 8191 + tagCounts;

    return hashCode;
  }

  @Override
  public int compareTo(TagInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(other.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, other.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagName()).compareTo(other.isSetTagName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, other.tagName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagType()).compareTo(other.isSetTagType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagType, other.tagType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagCounts()).compareTo(other.isSetTagCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagCounts, other.tagCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TagInfo(");
    boolean first = true;

    sb.append("tagId:");
    sb.append(this.tagId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagName:");
    if (this.tagName == null) {
      sb.append("null");
    } else {
      sb.append(this.tagName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagType:");
    sb.append(this.tagType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagCounts:");
    sb.append(this.tagCounts);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TagInfoStandardScheme getScheme() {
      return new TagInfoStandardScheme();
    }
  }

  private static class TagInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TagInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagId = iprot.readI32();
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagName = iprot.readString();
              struct.setTagNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagType = iprot.readI32();
              struct.setTagTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAG_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagCounts = iprot.readI32();
              struct.setTagCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TagInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
      oprot.writeI32(struct.tagId);
      oprot.writeFieldEnd();
      if (struct.tagName != null) {
        oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
        oprot.writeString(struct.tagName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_TYPE_FIELD_DESC);
      oprot.writeI32(struct.tagType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAG_COUNTS_FIELD_DESC);
      oprot.writeI32(struct.tagCounts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TagInfoTupleScheme getScheme() {
      return new TagInfoTupleScheme();
    }
  }

  private static class TagInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TagInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTagId()) {
        optionals.set(0);
      }
      if (struct.isSetTagName()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetTagType()) {
        optionals.set(3);
      }
      if (struct.isSetTagCounts()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTagId()) {
        oprot.writeI32(struct.tagId);
      }
      if (struct.isSetTagName()) {
        oprot.writeString(struct.tagName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetTagType()) {
        oprot.writeI32(struct.tagType);
      }
      if (struct.isSetTagCounts()) {
        oprot.writeI32(struct.tagCounts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.tagId = iprot.readI32();
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tagName = iprot.readString();
        struct.setTagNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tagType = iprot.readI32();
        struct.setTagTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tagCounts = iprot.readI32();
        struct.setTagCountsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

