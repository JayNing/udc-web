/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-18")
public class UserInfoResp implements org.apache.thrift.TBase<UserInfoResp, UserInfoResp._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfoResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfoResp");

  private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IS_EXIST_FIELD_DESC = new org.apache.thrift.protocol.TField("isExist", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TEMP_TOKEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tempTokenId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageInfo", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserInfoRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserInfoRespTupleSchemeFactory();

  public ResponseInfo response; // required
  public java.util.List<UserInfo> userInfo; // optional
  public boolean isExist; // optional
  public java.lang.String tempTokenId; // optional
  public PageInfo pageInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPONSE((short)1, "response"),
    USER_INFO((short)2, "userInfo"),
    IS_EXIST((short)3, "isExist"),
    TEMP_TOKEN_ID((short)4, "tempTokenId"),
    PAGE_INFO((short)5, "pageInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE
          return RESPONSE;
        case 2: // USER_INFO
          return USER_INFO;
        case 3: // IS_EXIST
          return IS_EXIST;
        case 4: // TEMP_TOKEN_ID
          return TEMP_TOKEN_ID;
        case 5: // PAGE_INFO
          return PAGE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISEXIST_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_INFO,_Fields.IS_EXIST,_Fields.TEMP_TOKEN_ID,_Fields.PAGE_INFO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseInfo.class)));
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class))));
    tmpMap.put(_Fields.IS_EXIST, new org.apache.thrift.meta_data.FieldMetaData("isExist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEMP_TOKEN_ID, new org.apache.thrift.meta_data.FieldMetaData("tempTokenId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_INFO, new org.apache.thrift.meta_data.FieldMetaData("pageInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageInfo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfoResp.class, metaDataMap);
  }

  public UserInfoResp() {
    this.isExist = false;

  }

  public UserInfoResp(
    ResponseInfo response)
  {
    this();
    this.response = response;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfoResp(UserInfoResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResponse()) {
      this.response = new ResponseInfo(other.response);
    }
    if (other.isSetUserInfo()) {
      java.util.List<UserInfo> __this__userInfo = new java.util.ArrayList<UserInfo>(other.userInfo.size());
      for (UserInfo other_element : other.userInfo) {
        __this__userInfo.add(new UserInfo(other_element));
      }
      this.userInfo = __this__userInfo;
    }
    this.isExist = other.isExist;
    if (other.isSetTempTokenId()) {
      this.tempTokenId = other.tempTokenId;
    }
    if (other.isSetPageInfo()) {
      this.pageInfo = new PageInfo(other.pageInfo);
    }
  }

  public UserInfoResp deepCopy() {
    return new UserInfoResp(this);
  }

  @Override
  public void clear() {
    this.response = null;
    this.userInfo = null;
    this.isExist = false;

    this.tempTokenId = null;
    this.pageInfo = null;
  }

  public ResponseInfo getResponse() {
    return this.response;
  }

  public UserInfoResp setResponse(ResponseInfo response) {
    this.response = response;
    return this;
  }

  public void unsetResponse() {
    this.response = null;
  }

  /** Returns true if field response is set (has been assigned a value) and false otherwise */
  public boolean isSetResponse() {
    return this.response != null;
  }

  public void setResponseIsSet(boolean value) {
    if (!value) {
      this.response = null;
    }
  }

  public int getUserInfoSize() {
    return (this.userInfo == null) ? 0 : this.userInfo.size();
  }

  public java.util.Iterator<UserInfo> getUserInfoIterator() {
    return (this.userInfo == null) ? null : this.userInfo.iterator();
  }

  public void addToUserInfo(UserInfo elem) {
    if (this.userInfo == null) {
      this.userInfo = new java.util.ArrayList<UserInfo>();
    }
    this.userInfo.add(elem);
  }

  public java.util.List<UserInfo> getUserInfo() {
    return this.userInfo;
  }

  public UserInfoResp setUserInfo(java.util.List<UserInfo> userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public boolean isIsExist() {
    return this.isExist;
  }

  public UserInfoResp setIsExist(boolean isExist) {
    this.isExist = isExist;
    setIsExistIsSet(true);
    return this;
  }

  public void unsetIsExist() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEXIST_ISSET_ID);
  }

  /** Returns true if field isExist is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExist() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEXIST_ISSET_ID);
  }

  public void setIsExistIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEXIST_ISSET_ID, value);
  }

  public java.lang.String getTempTokenId() {
    return this.tempTokenId;
  }

  public UserInfoResp setTempTokenId(java.lang.String tempTokenId) {
    this.tempTokenId = tempTokenId;
    return this;
  }

  public void unsetTempTokenId() {
    this.tempTokenId = null;
  }

  /** Returns true if field tempTokenId is set (has been assigned a value) and false otherwise */
  public boolean isSetTempTokenId() {
    return this.tempTokenId != null;
  }

  public void setTempTokenIdIsSet(boolean value) {
    if (!value) {
      this.tempTokenId = null;
    }
  }

  public PageInfo getPageInfo() {
    return this.pageInfo;
  }

  public UserInfoResp setPageInfo(PageInfo pageInfo) {
    this.pageInfo = pageInfo;
    return this;
  }

  public void unsetPageInfo() {
    this.pageInfo = null;
  }

  /** Returns true if field pageInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageInfo() {
    return this.pageInfo != null;
  }

  public void setPageInfoIsSet(boolean value) {
    if (!value) {
      this.pageInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RESPONSE:
      if (value == null) {
        unsetResponse();
      } else {
        setResponse((ResponseInfo)value);
      }
      break;

    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((java.util.List<UserInfo>)value);
      }
      break;

    case IS_EXIST:
      if (value == null) {
        unsetIsExist();
      } else {
        setIsExist((java.lang.Boolean)value);
      }
      break;

    case TEMP_TOKEN_ID:
      if (value == null) {
        unsetTempTokenId();
      } else {
        setTempTokenId((java.lang.String)value);
      }
      break;

    case PAGE_INFO:
      if (value == null) {
        unsetPageInfo();
      } else {
        setPageInfo((PageInfo)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE:
      return getResponse();

    case USER_INFO:
      return getUserInfo();

    case IS_EXIST:
      return isIsExist();

    case TEMP_TOKEN_ID:
      return getTempTokenId();

    case PAGE_INFO:
      return getPageInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE:
      return isSetResponse();
    case USER_INFO:
      return isSetUserInfo();
    case IS_EXIST:
      return isSetIsExist();
    case TEMP_TOKEN_ID:
      return isSetTempTokenId();
    case PAGE_INFO:
      return isSetPageInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfoResp)
      return this.equals((UserInfoResp)that);
    return false;
  }

  public boolean equals(UserInfoResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_response = true && this.isSetResponse();
    boolean that_present_response = true && that.isSetResponse();
    if (this_present_response || that_present_response) {
      if (!(this_present_response && that_present_response))
        return false;
      if (!this.response.equals(that.response))
        return false;
    }

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    boolean this_present_isExist = true && this.isSetIsExist();
    boolean that_present_isExist = true && that.isSetIsExist();
    if (this_present_isExist || that_present_isExist) {
      if (!(this_present_isExist && that_present_isExist))
        return false;
      if (this.isExist != that.isExist)
        return false;
    }

    boolean this_present_tempTokenId = true && this.isSetTempTokenId();
    boolean that_present_tempTokenId = true && that.isSetTempTokenId();
    if (this_present_tempTokenId || that_present_tempTokenId) {
      if (!(this_present_tempTokenId && that_present_tempTokenId))
        return false;
      if (!this.tempTokenId.equals(that.tempTokenId))
        return false;
    }

    boolean this_present_pageInfo = true && this.isSetPageInfo();
    boolean that_present_pageInfo = true && that.isSetPageInfo();
    if (this_present_pageInfo || that_present_pageInfo) {
      if (!(this_present_pageInfo && that_present_pageInfo))
        return false;
      if (!this.pageInfo.equals(that.pageInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
    if (isSetResponse())
      hashCode = hashCode * 8191 + response.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
    if (isSetUserInfo())
      hashCode = hashCode * 8191 + userInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsExist()) ? 131071 : 524287);
    if (isSetIsExist())
      hashCode = hashCode * 8191 + ((isExist) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTempTokenId()) ? 131071 : 524287);
    if (isSetTempTokenId())
      hashCode = hashCode * 8191 + tempTokenId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPageInfo()) ? 131071 : 524287);
    if (isSetPageInfo())
      hashCode = hashCode * 8191 + pageInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserInfoResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetResponse()).compareTo(other.isSetResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsExist()).compareTo(other.isSetIsExist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExist, other.isExist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTempTokenId()).compareTo(other.isSetTempTokenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTempTokenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempTokenId, other.tempTokenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPageInfo()).compareTo(other.isSetPageInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageInfo, other.pageInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserInfoResp(");
    boolean first = true;

    sb.append("response:");
    if (this.response == null) {
      sb.append("null");
    } else {
      sb.append(this.response);
    }
    first = false;
    if (isSetUserInfo()) {
      if (!first) sb.append(", ");
      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
    }
    if (isSetIsExist()) {
      if (!first) sb.append(", ");
      sb.append("isExist:");
      sb.append(this.isExist);
      first = false;
    }
    if (isSetTempTokenId()) {
      if (!first) sb.append(", ");
      sb.append("tempTokenId:");
      if (this.tempTokenId == null) {
        sb.append("null");
      } else {
        sb.append(this.tempTokenId);
      }
      first = false;
    }
    if (isSetPageInfo()) {
      if (!first) sb.append(", ");
      sb.append("pageInfo:");
      if (this.pageInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (response == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'response' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (response != null) {
      response.validate();
    }
    if (pageInfo != null) {
      pageInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserInfoRespStandardScheme getScheme() {
      return new UserInfoRespStandardScheme();
    }
  }

  private static class UserInfoRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserInfoResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfoResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.response = new ResponseInfo();
              struct.response.read(iprot);
              struct.setResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.userInfo = new java.util.ArrayList<UserInfo>(_list34.size);
                UserInfo _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new UserInfo();
                  _elem35.read(iprot);
                  struct.userInfo.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_EXIST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isExist = iprot.readBool();
              struct.setIsExistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEMP_TOKEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tempTokenId = iprot.readString();
              struct.setTempTokenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageInfo = new PageInfo();
              struct.pageInfo.read(iprot);
              struct.setPageInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfoResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.response != null) {
        oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
        struct.response.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.userInfo != null) {
        if (struct.isSetUserInfo()) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userInfo.size()));
            for (UserInfo _iter37 : struct.userInfo)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsExist()) {
        oprot.writeFieldBegin(IS_EXIST_FIELD_DESC);
        oprot.writeBool(struct.isExist);
        oprot.writeFieldEnd();
      }
      if (struct.tempTokenId != null) {
        if (struct.isSetTempTokenId()) {
          oprot.writeFieldBegin(TEMP_TOKEN_ID_FIELD_DESC);
          oprot.writeString(struct.tempTokenId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageInfo != null) {
        if (struct.isSetPageInfo()) {
          oprot.writeFieldBegin(PAGE_INFO_FIELD_DESC);
          struct.pageInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserInfoRespTupleScheme getScheme() {
      return new UserInfoRespTupleScheme();
    }
  }

  private static class UserInfoRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserInfoResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfoResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.response.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserInfo()) {
        optionals.set(0);
      }
      if (struct.isSetIsExist()) {
        optionals.set(1);
      }
      if (struct.isSetTempTokenId()) {
        optionals.set(2);
      }
      if (struct.isSetPageInfo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserInfo()) {
        {
          oprot.writeI32(struct.userInfo.size());
          for (UserInfo _iter38 : struct.userInfo)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetIsExist()) {
        oprot.writeBool(struct.isExist);
      }
      if (struct.isSetTempTokenId()) {
        oprot.writeString(struct.tempTokenId);
      }
      if (struct.isSetPageInfo()) {
        struct.pageInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfoResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.response = new ResponseInfo();
      struct.response.read(iprot);
      struct.setResponseIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userInfo = new java.util.ArrayList<UserInfo>(_list39.size);
          UserInfo _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = new UserInfo();
            _elem40.read(iprot);
            struct.userInfo.add(_elem40);
          }
        }
        struct.setUserInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isExist = iprot.readBool();
        struct.setIsExistIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tempTokenId = iprot.readString();
        struct.setTempTokenIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageInfo = new PageInfo();
        struct.pageInfo.read(iprot);
        struct.setPageInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

