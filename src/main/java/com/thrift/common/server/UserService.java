/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-18")
public class UserService {

  /**
   * 用户中心服务, 不可直接接该服务
   * udc
   * 
   */
  public interface Iface {

    /**
     * 探测方法, 必须有
     * 
     */
    public com.thrift.common.body.ResponseInfo ping() throws org.apache.thrift.TException;

    /**
     * 用户登录
     * 
     * 
     * @param serverHead
     * @param loginName
     * @param passwd
     * @param platformType
     * @param appType
     */
    public com.thrift.common.body.UserLoginResp login(com.thrift.common.head.UDCHead serverHead, java.lang.String loginName, java.lang.String passwd, com.thrift.common.define.PlatformType platformType, com.thrift.common.define.AppType appType) throws org.apache.thrift.TException;

    /**
     * 登出
     * 
     * 
     * @param head
     */
    public com.thrift.common.body.ResponseInfo logout(com.thrift.common.head.UDCHead head) throws org.apache.thrift.TException;

    /**
     * 用户自动登录
     * 
     * 
     * @param serverHead
     * @param tokenId
     */
    public com.thrift.common.body.UserLoginResp autoLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException;

    /**
     * 根据 tokenId 获取登录时用户信息
     * 
     * 
     * @param serverHead
     * @param tokenId
     */
    public com.thrift.common.body.UserLoginResp getUserInfoByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException;

    /**
     * 通过用户ID 获取用户信息
     * 
     * 
     * @param serverHead
     * @param userId
     */
    public com.thrift.common.body.UserInfoResp getUserInfoById(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.Integer> userId) throws org.apache.thrift.TException;

    /**
     * 通过手机号查询用户信息
     * 
     * 
     * @param serverHead
     * @param phoneList
     */
    public com.thrift.common.body.UserInfoResp getUserInfoByPhone(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> phoneList) throws org.apache.thrift.TException;

    /**
     * 通过邮箱查询用户信息
     * 
     * 
     * @param serverHead
     * @param emailList
     */
    public com.thrift.common.body.UserInfoResp getUserInfoByEmail(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> emailList) throws org.apache.thrift.TException;

    /**
     * 通过登录名查询用户信息
     * 
     * 
     * @param serverHead
     * @param loginNameList
     */
    public com.thrift.common.body.UserInfoResp getUserInfoByLoginName(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> loginNameList) throws org.apache.thrift.TException;

    /**
     * 用户状态校验
     * 
     * 
     * @param serverHead
     * @param tokenId
     */
    public com.thrift.common.body.UserLoginResp verifyLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException;

    /**
     * 添加用户
     * 
     * 
     * @param serverHead
     * @param userInfo
     */
    public com.thrift.common.body.UserInfoResp addUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException;

    /**
     * 修改用户信息(修改不为空的字段)
     * 
     * 
     * @param serverHead
     * @param userId
     * @param userInfo
     */
    public com.thrift.common.body.UserInfoResp updateUserInfo(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException;

    /**
     * 忘记密码, 通过手机号修改密码
     * 
     * 
     * @param serverHead
     * @param phone
     * @param password
     */
    public com.thrift.common.body.UserInfoResp updatePasswordByPhone(com.thrift.common.head.UDCHead serverHead, java.lang.String phone, java.lang.String password) throws org.apache.thrift.TException;

    /**
     * 修改密码
     * 
     * 
     * @param serverHead
     * @param userInfo
     * @param newPassword
     */
    public com.thrift.common.body.UserInfoResp updatePasswordByPassword(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, java.lang.String newPassword) throws org.apache.thrift.TException;

    /**
     * 删除系统用户
     * 
     * 
     * @param serverHead
     * @param userId
     * @param systemType
     */
    public com.thrift.common.body.UserInfoResp deleteSystemUser(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType) throws org.apache.thrift.TException;

    /**
     * 已有用户关联到系统
     * 
     * 
     * @param serverHead
     * @param userId
     * @param systemType
     */
    public com.thrift.common.body.UserInfoResp userRelationToSystem(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType) throws org.apache.thrift.TException;

    public com.thrift.common.body.UserInvalidTokenIdResp checkInvalidTokenIdList(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> tokenIdList) throws org.apache.thrift.TException;

    public com.thrift.common.body.UserLoginResp getTemporaryTokenId(com.thrift.common.head.UDCHead serverHead) throws org.apache.thrift.TException;

    public com.thrift.common.body.ResponseInfo destroyTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException;

    public com.thrift.common.body.UserInfoResp checkUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException;

    /**
     * 分页获取用户信息
     * 
     * 
     * @param serverHead
     * @param appType
     * @param userType
     * @param pageInfo
     */
    public com.thrift.common.body.UserInfoResp getUserInfoListByPage(com.thrift.common.head.UDCHead serverHead, com.thrift.common.define.AppType appType, com.thrift.common.define.UserType userType, com.thrift.common.body.PageInfo pageInfo) throws org.apache.thrift.TException;

    /**
     * 根据应用, 平台 类型 获取最后一次登陆信息
     * 
     * 
     * @param appType
     * @param platformType
     * @param pageInfo
     */
    public com.thrift.common.body.UserInfoResp getRecentlyLoginUserList(com.thrift.common.define.AppType appType, com.thrift.common.define.PlatformType platformType, com.thrift.common.body.PageInfo pageInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException;

    public void login(com.thrift.common.head.UDCHead serverHead, java.lang.String loginName, java.lang.String passwd, com.thrift.common.define.PlatformType platformType, com.thrift.common.define.AppType appType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException;

    public void logout(com.thrift.common.head.UDCHead head, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException;

    public void autoLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfoByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfoById(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.Integer> userId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfoByPhone(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> phoneList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfoByEmail(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> emailList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfoByLoginName(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> loginNameList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void verifyLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException;

    public void addUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void updateUserInfo(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void updatePasswordByPhone(com.thrift.common.head.UDCHead serverHead, java.lang.String phone, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void updatePasswordByPassword(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, java.lang.String newPassword, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void deleteSystemUser(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void userRelationToSystem(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void checkInvalidTokenIdList(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> tokenIdList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInvalidTokenIdResp> resultHandler) throws org.apache.thrift.TException;

    public void getTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException;

    public void destroyTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException;

    public void checkUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfoListByPage(com.thrift.common.head.UDCHead serverHead, com.thrift.common.define.AppType appType, com.thrift.common.define.UserType userType, com.thrift.common.body.PageInfo pageInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

    public void getRecentlyLoginUserList(com.thrift.common.define.AppType appType, com.thrift.common.define.PlatformType platformType, com.thrift.common.body.PageInfo pageInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.thrift.common.body.ResponseInfo ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public com.thrift.common.body.ResponseInfo recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public com.thrift.common.body.UserLoginResp login(com.thrift.common.head.UDCHead serverHead, java.lang.String loginName, java.lang.String passwd, com.thrift.common.define.PlatformType platformType, com.thrift.common.define.AppType appType) throws org.apache.thrift.TException
    {
      send_login(serverHead, loginName, passwd, platformType, appType);
      return recv_login();
    }

    public void send_login(com.thrift.common.head.UDCHead serverHead, java.lang.String loginName, java.lang.String passwd, com.thrift.common.define.PlatformType platformType, com.thrift.common.define.AppType appType) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setServerHead(serverHead);
      args.setLoginName(loginName);
      args.setPasswd(passwd);
      args.setPlatformType(platformType);
      args.setAppType(appType);
      sendBase("login", args);
    }

    public com.thrift.common.body.UserLoginResp recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public com.thrift.common.body.ResponseInfo logout(com.thrift.common.head.UDCHead head) throws org.apache.thrift.TException
    {
      send_logout(head);
      return recv_logout();
    }

    public void send_logout(com.thrift.common.head.UDCHead head) throws org.apache.thrift.TException
    {
      logout_args args = new logout_args();
      args.setHead(head);
      sendBase("logout", args);
    }

    public com.thrift.common.body.ResponseInfo recv_logout() throws org.apache.thrift.TException
    {
      logout_result result = new logout_result();
      receiveBase(result, "logout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "logout failed: unknown result");
    }

    public com.thrift.common.body.UserLoginResp autoLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      send_autoLoginByTokenId(serverHead, tokenId);
      return recv_autoLoginByTokenId();
    }

    public void send_autoLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      autoLoginByTokenId_args args = new autoLoginByTokenId_args();
      args.setServerHead(serverHead);
      args.setTokenId(tokenId);
      sendBase("autoLoginByTokenId", args);
    }

    public com.thrift.common.body.UserLoginResp recv_autoLoginByTokenId() throws org.apache.thrift.TException
    {
      autoLoginByTokenId_result result = new autoLoginByTokenId_result();
      receiveBase(result, "autoLoginByTokenId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "autoLoginByTokenId failed: unknown result");
    }

    public com.thrift.common.body.UserLoginResp getUserInfoByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      send_getUserInfoByTokenId(serverHead, tokenId);
      return recv_getUserInfoByTokenId();
    }

    public void send_getUserInfoByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      getUserInfoByTokenId_args args = new getUserInfoByTokenId_args();
      args.setServerHead(serverHead);
      args.setTokenId(tokenId);
      sendBase("getUserInfoByTokenId", args);
    }

    public com.thrift.common.body.UserLoginResp recv_getUserInfoByTokenId() throws org.apache.thrift.TException
    {
      getUserInfoByTokenId_result result = new getUserInfoByTokenId_result();
      receiveBase(result, "getUserInfoByTokenId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoByTokenId failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp getUserInfoById(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.Integer> userId) throws org.apache.thrift.TException
    {
      send_getUserInfoById(serverHead, userId);
      return recv_getUserInfoById();
    }

    public void send_getUserInfoById(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.Integer> userId) throws org.apache.thrift.TException
    {
      getUserInfoById_args args = new getUserInfoById_args();
      args.setServerHead(serverHead);
      args.setUserId(userId);
      sendBase("getUserInfoById", args);
    }

    public com.thrift.common.body.UserInfoResp recv_getUserInfoById() throws org.apache.thrift.TException
    {
      getUserInfoById_result result = new getUserInfoById_result();
      receiveBase(result, "getUserInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoById failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp getUserInfoByPhone(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> phoneList) throws org.apache.thrift.TException
    {
      send_getUserInfoByPhone(serverHead, phoneList);
      return recv_getUserInfoByPhone();
    }

    public void send_getUserInfoByPhone(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> phoneList) throws org.apache.thrift.TException
    {
      getUserInfoByPhone_args args = new getUserInfoByPhone_args();
      args.setServerHead(serverHead);
      args.setPhoneList(phoneList);
      sendBase("getUserInfoByPhone", args);
    }

    public com.thrift.common.body.UserInfoResp recv_getUserInfoByPhone() throws org.apache.thrift.TException
    {
      getUserInfoByPhone_result result = new getUserInfoByPhone_result();
      receiveBase(result, "getUserInfoByPhone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoByPhone failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp getUserInfoByEmail(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> emailList) throws org.apache.thrift.TException
    {
      send_getUserInfoByEmail(serverHead, emailList);
      return recv_getUserInfoByEmail();
    }

    public void send_getUserInfoByEmail(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> emailList) throws org.apache.thrift.TException
    {
      getUserInfoByEmail_args args = new getUserInfoByEmail_args();
      args.setServerHead(serverHead);
      args.setEmailList(emailList);
      sendBase("getUserInfoByEmail", args);
    }

    public com.thrift.common.body.UserInfoResp recv_getUserInfoByEmail() throws org.apache.thrift.TException
    {
      getUserInfoByEmail_result result = new getUserInfoByEmail_result();
      receiveBase(result, "getUserInfoByEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoByEmail failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp getUserInfoByLoginName(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> loginNameList) throws org.apache.thrift.TException
    {
      send_getUserInfoByLoginName(serverHead, loginNameList);
      return recv_getUserInfoByLoginName();
    }

    public void send_getUserInfoByLoginName(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> loginNameList) throws org.apache.thrift.TException
    {
      getUserInfoByLoginName_args args = new getUserInfoByLoginName_args();
      args.setServerHead(serverHead);
      args.setLoginNameList(loginNameList);
      sendBase("getUserInfoByLoginName", args);
    }

    public com.thrift.common.body.UserInfoResp recv_getUserInfoByLoginName() throws org.apache.thrift.TException
    {
      getUserInfoByLoginName_result result = new getUserInfoByLoginName_result();
      receiveBase(result, "getUserInfoByLoginName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoByLoginName failed: unknown result");
    }

    public com.thrift.common.body.UserLoginResp verifyLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      send_verifyLoginByTokenId(serverHead, tokenId);
      return recv_verifyLoginByTokenId();
    }

    public void send_verifyLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      verifyLoginByTokenId_args args = new verifyLoginByTokenId_args();
      args.setServerHead(serverHead);
      args.setTokenId(tokenId);
      sendBase("verifyLoginByTokenId", args);
    }

    public com.thrift.common.body.UserLoginResp recv_verifyLoginByTokenId() throws org.apache.thrift.TException
    {
      verifyLoginByTokenId_result result = new verifyLoginByTokenId_result();
      receiveBase(result, "verifyLoginByTokenId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyLoginByTokenId failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp addUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException
    {
      send_addUserInfo(serverHead, userInfo);
      return recv_addUserInfo();
    }

    public void send_addUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException
    {
      addUserInfo_args args = new addUserInfo_args();
      args.setServerHead(serverHead);
      args.setUserInfo(userInfo);
      sendBase("addUserInfo", args);
    }

    public com.thrift.common.body.UserInfoResp recv_addUserInfo() throws org.apache.thrift.TException
    {
      addUserInfo_result result = new addUserInfo_result();
      receiveBase(result, "addUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addUserInfo failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp updateUserInfo(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException
    {
      send_updateUserInfo(serverHead, userId, userInfo);
      return recv_updateUserInfo();
    }

    public void send_updateUserInfo(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException
    {
      updateUserInfo_args args = new updateUserInfo_args();
      args.setServerHead(serverHead);
      args.setUserId(userId);
      args.setUserInfo(userInfo);
      sendBase("updateUserInfo", args);
    }

    public com.thrift.common.body.UserInfoResp recv_updateUserInfo() throws org.apache.thrift.TException
    {
      updateUserInfo_result result = new updateUserInfo_result();
      receiveBase(result, "updateUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserInfo failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp updatePasswordByPhone(com.thrift.common.head.UDCHead serverHead, java.lang.String phone, java.lang.String password) throws org.apache.thrift.TException
    {
      send_updatePasswordByPhone(serverHead, phone, password);
      return recv_updatePasswordByPhone();
    }

    public void send_updatePasswordByPhone(com.thrift.common.head.UDCHead serverHead, java.lang.String phone, java.lang.String password) throws org.apache.thrift.TException
    {
      updatePasswordByPhone_args args = new updatePasswordByPhone_args();
      args.setServerHead(serverHead);
      args.setPhone(phone);
      args.setPassword(password);
      sendBase("updatePasswordByPhone", args);
    }

    public com.thrift.common.body.UserInfoResp recv_updatePasswordByPhone() throws org.apache.thrift.TException
    {
      updatePasswordByPhone_result result = new updatePasswordByPhone_result();
      receiveBase(result, "updatePasswordByPhone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePasswordByPhone failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp updatePasswordByPassword(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, java.lang.String newPassword) throws org.apache.thrift.TException
    {
      send_updatePasswordByPassword(serverHead, userInfo, newPassword);
      return recv_updatePasswordByPassword();
    }

    public void send_updatePasswordByPassword(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, java.lang.String newPassword) throws org.apache.thrift.TException
    {
      updatePasswordByPassword_args args = new updatePasswordByPassword_args();
      args.setServerHead(serverHead);
      args.setUserInfo(userInfo);
      args.setNewPassword(newPassword);
      sendBase("updatePasswordByPassword", args);
    }

    public com.thrift.common.body.UserInfoResp recv_updatePasswordByPassword() throws org.apache.thrift.TException
    {
      updatePasswordByPassword_result result = new updatePasswordByPassword_result();
      receiveBase(result, "updatePasswordByPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePasswordByPassword failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp deleteSystemUser(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType) throws org.apache.thrift.TException
    {
      send_deleteSystemUser(serverHead, userId, systemType);
      return recv_deleteSystemUser();
    }

    public void send_deleteSystemUser(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType) throws org.apache.thrift.TException
    {
      deleteSystemUser_args args = new deleteSystemUser_args();
      args.setServerHead(serverHead);
      args.setUserId(userId);
      args.setSystemType(systemType);
      sendBase("deleteSystemUser", args);
    }

    public com.thrift.common.body.UserInfoResp recv_deleteSystemUser() throws org.apache.thrift.TException
    {
      deleteSystemUser_result result = new deleteSystemUser_result();
      receiveBase(result, "deleteSystemUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSystemUser failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp userRelationToSystem(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType) throws org.apache.thrift.TException
    {
      send_userRelationToSystem(serverHead, userId, systemType);
      return recv_userRelationToSystem();
    }

    public void send_userRelationToSystem(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType) throws org.apache.thrift.TException
    {
      userRelationToSystem_args args = new userRelationToSystem_args();
      args.setServerHead(serverHead);
      args.setUserId(userId);
      args.setSystemType(systemType);
      sendBase("userRelationToSystem", args);
    }

    public com.thrift.common.body.UserInfoResp recv_userRelationToSystem() throws org.apache.thrift.TException
    {
      userRelationToSystem_result result = new userRelationToSystem_result();
      receiveBase(result, "userRelationToSystem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userRelationToSystem failed: unknown result");
    }

    public com.thrift.common.body.UserInvalidTokenIdResp checkInvalidTokenIdList(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> tokenIdList) throws org.apache.thrift.TException
    {
      send_checkInvalidTokenIdList(serverHead, tokenIdList);
      return recv_checkInvalidTokenIdList();
    }

    public void send_checkInvalidTokenIdList(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> tokenIdList) throws org.apache.thrift.TException
    {
      checkInvalidTokenIdList_args args = new checkInvalidTokenIdList_args();
      args.setServerHead(serverHead);
      args.setTokenIdList(tokenIdList);
      sendBase("checkInvalidTokenIdList", args);
    }

    public com.thrift.common.body.UserInvalidTokenIdResp recv_checkInvalidTokenIdList() throws org.apache.thrift.TException
    {
      checkInvalidTokenIdList_result result = new checkInvalidTokenIdList_result();
      receiveBase(result, "checkInvalidTokenIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkInvalidTokenIdList failed: unknown result");
    }

    public com.thrift.common.body.UserLoginResp getTemporaryTokenId(com.thrift.common.head.UDCHead serverHead) throws org.apache.thrift.TException
    {
      send_getTemporaryTokenId(serverHead);
      return recv_getTemporaryTokenId();
    }

    public void send_getTemporaryTokenId(com.thrift.common.head.UDCHead serverHead) throws org.apache.thrift.TException
    {
      getTemporaryTokenId_args args = new getTemporaryTokenId_args();
      args.setServerHead(serverHead);
      sendBase("getTemporaryTokenId", args);
    }

    public com.thrift.common.body.UserLoginResp recv_getTemporaryTokenId() throws org.apache.thrift.TException
    {
      getTemporaryTokenId_result result = new getTemporaryTokenId_result();
      receiveBase(result, "getTemporaryTokenId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTemporaryTokenId failed: unknown result");
    }

    public com.thrift.common.body.ResponseInfo destroyTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      send_destroyTemporaryTokenId(serverHead, tokenId);
      return recv_destroyTemporaryTokenId();
    }

    public void send_destroyTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId) throws org.apache.thrift.TException
    {
      destroyTemporaryTokenId_args args = new destroyTemporaryTokenId_args();
      args.setServerHead(serverHead);
      args.setTokenId(tokenId);
      sendBase("destroyTemporaryTokenId", args);
    }

    public com.thrift.common.body.ResponseInfo recv_destroyTemporaryTokenId() throws org.apache.thrift.TException
    {
      destroyTemporaryTokenId_result result = new destroyTemporaryTokenId_result();
      receiveBase(result, "destroyTemporaryTokenId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "destroyTemporaryTokenId failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp checkUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException
    {
      send_checkUserInfo(serverHead, userInfo);
      return recv_checkUserInfo();
    }

    public void send_checkUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo) throws org.apache.thrift.TException
    {
      checkUserInfo_args args = new checkUserInfo_args();
      args.setServerHead(serverHead);
      args.setUserInfo(userInfo);
      sendBase("checkUserInfo", args);
    }

    public com.thrift.common.body.UserInfoResp recv_checkUserInfo() throws org.apache.thrift.TException
    {
      checkUserInfo_result result = new checkUserInfo_result();
      receiveBase(result, "checkUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUserInfo failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp getUserInfoListByPage(com.thrift.common.head.UDCHead serverHead, com.thrift.common.define.AppType appType, com.thrift.common.define.UserType userType, com.thrift.common.body.PageInfo pageInfo) throws org.apache.thrift.TException
    {
      send_getUserInfoListByPage(serverHead, appType, userType, pageInfo);
      return recv_getUserInfoListByPage();
    }

    public void send_getUserInfoListByPage(com.thrift.common.head.UDCHead serverHead, com.thrift.common.define.AppType appType, com.thrift.common.define.UserType userType, com.thrift.common.body.PageInfo pageInfo) throws org.apache.thrift.TException
    {
      getUserInfoListByPage_args args = new getUserInfoListByPage_args();
      args.setServerHead(serverHead);
      args.setAppType(appType);
      args.setUserType(userType);
      args.setPageInfo(pageInfo);
      sendBase("getUserInfoListByPage", args);
    }

    public com.thrift.common.body.UserInfoResp recv_getUserInfoListByPage() throws org.apache.thrift.TException
    {
      getUserInfoListByPage_result result = new getUserInfoListByPage_result();
      receiveBase(result, "getUserInfoListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoListByPage failed: unknown result");
    }

    public com.thrift.common.body.UserInfoResp getRecentlyLoginUserList(com.thrift.common.define.AppType appType, com.thrift.common.define.PlatformType platformType, com.thrift.common.body.PageInfo pageInfo) throws org.apache.thrift.TException
    {
      send_getRecentlyLoginUserList(appType, platformType, pageInfo);
      return recv_getRecentlyLoginUserList();
    }

    public void send_getRecentlyLoginUserList(com.thrift.common.define.AppType appType, com.thrift.common.define.PlatformType platformType, com.thrift.common.body.PageInfo pageInfo) throws org.apache.thrift.TException
    {
      getRecentlyLoginUserList_args args = new getRecentlyLoginUserList_args();
      args.setAppType(appType);
      args.setPlatformType(platformType);
      args.setPageInfo(pageInfo);
      sendBase("getRecentlyLoginUserList", args);
    }

    public com.thrift.common.body.UserInfoResp recv_getRecentlyLoginUserList() throws org.apache.thrift.TException
    {
      getRecentlyLoginUserList_result result = new getRecentlyLoginUserList_result();
      receiveBase(result, "getRecentlyLoginUserList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecentlyLoginUserList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.ResponseInfo> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.ResponseInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void login(com.thrift.common.head.UDCHead serverHead, java.lang.String loginName, java.lang.String passwd, com.thrift.common.define.PlatformType platformType, com.thrift.common.define.AppType appType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(serverHead, loginName, passwd, platformType, appType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserLoginResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.lang.String loginName;
      private java.lang.String passwd;
      private com.thrift.common.define.PlatformType platformType;
      private com.thrift.common.define.AppType appType;
      public login_call(com.thrift.common.head.UDCHead serverHead, java.lang.String loginName, java.lang.String passwd, com.thrift.common.define.PlatformType platformType, com.thrift.common.define.AppType appType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.loginName = loginName;
        this.passwd = passwd;
        this.platformType = platformType;
        this.appType = appType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setServerHead(serverHead);
        args.setLoginName(loginName);
        args.setPasswd(passwd);
        args.setPlatformType(platformType);
        args.setAppType(appType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserLoginResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void logout(com.thrift.common.head.UDCHead head, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logout_call method_call = new logout_call(head, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.ResponseInfo> {
      private com.thrift.common.head.UDCHead head;
      public logout_call(com.thrift.common.head.UDCHead head, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.head = head;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setHead(head);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.ResponseInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_logout();
      }
    }

    public void autoLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      autoLoginByTokenId_call method_call = new autoLoginByTokenId_call(serverHead, tokenId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class autoLoginByTokenId_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserLoginResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.lang.String tokenId;
      public autoLoginByTokenId_call(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.tokenId = tokenId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("autoLoginByTokenId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        autoLoginByTokenId_args args = new autoLoginByTokenId_args();
        args.setServerHead(serverHead);
        args.setTokenId(tokenId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserLoginResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_autoLoginByTokenId();
      }
    }

    public void getUserInfoByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfoByTokenId_call method_call = new getUserInfoByTokenId_call(serverHead, tokenId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoByTokenId_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserLoginResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.lang.String tokenId;
      public getUserInfoByTokenId_call(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.tokenId = tokenId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoByTokenId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoByTokenId_args args = new getUserInfoByTokenId_args();
        args.setServerHead(serverHead);
        args.setTokenId(tokenId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserLoginResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoByTokenId();
      }
    }

    public void getUserInfoById(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.Integer> userId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfoById_call method_call = new getUserInfoById_call(serverHead, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoById_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.util.List<java.lang.Integer> userId;
      public getUserInfoById_call(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.Integer> userId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoById_args args = new getUserInfoById_args();
        args.setServerHead(serverHead);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoById();
      }
    }

    public void getUserInfoByPhone(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> phoneList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfoByPhone_call method_call = new getUserInfoByPhone_call(serverHead, phoneList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoByPhone_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.util.List<java.lang.String> phoneList;
      public getUserInfoByPhone_call(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> phoneList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.phoneList = phoneList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoByPhone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoByPhone_args args = new getUserInfoByPhone_args();
        args.setServerHead(serverHead);
        args.setPhoneList(phoneList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoByPhone();
      }
    }

    public void getUserInfoByEmail(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> emailList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfoByEmail_call method_call = new getUserInfoByEmail_call(serverHead, emailList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoByEmail_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.util.List<java.lang.String> emailList;
      public getUserInfoByEmail_call(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> emailList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.emailList = emailList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoByEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoByEmail_args args = new getUserInfoByEmail_args();
        args.setServerHead(serverHead);
        args.setEmailList(emailList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoByEmail();
      }
    }

    public void getUserInfoByLoginName(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> loginNameList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfoByLoginName_call method_call = new getUserInfoByLoginName_call(serverHead, loginNameList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoByLoginName_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.util.List<java.lang.String> loginNameList;
      public getUserInfoByLoginName_call(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> loginNameList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.loginNameList = loginNameList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoByLoginName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoByLoginName_args args = new getUserInfoByLoginName_args();
        args.setServerHead(serverHead);
        args.setLoginNameList(loginNameList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoByLoginName();
      }
    }

    public void verifyLoginByTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyLoginByTokenId_call method_call = new verifyLoginByTokenId_call(serverHead, tokenId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyLoginByTokenId_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserLoginResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.lang.String tokenId;
      public verifyLoginByTokenId_call(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.tokenId = tokenId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyLoginByTokenId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyLoginByTokenId_args args = new verifyLoginByTokenId_args();
        args.setServerHead(serverHead);
        args.setTokenId(tokenId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserLoginResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyLoginByTokenId();
      }
    }

    public void addUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addUserInfo_call method_call = new addUserInfo_call(serverHead, userInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private com.thrift.common.body.UserInfo userInfo;
      public addUserInfo_call(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userInfo = userInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUserInfo_args args = new addUserInfo_args();
        args.setServerHead(serverHead);
        args.setUserInfo(userInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addUserInfo();
      }
    }

    public void updateUserInfo(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserInfo_call method_call = new updateUserInfo_call(serverHead, userId, userInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private int userId;
      private com.thrift.common.body.UserInfo userInfo;
      public updateUserInfo_call(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userId = userId;
        this.userInfo = userInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserInfo_args args = new updateUserInfo_args();
        args.setServerHead(serverHead);
        args.setUserId(userId);
        args.setUserInfo(userInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserInfo();
      }
    }

    public void updatePasswordByPhone(com.thrift.common.head.UDCHead serverHead, java.lang.String phone, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePasswordByPhone_call method_call = new updatePasswordByPhone_call(serverHead, phone, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePasswordByPhone_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.lang.String phone;
      private java.lang.String password;
      public updatePasswordByPhone_call(com.thrift.common.head.UDCHead serverHead, java.lang.String phone, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.phone = phone;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePasswordByPhone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePasswordByPhone_args args = new updatePasswordByPhone_args();
        args.setServerHead(serverHead);
        args.setPhone(phone);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePasswordByPhone();
      }
    }

    public void updatePasswordByPassword(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, java.lang.String newPassword, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePasswordByPassword_call method_call = new updatePasswordByPassword_call(serverHead, userInfo, newPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePasswordByPassword_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private com.thrift.common.body.UserInfo userInfo;
      private java.lang.String newPassword;
      public updatePasswordByPassword_call(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, java.lang.String newPassword, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userInfo = userInfo;
        this.newPassword = newPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePasswordByPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePasswordByPassword_args args = new updatePasswordByPassword_args();
        args.setServerHead(serverHead);
        args.setUserInfo(userInfo);
        args.setNewPassword(newPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePasswordByPassword();
      }
    }

    public void deleteSystemUser(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSystemUser_call method_call = new deleteSystemUser_call(serverHead, userId, systemType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSystemUser_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private int userId;
      private com.thrift.common.define.AppType systemType;
      public deleteSystemUser_call(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userId = userId;
        this.systemType = systemType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSystemUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSystemUser_args args = new deleteSystemUser_args();
        args.setServerHead(serverHead);
        args.setUserId(userId);
        args.setSystemType(systemType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSystemUser();
      }
    }

    public void userRelationToSystem(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userRelationToSystem_call method_call = new userRelationToSystem_call(serverHead, userId, systemType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userRelationToSystem_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private int userId;
      private com.thrift.common.define.AppType systemType;
      public userRelationToSystem_call(com.thrift.common.head.UDCHead serverHead, int userId, com.thrift.common.define.AppType systemType, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userId = userId;
        this.systemType = systemType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userRelationToSystem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userRelationToSystem_args args = new userRelationToSystem_args();
        args.setServerHead(serverHead);
        args.setUserId(userId);
        args.setSystemType(systemType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userRelationToSystem();
      }
    }

    public void checkInvalidTokenIdList(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> tokenIdList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInvalidTokenIdResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkInvalidTokenIdList_call method_call = new checkInvalidTokenIdList_call(serverHead, tokenIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkInvalidTokenIdList_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInvalidTokenIdResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.util.List<java.lang.String> tokenIdList;
      public checkInvalidTokenIdList_call(com.thrift.common.head.UDCHead serverHead, java.util.List<java.lang.String> tokenIdList, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInvalidTokenIdResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.tokenIdList = tokenIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkInvalidTokenIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkInvalidTokenIdList_args args = new checkInvalidTokenIdList_args();
        args.setServerHead(serverHead);
        args.setTokenIdList(tokenIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInvalidTokenIdResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkInvalidTokenIdList();
      }
    }

    public void getTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTemporaryTokenId_call method_call = new getTemporaryTokenId_call(serverHead, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTemporaryTokenId_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserLoginResp> {
      private com.thrift.common.head.UDCHead serverHead;
      public getTemporaryTokenId_call(com.thrift.common.head.UDCHead serverHead, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTemporaryTokenId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTemporaryTokenId_args args = new getTemporaryTokenId_args();
        args.setServerHead(serverHead);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserLoginResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTemporaryTokenId();
      }
    }

    public void destroyTemporaryTokenId(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      destroyTemporaryTokenId_call method_call = new destroyTemporaryTokenId_call(serverHead, tokenId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class destroyTemporaryTokenId_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.ResponseInfo> {
      private com.thrift.common.head.UDCHead serverHead;
      private java.lang.String tokenId;
      public destroyTemporaryTokenId_call(com.thrift.common.head.UDCHead serverHead, java.lang.String tokenId, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.tokenId = tokenId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destroyTemporaryTokenId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        destroyTemporaryTokenId_args args = new destroyTemporaryTokenId_args();
        args.setServerHead(serverHead);
        args.setTokenId(tokenId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.ResponseInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_destroyTemporaryTokenId();
      }
    }

    public void checkUserInfo(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUserInfo_call method_call = new checkUserInfo_call(serverHead, userInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private com.thrift.common.body.UserInfo userInfo;
      public checkUserInfo_call(com.thrift.common.head.UDCHead serverHead, com.thrift.common.body.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.userInfo = userInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUserInfo_args args = new checkUserInfo_args();
        args.setServerHead(serverHead);
        args.setUserInfo(userInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUserInfo();
      }
    }

    public void getUserInfoListByPage(com.thrift.common.head.UDCHead serverHead, com.thrift.common.define.AppType appType, com.thrift.common.define.UserType userType, com.thrift.common.body.PageInfo pageInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfoListByPage_call method_call = new getUserInfoListByPage_call(serverHead, appType, userType, pageInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoListByPage_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.head.UDCHead serverHead;
      private com.thrift.common.define.AppType appType;
      private com.thrift.common.define.UserType userType;
      private com.thrift.common.body.PageInfo pageInfo;
      public getUserInfoListByPage_call(com.thrift.common.head.UDCHead serverHead, com.thrift.common.define.AppType appType, com.thrift.common.define.UserType userType, com.thrift.common.body.PageInfo pageInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverHead = serverHead;
        this.appType = appType;
        this.userType = userType;
        this.pageInfo = pageInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoListByPage_args args = new getUserInfoListByPage_args();
        args.setServerHead(serverHead);
        args.setAppType(appType);
        args.setUserType(userType);
        args.setPageInfo(pageInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoListByPage();
      }
    }

    public void getRecentlyLoginUserList(com.thrift.common.define.AppType appType, com.thrift.common.define.PlatformType platformType, com.thrift.common.body.PageInfo pageInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecentlyLoginUserList_call method_call = new getRecentlyLoginUserList_call(appType, platformType, pageInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecentlyLoginUserList_call extends org.apache.thrift.async.TAsyncMethodCall<com.thrift.common.body.UserInfoResp> {
      private com.thrift.common.define.AppType appType;
      private com.thrift.common.define.PlatformType platformType;
      private com.thrift.common.body.PageInfo pageInfo;
      public getRecentlyLoginUserList_call(com.thrift.common.define.AppType appType, com.thrift.common.define.PlatformType platformType, com.thrift.common.body.PageInfo pageInfo, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appType = appType;
        this.platformType = platformType;
        this.pageInfo = pageInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecentlyLoginUserList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecentlyLoginUserList_args args = new getRecentlyLoginUserList_args();
        args.setAppType(appType);
        args.setPlatformType(platformType);
        args.setPageInfo(pageInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.thrift.common.body.UserInfoResp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecentlyLoginUserList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("autoLoginByTokenId", new autoLoginByTokenId());
      processMap.put("getUserInfoByTokenId", new getUserInfoByTokenId());
      processMap.put("getUserInfoById", new getUserInfoById());
      processMap.put("getUserInfoByPhone", new getUserInfoByPhone());
      processMap.put("getUserInfoByEmail", new getUserInfoByEmail());
      processMap.put("getUserInfoByLoginName", new getUserInfoByLoginName());
      processMap.put("verifyLoginByTokenId", new verifyLoginByTokenId());
      processMap.put("addUserInfo", new addUserInfo());
      processMap.put("updateUserInfo", new updateUserInfo());
      processMap.put("updatePasswordByPhone", new updatePasswordByPhone());
      processMap.put("updatePasswordByPassword", new updatePasswordByPassword());
      processMap.put("deleteSystemUser", new deleteSystemUser());
      processMap.put("userRelationToSystem", new userRelationToSystem());
      processMap.put("checkInvalidTokenIdList", new checkInvalidTokenIdList());
      processMap.put("getTemporaryTokenId", new getTemporaryTokenId());
      processMap.put("destroyTemporaryTokenId", new destroyTemporaryTokenId());
      processMap.put("checkUserInfo", new checkUserInfo());
      processMap.put("getUserInfoListByPage", new getUserInfoListByPage());
      processMap.put("getRecentlyLoginUserList", new getRecentlyLoginUserList());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.serverHead, args.loginName, args.passwd, args.platformType, args.appType);
        return result;
      }
    }

    public static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
        logout_result result = new logout_result();
        result.success = iface.logout(args.head);
        return result;
      }
    }

    public static class autoLoginByTokenId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, autoLoginByTokenId_args> {
      public autoLoginByTokenId() {
        super("autoLoginByTokenId");
      }

      public autoLoginByTokenId_args getEmptyArgsInstance() {
        return new autoLoginByTokenId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public autoLoginByTokenId_result getResult(I iface, autoLoginByTokenId_args args) throws org.apache.thrift.TException {
        autoLoginByTokenId_result result = new autoLoginByTokenId_result();
        result.success = iface.autoLoginByTokenId(args.serverHead, args.tokenId);
        return result;
      }
    }

    public static class getUserInfoByTokenId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoByTokenId_args> {
      public getUserInfoByTokenId() {
        super("getUserInfoByTokenId");
      }

      public getUserInfoByTokenId_args getEmptyArgsInstance() {
        return new getUserInfoByTokenId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoByTokenId_result getResult(I iface, getUserInfoByTokenId_args args) throws org.apache.thrift.TException {
        getUserInfoByTokenId_result result = new getUserInfoByTokenId_result();
        result.success = iface.getUserInfoByTokenId(args.serverHead, args.tokenId);
        return result;
      }
    }

    public static class getUserInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoById_args> {
      public getUserInfoById() {
        super("getUserInfoById");
      }

      public getUserInfoById_args getEmptyArgsInstance() {
        return new getUserInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoById_result getResult(I iface, getUserInfoById_args args) throws org.apache.thrift.TException {
        getUserInfoById_result result = new getUserInfoById_result();
        result.success = iface.getUserInfoById(args.serverHead, args.userId);
        return result;
      }
    }

    public static class getUserInfoByPhone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoByPhone_args> {
      public getUserInfoByPhone() {
        super("getUserInfoByPhone");
      }

      public getUserInfoByPhone_args getEmptyArgsInstance() {
        return new getUserInfoByPhone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoByPhone_result getResult(I iface, getUserInfoByPhone_args args) throws org.apache.thrift.TException {
        getUserInfoByPhone_result result = new getUserInfoByPhone_result();
        result.success = iface.getUserInfoByPhone(args.serverHead, args.phoneList);
        return result;
      }
    }

    public static class getUserInfoByEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoByEmail_args> {
      public getUserInfoByEmail() {
        super("getUserInfoByEmail");
      }

      public getUserInfoByEmail_args getEmptyArgsInstance() {
        return new getUserInfoByEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoByEmail_result getResult(I iface, getUserInfoByEmail_args args) throws org.apache.thrift.TException {
        getUserInfoByEmail_result result = new getUserInfoByEmail_result();
        result.success = iface.getUserInfoByEmail(args.serverHead, args.emailList);
        return result;
      }
    }

    public static class getUserInfoByLoginName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoByLoginName_args> {
      public getUserInfoByLoginName() {
        super("getUserInfoByLoginName");
      }

      public getUserInfoByLoginName_args getEmptyArgsInstance() {
        return new getUserInfoByLoginName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoByLoginName_result getResult(I iface, getUserInfoByLoginName_args args) throws org.apache.thrift.TException {
        getUserInfoByLoginName_result result = new getUserInfoByLoginName_result();
        result.success = iface.getUserInfoByLoginName(args.serverHead, args.loginNameList);
        return result;
      }
    }

    public static class verifyLoginByTokenId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyLoginByTokenId_args> {
      public verifyLoginByTokenId() {
        super("verifyLoginByTokenId");
      }

      public verifyLoginByTokenId_args getEmptyArgsInstance() {
        return new verifyLoginByTokenId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyLoginByTokenId_result getResult(I iface, verifyLoginByTokenId_args args) throws org.apache.thrift.TException {
        verifyLoginByTokenId_result result = new verifyLoginByTokenId_result();
        result.success = iface.verifyLoginByTokenId(args.serverHead, args.tokenId);
        return result;
      }
    }

    public static class addUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserInfo_args> {
      public addUserInfo() {
        super("addUserInfo");
      }

      public addUserInfo_args getEmptyArgsInstance() {
        return new addUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addUserInfo_result getResult(I iface, addUserInfo_args args) throws org.apache.thrift.TException {
        addUserInfo_result result = new addUserInfo_result();
        result.success = iface.addUserInfo(args.serverHead, args.userInfo);
        return result;
      }
    }

    public static class updateUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserInfo_args> {
      public updateUserInfo() {
        super("updateUserInfo");
      }

      public updateUserInfo_args getEmptyArgsInstance() {
        return new updateUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserInfo_result getResult(I iface, updateUserInfo_args args) throws org.apache.thrift.TException {
        updateUserInfo_result result = new updateUserInfo_result();
        result.success = iface.updateUserInfo(args.serverHead, args.userId, args.userInfo);
        return result;
      }
    }

    public static class updatePasswordByPhone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePasswordByPhone_args> {
      public updatePasswordByPhone() {
        super("updatePasswordByPhone");
      }

      public updatePasswordByPhone_args getEmptyArgsInstance() {
        return new updatePasswordByPhone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePasswordByPhone_result getResult(I iface, updatePasswordByPhone_args args) throws org.apache.thrift.TException {
        updatePasswordByPhone_result result = new updatePasswordByPhone_result();
        result.success = iface.updatePasswordByPhone(args.serverHead, args.phone, args.password);
        return result;
      }
    }

    public static class updatePasswordByPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePasswordByPassword_args> {
      public updatePasswordByPassword() {
        super("updatePasswordByPassword");
      }

      public updatePasswordByPassword_args getEmptyArgsInstance() {
        return new updatePasswordByPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePasswordByPassword_result getResult(I iface, updatePasswordByPassword_args args) throws org.apache.thrift.TException {
        updatePasswordByPassword_result result = new updatePasswordByPassword_result();
        result.success = iface.updatePasswordByPassword(args.serverHead, args.userInfo, args.newPassword);
        return result;
      }
    }

    public static class deleteSystemUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSystemUser_args> {
      public deleteSystemUser() {
        super("deleteSystemUser");
      }

      public deleteSystemUser_args getEmptyArgsInstance() {
        return new deleteSystemUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSystemUser_result getResult(I iface, deleteSystemUser_args args) throws org.apache.thrift.TException {
        deleteSystemUser_result result = new deleteSystemUser_result();
        result.success = iface.deleteSystemUser(args.serverHead, args.userId, args.systemType);
        return result;
      }
    }

    public static class userRelationToSystem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userRelationToSystem_args> {
      public userRelationToSystem() {
        super("userRelationToSystem");
      }

      public userRelationToSystem_args getEmptyArgsInstance() {
        return new userRelationToSystem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userRelationToSystem_result getResult(I iface, userRelationToSystem_args args) throws org.apache.thrift.TException {
        userRelationToSystem_result result = new userRelationToSystem_result();
        result.success = iface.userRelationToSystem(args.serverHead, args.userId, args.systemType);
        return result;
      }
    }

    public static class checkInvalidTokenIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkInvalidTokenIdList_args> {
      public checkInvalidTokenIdList() {
        super("checkInvalidTokenIdList");
      }

      public checkInvalidTokenIdList_args getEmptyArgsInstance() {
        return new checkInvalidTokenIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkInvalidTokenIdList_result getResult(I iface, checkInvalidTokenIdList_args args) throws org.apache.thrift.TException {
        checkInvalidTokenIdList_result result = new checkInvalidTokenIdList_result();
        result.success = iface.checkInvalidTokenIdList(args.serverHead, args.tokenIdList);
        return result;
      }
    }

    public static class getTemporaryTokenId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTemporaryTokenId_args> {
      public getTemporaryTokenId() {
        super("getTemporaryTokenId");
      }

      public getTemporaryTokenId_args getEmptyArgsInstance() {
        return new getTemporaryTokenId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTemporaryTokenId_result getResult(I iface, getTemporaryTokenId_args args) throws org.apache.thrift.TException {
        getTemporaryTokenId_result result = new getTemporaryTokenId_result();
        result.success = iface.getTemporaryTokenId(args.serverHead);
        return result;
      }
    }

    public static class destroyTemporaryTokenId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destroyTemporaryTokenId_args> {
      public destroyTemporaryTokenId() {
        super("destroyTemporaryTokenId");
      }

      public destroyTemporaryTokenId_args getEmptyArgsInstance() {
        return new destroyTemporaryTokenId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public destroyTemporaryTokenId_result getResult(I iface, destroyTemporaryTokenId_args args) throws org.apache.thrift.TException {
        destroyTemporaryTokenId_result result = new destroyTemporaryTokenId_result();
        result.success = iface.destroyTemporaryTokenId(args.serverHead, args.tokenId);
        return result;
      }
    }

    public static class checkUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUserInfo_args> {
      public checkUserInfo() {
        super("checkUserInfo");
      }

      public checkUserInfo_args getEmptyArgsInstance() {
        return new checkUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkUserInfo_result getResult(I iface, checkUserInfo_args args) throws org.apache.thrift.TException {
        checkUserInfo_result result = new checkUserInfo_result();
        result.success = iface.checkUserInfo(args.serverHead, args.userInfo);
        return result;
      }
    }

    public static class getUserInfoListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoListByPage_args> {
      public getUserInfoListByPage() {
        super("getUserInfoListByPage");
      }

      public getUserInfoListByPage_args getEmptyArgsInstance() {
        return new getUserInfoListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoListByPage_result getResult(I iface, getUserInfoListByPage_args args) throws org.apache.thrift.TException {
        getUserInfoListByPage_result result = new getUserInfoListByPage_result();
        result.success = iface.getUserInfoListByPage(args.serverHead, args.appType, args.userType, args.pageInfo);
        return result;
      }
    }

    public static class getRecentlyLoginUserList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecentlyLoginUserList_args> {
      public getRecentlyLoginUserList() {
        super("getRecentlyLoginUserList");
      }

      public getRecentlyLoginUserList_args getEmptyArgsInstance() {
        return new getRecentlyLoginUserList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecentlyLoginUserList_result getResult(I iface, getRecentlyLoginUserList_args args) throws org.apache.thrift.TException {
        getRecentlyLoginUserList_result result = new getRecentlyLoginUserList_result();
        result.success = iface.getRecentlyLoginUserList(args.appType, args.platformType, args.pageInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("autoLoginByTokenId", new autoLoginByTokenId());
      processMap.put("getUserInfoByTokenId", new getUserInfoByTokenId());
      processMap.put("getUserInfoById", new getUserInfoById());
      processMap.put("getUserInfoByPhone", new getUserInfoByPhone());
      processMap.put("getUserInfoByEmail", new getUserInfoByEmail());
      processMap.put("getUserInfoByLoginName", new getUserInfoByLoginName());
      processMap.put("verifyLoginByTokenId", new verifyLoginByTokenId());
      processMap.put("addUserInfo", new addUserInfo());
      processMap.put("updateUserInfo", new updateUserInfo());
      processMap.put("updatePasswordByPhone", new updatePasswordByPhone());
      processMap.put("updatePasswordByPassword", new updatePasswordByPassword());
      processMap.put("deleteSystemUser", new deleteSystemUser());
      processMap.put("userRelationToSystem", new userRelationToSystem());
      processMap.put("checkInvalidTokenIdList", new checkInvalidTokenIdList());
      processMap.put("getTemporaryTokenId", new getTemporaryTokenId());
      processMap.put("destroyTemporaryTokenId", new destroyTemporaryTokenId());
      processMap.put("checkUserInfo", new checkUserInfo());
      processMap.put("getUserInfoListByPage", new getUserInfoListByPage());
      processMap.put("getRecentlyLoginUserList", new getRecentlyLoginUserList());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, com.thrift.common.body.ResponseInfo> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo>() { 
          public void onComplete(com.thrift.common.body.ResponseInfo o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, com.thrift.common.body.UserLoginResp> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp>() { 
          public void onComplete(com.thrift.common.body.UserLoginResp o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            login_result result = new login_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
        iface.login(args.serverHead, args.loginName, args.passwd, args.platformType, args.appType,resultHandler);
      }
    }

    public static class logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logout_args, com.thrift.common.body.ResponseInfo> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo>() { 
          public void onComplete(com.thrift.common.body.ResponseInfo o) {
            logout_result result = new logout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logout_result result = new logout_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logout_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException {
        iface.logout(args.head,resultHandler);
      }
    }

    public static class autoLoginByTokenId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, autoLoginByTokenId_args, com.thrift.common.body.UserLoginResp> {
      public autoLoginByTokenId() {
        super("autoLoginByTokenId");
      }

      public autoLoginByTokenId_args getEmptyArgsInstance() {
        return new autoLoginByTokenId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp>() { 
          public void onComplete(com.thrift.common.body.UserLoginResp o) {
            autoLoginByTokenId_result result = new autoLoginByTokenId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            autoLoginByTokenId_result result = new autoLoginByTokenId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, autoLoginByTokenId_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
        iface.autoLoginByTokenId(args.serverHead, args.tokenId,resultHandler);
      }
    }

    public static class getUserInfoByTokenId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoByTokenId_args, com.thrift.common.body.UserLoginResp> {
      public getUserInfoByTokenId() {
        super("getUserInfoByTokenId");
      }

      public getUserInfoByTokenId_args getEmptyArgsInstance() {
        return new getUserInfoByTokenId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp>() { 
          public void onComplete(com.thrift.common.body.UserLoginResp o) {
            getUserInfoByTokenId_result result = new getUserInfoByTokenId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfoByTokenId_result result = new getUserInfoByTokenId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoByTokenId_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfoByTokenId(args.serverHead, args.tokenId,resultHandler);
      }
    }

    public static class getUserInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoById_args, com.thrift.common.body.UserInfoResp> {
      public getUserInfoById() {
        super("getUserInfoById");
      }

      public getUserInfoById_args getEmptyArgsInstance() {
        return new getUserInfoById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            getUserInfoById_result result = new getUserInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfoById_result result = new getUserInfoById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfoById(args.serverHead, args.userId,resultHandler);
      }
    }

    public static class getUserInfoByPhone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoByPhone_args, com.thrift.common.body.UserInfoResp> {
      public getUserInfoByPhone() {
        super("getUserInfoByPhone");
      }

      public getUserInfoByPhone_args getEmptyArgsInstance() {
        return new getUserInfoByPhone_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            getUserInfoByPhone_result result = new getUserInfoByPhone_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfoByPhone_result result = new getUserInfoByPhone_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoByPhone_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfoByPhone(args.serverHead, args.phoneList,resultHandler);
      }
    }

    public static class getUserInfoByEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoByEmail_args, com.thrift.common.body.UserInfoResp> {
      public getUserInfoByEmail() {
        super("getUserInfoByEmail");
      }

      public getUserInfoByEmail_args getEmptyArgsInstance() {
        return new getUserInfoByEmail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            getUserInfoByEmail_result result = new getUserInfoByEmail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfoByEmail_result result = new getUserInfoByEmail_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoByEmail_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfoByEmail(args.serverHead, args.emailList,resultHandler);
      }
    }

    public static class getUserInfoByLoginName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoByLoginName_args, com.thrift.common.body.UserInfoResp> {
      public getUserInfoByLoginName() {
        super("getUserInfoByLoginName");
      }

      public getUserInfoByLoginName_args getEmptyArgsInstance() {
        return new getUserInfoByLoginName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            getUserInfoByLoginName_result result = new getUserInfoByLoginName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfoByLoginName_result result = new getUserInfoByLoginName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoByLoginName_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfoByLoginName(args.serverHead, args.loginNameList,resultHandler);
      }
    }

    public static class verifyLoginByTokenId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyLoginByTokenId_args, com.thrift.common.body.UserLoginResp> {
      public verifyLoginByTokenId() {
        super("verifyLoginByTokenId");
      }

      public verifyLoginByTokenId_args getEmptyArgsInstance() {
        return new verifyLoginByTokenId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp>() { 
          public void onComplete(com.thrift.common.body.UserLoginResp o) {
            verifyLoginByTokenId_result result = new verifyLoginByTokenId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            verifyLoginByTokenId_result result = new verifyLoginByTokenId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyLoginByTokenId_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
        iface.verifyLoginByTokenId(args.serverHead, args.tokenId,resultHandler);
      }
    }

    public static class addUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUserInfo_args, com.thrift.common.body.UserInfoResp> {
      public addUserInfo() {
        super("addUserInfo");
      }

      public addUserInfo_args getEmptyArgsInstance() {
        return new addUserInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            addUserInfo_result result = new addUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addUserInfo_result result = new addUserInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.addUserInfo(args.serverHead, args.userInfo,resultHandler);
      }
    }

    public static class updateUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserInfo_args, com.thrift.common.body.UserInfoResp> {
      public updateUserInfo() {
        super("updateUserInfo");
      }

      public updateUserInfo_args getEmptyArgsInstance() {
        return new updateUserInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            updateUserInfo_result result = new updateUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUserInfo_result result = new updateUserInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.updateUserInfo(args.serverHead, args.userId, args.userInfo,resultHandler);
      }
    }

    public static class updatePasswordByPhone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePasswordByPhone_args, com.thrift.common.body.UserInfoResp> {
      public updatePasswordByPhone() {
        super("updatePasswordByPhone");
      }

      public updatePasswordByPhone_args getEmptyArgsInstance() {
        return new updatePasswordByPhone_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            updatePasswordByPhone_result result = new updatePasswordByPhone_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updatePasswordByPhone_result result = new updatePasswordByPhone_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePasswordByPhone_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.updatePasswordByPhone(args.serverHead, args.phone, args.password,resultHandler);
      }
    }

    public static class updatePasswordByPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePasswordByPassword_args, com.thrift.common.body.UserInfoResp> {
      public updatePasswordByPassword() {
        super("updatePasswordByPassword");
      }

      public updatePasswordByPassword_args getEmptyArgsInstance() {
        return new updatePasswordByPassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            updatePasswordByPassword_result result = new updatePasswordByPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updatePasswordByPassword_result result = new updatePasswordByPassword_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePasswordByPassword_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.updatePasswordByPassword(args.serverHead, args.userInfo, args.newPassword,resultHandler);
      }
    }

    public static class deleteSystemUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSystemUser_args, com.thrift.common.body.UserInfoResp> {
      public deleteSystemUser() {
        super("deleteSystemUser");
      }

      public deleteSystemUser_args getEmptyArgsInstance() {
        return new deleteSystemUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            deleteSystemUser_result result = new deleteSystemUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteSystemUser_result result = new deleteSystemUser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSystemUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.deleteSystemUser(args.serverHead, args.userId, args.systemType,resultHandler);
      }
    }

    public static class userRelationToSystem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userRelationToSystem_args, com.thrift.common.body.UserInfoResp> {
      public userRelationToSystem() {
        super("userRelationToSystem");
      }

      public userRelationToSystem_args getEmptyArgsInstance() {
        return new userRelationToSystem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            userRelationToSystem_result result = new userRelationToSystem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            userRelationToSystem_result result = new userRelationToSystem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userRelationToSystem_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.userRelationToSystem(args.serverHead, args.userId, args.systemType,resultHandler);
      }
    }

    public static class checkInvalidTokenIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkInvalidTokenIdList_args, com.thrift.common.body.UserInvalidTokenIdResp> {
      public checkInvalidTokenIdList() {
        super("checkInvalidTokenIdList");
      }

      public checkInvalidTokenIdList_args getEmptyArgsInstance() {
        return new checkInvalidTokenIdList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInvalidTokenIdResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInvalidTokenIdResp>() { 
          public void onComplete(com.thrift.common.body.UserInvalidTokenIdResp o) {
            checkInvalidTokenIdList_result result = new checkInvalidTokenIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkInvalidTokenIdList_result result = new checkInvalidTokenIdList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkInvalidTokenIdList_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInvalidTokenIdResp> resultHandler) throws org.apache.thrift.TException {
        iface.checkInvalidTokenIdList(args.serverHead, args.tokenIdList,resultHandler);
      }
    }

    public static class getTemporaryTokenId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTemporaryTokenId_args, com.thrift.common.body.UserLoginResp> {
      public getTemporaryTokenId() {
        super("getTemporaryTokenId");
      }

      public getTemporaryTokenId_args getEmptyArgsInstance() {
        return new getTemporaryTokenId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp>() { 
          public void onComplete(com.thrift.common.body.UserLoginResp o) {
            getTemporaryTokenId_result result = new getTemporaryTokenId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTemporaryTokenId_result result = new getTemporaryTokenId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTemporaryTokenId_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserLoginResp> resultHandler) throws org.apache.thrift.TException {
        iface.getTemporaryTokenId(args.serverHead,resultHandler);
      }
    }

    public static class destroyTemporaryTokenId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destroyTemporaryTokenId_args, com.thrift.common.body.ResponseInfo> {
      public destroyTemporaryTokenId() {
        super("destroyTemporaryTokenId");
      }

      public destroyTemporaryTokenId_args getEmptyArgsInstance() {
        return new destroyTemporaryTokenId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo>() { 
          public void onComplete(com.thrift.common.body.ResponseInfo o) {
            destroyTemporaryTokenId_result result = new destroyTemporaryTokenId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            destroyTemporaryTokenId_result result = new destroyTemporaryTokenId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, destroyTemporaryTokenId_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.ResponseInfo> resultHandler) throws org.apache.thrift.TException {
        iface.destroyTemporaryTokenId(args.serverHead, args.tokenId,resultHandler);
      }
    }

    public static class checkUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUserInfo_args, com.thrift.common.body.UserInfoResp> {
      public checkUserInfo() {
        super("checkUserInfo");
      }

      public checkUserInfo_args getEmptyArgsInstance() {
        return new checkUserInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            checkUserInfo_result result = new checkUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkUserInfo_result result = new checkUserInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.checkUserInfo(args.serverHead, args.userInfo,resultHandler);
      }
    }

    public static class getUserInfoListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoListByPage_args, com.thrift.common.body.UserInfoResp> {
      public getUserInfoListByPage() {
        super("getUserInfoListByPage");
      }

      public getUserInfoListByPage_args getEmptyArgsInstance() {
        return new getUserInfoListByPage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            getUserInfoListByPage_result result = new getUserInfoListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfoListByPage_result result = new getUserInfoListByPage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfoListByPage(args.serverHead, args.appType, args.userType, args.pageInfo,resultHandler);
      }
    }

    public static class getRecentlyLoginUserList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecentlyLoginUserList_args, com.thrift.common.body.UserInfoResp> {
      public getRecentlyLoginUserList() {
        super("getRecentlyLoginUserList");
      }

      public getRecentlyLoginUserList_args getEmptyArgsInstance() {
        return new getRecentlyLoginUserList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp>() { 
          public void onComplete(com.thrift.common.body.UserInfoResp o) {
            getRecentlyLoginUserList_result result = new getRecentlyLoginUserList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRecentlyLoginUserList_result result = new getRecentlyLoginUserList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecentlyLoginUserList_args args, org.apache.thrift.async.AsyncMethodCallback<com.thrift.common.body.UserInfoResp> resultHandler) throws org.apache.thrift.TException {
        iface.getRecentlyLoginUserList(args.appType, args.platformType, args.pageInfo,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public com.thrift.common.body.ResponseInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.ResponseInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      com.thrift.common.body.ResponseInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.ResponseInfo(other.success);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.ResponseInfo getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(com.thrift.common.body.ResponseInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.ResponseInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.ResponseInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.ResponseInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PLATFORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platformType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.lang.String loginName; // required
    public java.lang.String passwd; // required
    /**
     * 
     * @see com.thrift.common.define.PlatformType
     */
    public com.thrift.common.define.PlatformType platformType; // required
    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType appType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      LOGIN_NAME((short)2, "loginName"),
      PASSWD((short)3, "passwd"),
      /**
       * 
       * @see com.thrift.common.define.PlatformType
       */
      PLATFORM_TYPE((short)4, "platformType"),
      /**
       * 
       * @see com.thrift.common.define.AppType
       */
      APP_TYPE((short)5, "appType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // LOGIN_NAME
            return LOGIN_NAME;
          case 3: // PASSWD
            return PASSWD;
          case 4: // PLATFORM_TYPE
            return PLATFORM_TYPE;
          case 5: // APP_TYPE
            return APP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLATFORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platformType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.PlatformType.class)));
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.AppType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      com.thrift.common.head.UDCHead serverHead,
      java.lang.String loginName,
      java.lang.String passwd,
      com.thrift.common.define.PlatformType platformType,
      com.thrift.common.define.AppType appType)
    {
      this();
      this.serverHead = serverHead;
      this.loginName = loginName;
      this.passwd = passwd;
      this.platformType = platformType;
      this.appType = appType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetLoginName()) {
        this.loginName = other.loginName;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
      if (other.isSetPlatformType()) {
        this.platformType = other.platformType;
      }
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.loginName = null;
      this.passwd = null;
      this.platformType = null;
      this.appType = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public login_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public java.lang.String getLoginName() {
      return this.loginName;
    }

    public login_args setLoginName(java.lang.String loginName) {
      this.loginName = loginName;
      return this;
    }

    public void unsetLoginName() {
      this.loginName = null;
    }

    /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginName() {
      return this.loginName != null;
    }

    public void setLoginNameIsSet(boolean value) {
      if (!value) {
        this.loginName = null;
      }
    }

    public java.lang.String getPasswd() {
      return this.passwd;
    }

    public login_args setPasswd(java.lang.String passwd) {
      this.passwd = passwd;
      return this;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setPasswdIsSet(boolean value) {
      if (!value) {
        this.passwd = null;
      }
    }

    /**
     * 
     * @see com.thrift.common.define.PlatformType
     */
    public com.thrift.common.define.PlatformType getPlatformType() {
      return this.platformType;
    }

    /**
     * 
     * @see com.thrift.common.define.PlatformType
     */
    public login_args setPlatformType(com.thrift.common.define.PlatformType platformType) {
      this.platformType = platformType;
      return this;
    }

    public void unsetPlatformType() {
      this.platformType = null;
    }

    /** Returns true if field platformType is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformType() {
      return this.platformType != null;
    }

    public void setPlatformTypeIsSet(boolean value) {
      if (!value) {
        this.platformType = null;
      }
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public login_args setAppType(com.thrift.common.define.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case LOGIN_NAME:
        if (value == null) {
          unsetLoginName();
        } else {
          setLoginName((java.lang.String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((java.lang.String)value);
        }
        break;

      case PLATFORM_TYPE:
        if (value == null) {
          unsetPlatformType();
        } else {
          setPlatformType((com.thrift.common.define.PlatformType)value);
        }
        break;

      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.thrift.common.define.AppType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case LOGIN_NAME:
        return getLoginName();

      case PASSWD:
        return getPasswd();

      case PLATFORM_TYPE:
        return getPlatformType();

      case APP_TYPE:
        return getAppType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case LOGIN_NAME:
        return isSetLoginName();
      case PASSWD:
        return isSetPasswd();
      case PLATFORM_TYPE:
        return isSetPlatformType();
      case APP_TYPE:
        return isSetAppType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_loginName = true && this.isSetLoginName();
      boolean that_present_loginName = true && that.isSetLoginName();
      if (this_present_loginName || that_present_loginName) {
        if (!(this_present_loginName && that_present_loginName))
          return false;
        if (!this.loginName.equals(that.loginName))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      boolean this_present_platformType = true && this.isSetPlatformType();
      boolean that_present_platformType = true && that.isSetPlatformType();
      if (this_present_platformType || that_present_platformType) {
        if (!(this_present_platformType && that_present_platformType))
          return false;
        if (!this.platformType.equals(that.platformType))
          return false;
      }

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetLoginName()) ? 131071 : 524287);
      if (isSetLoginName())
        hashCode = hashCode * 8191 + loginName.hashCode();

      hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
      if (isSetPasswd())
        hashCode = hashCode * 8191 + passwd.hashCode();

      hashCode = hashCode * 8191 + ((isSetPlatformType()) ? 131071 : 524287);
      if (isSetPlatformType())
        hashCode = hashCode * 8191 + platformType.getValue();

      hashCode = hashCode * 8191 + ((isSetAppType()) ? 131071 : 524287);
      if (isSetAppType())
        hashCode = hashCode * 8191 + appType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPasswd()).compareTo(other.isSetPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPlatformType()).compareTo(other.isSetPlatformType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformType, other.platformType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppType()).compareTo(other.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, other.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformType:");
      if (this.platformType == null) {
        sb.append("null");
      } else {
        sb.append(this.platformType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginName = iprot.readString();
                struct.setLoginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.passwd = iprot.readString();
                struct.setPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PLATFORM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.platformType = com.thrift.common.define.PlatformType.findByValue(iprot.readI32());
                struct.setPlatformTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginName != null) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
        if (struct.passwd != null) {
          oprot.writeFieldBegin(PASSWD_FIELD_DESC);
          oprot.writeString(struct.passwd);
          oprot.writeFieldEnd();
        }
        if (struct.platformType != null) {
          oprot.writeFieldBegin(PLATFORM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.platformType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetLoginName()) {
          optionals.set(1);
        }
        if (struct.isSetPasswd()) {
          optionals.set(2);
        }
        if (struct.isSetPlatformType()) {
          optionals.set(3);
        }
        if (struct.isSetAppType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetLoginName()) {
          oprot.writeString(struct.loginName);
        }
        if (struct.isSetPasswd()) {
          oprot.writeString(struct.passwd);
        }
        if (struct.isSetPlatformType()) {
          oprot.writeI32(struct.platformType.getValue());
        }
        if (struct.isSetAppType()) {
          oprot.writeI32(struct.appType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginName = iprot.readString();
          struct.setLoginNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.passwd = iprot.readString();
          struct.setPasswdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.platformType = com.thrift.common.define.PlatformType.findByValue(iprot.readI32());
          struct.setPlatformTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.appType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
          struct.setAppTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_resultTupleSchemeFactory();

    public com.thrift.common.body.UserLoginResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserLoginResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      com.thrift.common.body.UserLoginResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserLoginResp(other.success);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserLoginResp getSuccess() {
      return this.success;
    }

    public login_result setSuccess(com.thrift.common.body.UserLoginResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserLoginResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserLoginResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserLoginResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

    private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead head; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEAD((short)1, "head");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEAD
            return HEAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
    }

    public logout_args() {
    }

    public logout_args(
      com.thrift.common.head.UDCHead head)
    {
      this();
      this.head = head;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
      if (other.isSetHead()) {
        this.head = new com.thrift.common.head.UDCHead(other.head);
      }
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    @Override
    public void clear() {
      this.head = null;
    }

    public com.thrift.common.head.UDCHead getHead() {
      return this.head;
    }

    public logout_args setHead(com.thrift.common.head.UDCHead head) {
      this.head = head;
      return this;
    }

    public void unsetHead() {
      this.head = null;
    }

    /** Returns true if field head is set (has been assigned a value) and false otherwise */
    public boolean isSetHead() {
      return this.head != null;
    }

    public void setHeadIsSet(boolean value) {
      if (!value) {
        this.head = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HEAD:
        if (value == null) {
          unsetHead();
        } else {
          setHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEAD:
        return getHead();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEAD:
        return isSetHead();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_head = true && this.isSetHead();
      boolean that_present_head = true && that.isSetHead();
      if (this_present_head || that_present_head) {
        if (!(this_present_head && that_present_head))
          return false;
        if (!this.head.equals(that.head))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHead()) ? 131071 : 524287);
      if (isSetHead())
        hashCode = hashCode * 8191 + head.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_args(");
      boolean first = true;

      sb.append("head:");
      if (this.head == null) {
        sb.append("null");
      } else {
        sb.append(this.head);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (head != null) {
        head.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsStandardScheme getScheme() {
        return new logout_argsStandardScheme();
      }
    }

    private static class logout_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.head = new com.thrift.common.head.UDCHead();
                struct.head.read(iprot);
                struct.setHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.head != null) {
          oprot.writeFieldBegin(HEAD_FIELD_DESC);
          struct.head.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsTupleScheme getScheme() {
        return new logout_argsTupleScheme();
      }
    }

    private static class logout_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHead()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHead()) {
          struct.head.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.head = new com.thrift.common.head.UDCHead();
          struct.head.read(iprot);
          struct.setHeadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_resultTupleSchemeFactory();

    public com.thrift.common.body.ResponseInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.ResponseInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
    }

    public logout_result() {
    }

    public logout_result(
      com.thrift.common.body.ResponseInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.ResponseInfo(other.success);
      }
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.ResponseInfo getSuccess() {
      return this.success;
    }

    public logout_result setSuccess(com.thrift.common.body.ResponseInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.ResponseInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultStandardScheme getScheme() {
        return new logout_resultStandardScheme();
      }
    }

    private static class logout_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.ResponseInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultTupleScheme getScheme() {
        return new logout_resultTupleScheme();
      }
    }

    private static class logout_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.ResponseInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class autoLoginByTokenId_args implements org.apache.thrift.TBase<autoLoginByTokenId_args, autoLoginByTokenId_args._Fields>, java.io.Serializable, Cloneable, Comparable<autoLoginByTokenId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autoLoginByTokenId_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new autoLoginByTokenId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new autoLoginByTokenId_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.lang.String tokenId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      TOKEN_ID((short)2, "tokenId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // TOKEN_ID
            return TOKEN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.TOKEN_ID, new org.apache.thrift.meta_data.FieldMetaData("tokenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autoLoginByTokenId_args.class, metaDataMap);
    }

    public autoLoginByTokenId_args() {
    }

    public autoLoginByTokenId_args(
      com.thrift.common.head.UDCHead serverHead,
      java.lang.String tokenId)
    {
      this();
      this.serverHead = serverHead;
      this.tokenId = tokenId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autoLoginByTokenId_args(autoLoginByTokenId_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetTokenId()) {
        this.tokenId = other.tokenId;
      }
    }

    public autoLoginByTokenId_args deepCopy() {
      return new autoLoginByTokenId_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.tokenId = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public autoLoginByTokenId_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public java.lang.String getTokenId() {
      return this.tokenId;
    }

    public autoLoginByTokenId_args setTokenId(java.lang.String tokenId) {
      this.tokenId = tokenId;
      return this;
    }

    public void unsetTokenId() {
      this.tokenId = null;
    }

    /** Returns true if field tokenId is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenId() {
      return this.tokenId != null;
    }

    public void setTokenIdIsSet(boolean value) {
      if (!value) {
        this.tokenId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case TOKEN_ID:
        if (value == null) {
          unsetTokenId();
        } else {
          setTokenId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case TOKEN_ID:
        return getTokenId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case TOKEN_ID:
        return isSetTokenId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof autoLoginByTokenId_args)
        return this.equals((autoLoginByTokenId_args)that);
      return false;
    }

    public boolean equals(autoLoginByTokenId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_tokenId = true && this.isSetTokenId();
      boolean that_present_tokenId = true && that.isSetTokenId();
      if (this_present_tokenId || that_present_tokenId) {
        if (!(this_present_tokenId && that_present_tokenId))
          return false;
        if (!this.tokenId.equals(that.tokenId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenId()) ? 131071 : 524287);
      if (isSetTokenId())
        hashCode = hashCode * 8191 + tokenId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(autoLoginByTokenId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenId()).compareTo(other.isSetTokenId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenId, other.tokenId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("autoLoginByTokenId_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenId:");
      if (this.tokenId == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class autoLoginByTokenId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public autoLoginByTokenId_argsStandardScheme getScheme() {
        return new autoLoginByTokenId_argsStandardScheme();
      }
    }

    private static class autoLoginByTokenId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<autoLoginByTokenId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, autoLoginByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tokenId = iprot.readString();
                struct.setTokenIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, autoLoginByTokenId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenId != null) {
          oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
          oprot.writeString(struct.tokenId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class autoLoginByTokenId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public autoLoginByTokenId_argsTupleScheme getScheme() {
        return new autoLoginByTokenId_argsTupleScheme();
      }
    }

    private static class autoLoginByTokenId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<autoLoginByTokenId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, autoLoginByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetTokenId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetTokenId()) {
          oprot.writeString(struct.tokenId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, autoLoginByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenId = iprot.readString();
          struct.setTokenIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class autoLoginByTokenId_result implements org.apache.thrift.TBase<autoLoginByTokenId_result, autoLoginByTokenId_result._Fields>, java.io.Serializable, Cloneable, Comparable<autoLoginByTokenId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autoLoginByTokenId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new autoLoginByTokenId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new autoLoginByTokenId_resultTupleSchemeFactory();

    public com.thrift.common.body.UserLoginResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserLoginResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autoLoginByTokenId_result.class, metaDataMap);
    }

    public autoLoginByTokenId_result() {
    }

    public autoLoginByTokenId_result(
      com.thrift.common.body.UserLoginResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autoLoginByTokenId_result(autoLoginByTokenId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserLoginResp(other.success);
      }
    }

    public autoLoginByTokenId_result deepCopy() {
      return new autoLoginByTokenId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserLoginResp getSuccess() {
      return this.success;
    }

    public autoLoginByTokenId_result setSuccess(com.thrift.common.body.UserLoginResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserLoginResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof autoLoginByTokenId_result)
        return this.equals((autoLoginByTokenId_result)that);
      return false;
    }

    public boolean equals(autoLoginByTokenId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(autoLoginByTokenId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("autoLoginByTokenId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class autoLoginByTokenId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public autoLoginByTokenId_resultStandardScheme getScheme() {
        return new autoLoginByTokenId_resultStandardScheme();
      }
    }

    private static class autoLoginByTokenId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<autoLoginByTokenId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, autoLoginByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserLoginResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, autoLoginByTokenId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class autoLoginByTokenId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public autoLoginByTokenId_resultTupleScheme getScheme() {
        return new autoLoginByTokenId_resultTupleScheme();
      }
    }

    private static class autoLoginByTokenId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<autoLoginByTokenId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, autoLoginByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, autoLoginByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserLoginResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByTokenId_args implements org.apache.thrift.TBase<getUserInfoByTokenId_args, getUserInfoByTokenId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByTokenId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByTokenId_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByTokenId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByTokenId_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.lang.String tokenId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      TOKEN_ID((short)2, "tokenId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // TOKEN_ID
            return TOKEN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.TOKEN_ID, new org.apache.thrift.meta_data.FieldMetaData("tokenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByTokenId_args.class, metaDataMap);
    }

    public getUserInfoByTokenId_args() {
    }

    public getUserInfoByTokenId_args(
      com.thrift.common.head.UDCHead serverHead,
      java.lang.String tokenId)
    {
      this();
      this.serverHead = serverHead;
      this.tokenId = tokenId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByTokenId_args(getUserInfoByTokenId_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetTokenId()) {
        this.tokenId = other.tokenId;
      }
    }

    public getUserInfoByTokenId_args deepCopy() {
      return new getUserInfoByTokenId_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.tokenId = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getUserInfoByTokenId_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public java.lang.String getTokenId() {
      return this.tokenId;
    }

    public getUserInfoByTokenId_args setTokenId(java.lang.String tokenId) {
      this.tokenId = tokenId;
      return this;
    }

    public void unsetTokenId() {
      this.tokenId = null;
    }

    /** Returns true if field tokenId is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenId() {
      return this.tokenId != null;
    }

    public void setTokenIdIsSet(boolean value) {
      if (!value) {
        this.tokenId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case TOKEN_ID:
        if (value == null) {
          unsetTokenId();
        } else {
          setTokenId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case TOKEN_ID:
        return getTokenId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case TOKEN_ID:
        return isSetTokenId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByTokenId_args)
        return this.equals((getUserInfoByTokenId_args)that);
      return false;
    }

    public boolean equals(getUserInfoByTokenId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_tokenId = true && this.isSetTokenId();
      boolean that_present_tokenId = true && that.isSetTokenId();
      if (this_present_tokenId || that_present_tokenId) {
        if (!(this_present_tokenId && that_present_tokenId))
          return false;
        if (!this.tokenId.equals(that.tokenId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenId()) ? 131071 : 524287);
      if (isSetTokenId())
        hashCode = hashCode * 8191 + tokenId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByTokenId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenId()).compareTo(other.isSetTokenId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenId, other.tokenId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByTokenId_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenId:");
      if (this.tokenId == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByTokenId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByTokenId_argsStandardScheme getScheme() {
        return new getUserInfoByTokenId_argsStandardScheme();
      }
    }

    private static class getUserInfoByTokenId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByTokenId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tokenId = iprot.readString();
                struct.setTokenIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByTokenId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenId != null) {
          oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
          oprot.writeString(struct.tokenId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByTokenId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByTokenId_argsTupleScheme getScheme() {
        return new getUserInfoByTokenId_argsTupleScheme();
      }
    }

    private static class getUserInfoByTokenId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByTokenId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetTokenId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetTokenId()) {
          oprot.writeString(struct.tokenId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenId = iprot.readString();
          struct.setTokenIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByTokenId_result implements org.apache.thrift.TBase<getUserInfoByTokenId_result, getUserInfoByTokenId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByTokenId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByTokenId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByTokenId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByTokenId_resultTupleSchemeFactory();

    public com.thrift.common.body.UserLoginResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserLoginResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByTokenId_result.class, metaDataMap);
    }

    public getUserInfoByTokenId_result() {
    }

    public getUserInfoByTokenId_result(
      com.thrift.common.body.UserLoginResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByTokenId_result(getUserInfoByTokenId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserLoginResp(other.success);
      }
    }

    public getUserInfoByTokenId_result deepCopy() {
      return new getUserInfoByTokenId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserLoginResp getSuccess() {
      return this.success;
    }

    public getUserInfoByTokenId_result setSuccess(com.thrift.common.body.UserLoginResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserLoginResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByTokenId_result)
        return this.equals((getUserInfoByTokenId_result)that);
      return false;
    }

    public boolean equals(getUserInfoByTokenId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByTokenId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByTokenId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByTokenId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByTokenId_resultStandardScheme getScheme() {
        return new getUserInfoByTokenId_resultStandardScheme();
      }
    }

    private static class getUserInfoByTokenId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByTokenId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserLoginResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByTokenId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByTokenId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByTokenId_resultTupleScheme getScheme() {
        return new getUserInfoByTokenId_resultTupleScheme();
      }
    }

    private static class getUserInfoByTokenId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByTokenId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserLoginResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoById_args implements org.apache.thrift.TBase<getUserInfoById_args, getUserInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoById_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoById_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.util.List<java.lang.Integer> userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_ID((short)2, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoById_args.class, metaDataMap);
    }

    public getUserInfoById_args() {
    }

    public getUserInfoById_args(
      com.thrift.common.head.UDCHead serverHead,
      java.util.List<java.lang.Integer> userId)
    {
      this();
      this.serverHead = serverHead;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoById_args(getUserInfoById_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetUserId()) {
        java.util.List<java.lang.Integer> __this__userId = new java.util.ArrayList<java.lang.Integer>(other.userId);
        this.userId = __this__userId;
      }
    }

    public getUserInfoById_args deepCopy() {
      return new getUserInfoById_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.userId = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getUserInfoById_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getUserIdSize() {
      return (this.userId == null) ? 0 : this.userId.size();
    }

    public java.util.Iterator<java.lang.Integer> getUserIdIterator() {
      return (this.userId == null) ? null : this.userId.iterator();
    }

    public void addToUserId(int elem) {
      if (this.userId == null) {
        this.userId = new java.util.ArrayList<java.lang.Integer>();
      }
      this.userId.add(elem);
    }

    public java.util.List<java.lang.Integer> getUserId() {
      return this.userId;
    }

    public getUserInfoById_args setUserId(java.util.List<java.lang.Integer> userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoById_args)
        return this.equals((getUserInfoById_args)that);
      return false;
    }

    public boolean equals(getUserInfoById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoById_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoById_argsStandardScheme getScheme() {
        return new getUserInfoById_argsStandardScheme();
      }
    }

    private static class getUserInfoById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.userId = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                  int _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI32();
                    struct.userId.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userId.size()));
            for (int _iter3 : struct.userId)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoById_argsTupleScheme getScheme() {
        return new getUserInfoById_argsTupleScheme();
      }
    }

    private static class getUserInfoById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserId()) {
          {
            oprot.writeI32(struct.userId.size());
            for (int _iter4 : struct.userId)
            {
              oprot.writeI32(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.userId = new java.util.ArrayList<java.lang.Integer>(_list5.size);
            int _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI32();
              struct.userId.add(_elem6);
            }
          }
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoById_result implements org.apache.thrift.TBase<getUserInfoById_result, getUserInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoById_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoById_result.class, metaDataMap);
    }

    public getUserInfoById_result() {
    }

    public getUserInfoById_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoById_result(getUserInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public getUserInfoById_result deepCopy() {
      return new getUserInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public getUserInfoById_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoById_result)
        return this.equals((getUserInfoById_result)that);
      return false;
    }

    public boolean equals(getUserInfoById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoById_resultStandardScheme getScheme() {
        return new getUserInfoById_resultStandardScheme();
      }
    }

    private static class getUserInfoById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoById_resultTupleScheme getScheme() {
        return new getUserInfoById_resultTupleScheme();
      }
    }

    private static class getUserInfoById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByPhone_args implements org.apache.thrift.TBase<getUserInfoByPhone_args, getUserInfoByPhone_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByPhone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByPhone_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PHONE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByPhone_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByPhone_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.util.List<java.lang.String> phoneList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      PHONE_LIST((short)2, "phoneList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // PHONE_LIST
            return PHONE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.PHONE_LIST, new org.apache.thrift.meta_data.FieldMetaData("phoneList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByPhone_args.class, metaDataMap);
    }

    public getUserInfoByPhone_args() {
    }

    public getUserInfoByPhone_args(
      com.thrift.common.head.UDCHead serverHead,
      java.util.List<java.lang.String> phoneList)
    {
      this();
      this.serverHead = serverHead;
      this.phoneList = phoneList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByPhone_args(getUserInfoByPhone_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetPhoneList()) {
        java.util.List<java.lang.String> __this__phoneList = new java.util.ArrayList<java.lang.String>(other.phoneList);
        this.phoneList = __this__phoneList;
      }
    }

    public getUserInfoByPhone_args deepCopy() {
      return new getUserInfoByPhone_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.phoneList = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getUserInfoByPhone_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getPhoneListSize() {
      return (this.phoneList == null) ? 0 : this.phoneList.size();
    }

    public java.util.Iterator<java.lang.String> getPhoneListIterator() {
      return (this.phoneList == null) ? null : this.phoneList.iterator();
    }

    public void addToPhoneList(java.lang.String elem) {
      if (this.phoneList == null) {
        this.phoneList = new java.util.ArrayList<java.lang.String>();
      }
      this.phoneList.add(elem);
    }

    public java.util.List<java.lang.String> getPhoneList() {
      return this.phoneList;
    }

    public getUserInfoByPhone_args setPhoneList(java.util.List<java.lang.String> phoneList) {
      this.phoneList = phoneList;
      return this;
    }

    public void unsetPhoneList() {
      this.phoneList = null;
    }

    /** Returns true if field phoneList is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneList() {
      return this.phoneList != null;
    }

    public void setPhoneListIsSet(boolean value) {
      if (!value) {
        this.phoneList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case PHONE_LIST:
        if (value == null) {
          unsetPhoneList();
        } else {
          setPhoneList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case PHONE_LIST:
        return getPhoneList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case PHONE_LIST:
        return isSetPhoneList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByPhone_args)
        return this.equals((getUserInfoByPhone_args)that);
      return false;
    }

    public boolean equals(getUserInfoByPhone_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_phoneList = true && this.isSetPhoneList();
      boolean that_present_phoneList = true && that.isSetPhoneList();
      if (this_present_phoneList || that_present_phoneList) {
        if (!(this_present_phoneList && that_present_phoneList))
          return false;
        if (!this.phoneList.equals(that.phoneList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetPhoneList()) ? 131071 : 524287);
      if (isSetPhoneList())
        hashCode = hashCode * 8191 + phoneList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByPhone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPhoneList()).compareTo(other.isSetPhoneList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneList, other.phoneList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByPhone_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phoneList:");
      if (this.phoneList == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByPhone_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByPhone_argsStandardScheme getScheme() {
        return new getUserInfoByPhone_argsStandardScheme();
      }
    }

    private static class getUserInfoByPhone_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByPhone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PHONE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.phoneList = new java.util.ArrayList<java.lang.String>(_list8.size);
                  java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.phoneList.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setPhoneListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByPhone_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.phoneList != null) {
          oprot.writeFieldBegin(PHONE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.phoneList.size()));
            for (java.lang.String _iter11 : struct.phoneList)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByPhone_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByPhone_argsTupleScheme getScheme() {
        return new getUserInfoByPhone_argsTupleScheme();
      }
    }

    private static class getUserInfoByPhone_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByPhone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetPhoneList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetPhoneList()) {
          {
            oprot.writeI32(struct.phoneList.size());
            for (java.lang.String _iter12 : struct.phoneList)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.phoneList = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.phoneList.add(_elem14);
            }
          }
          struct.setPhoneListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByPhone_result implements org.apache.thrift.TBase<getUserInfoByPhone_result, getUserInfoByPhone_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByPhone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByPhone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByPhone_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByPhone_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByPhone_result.class, metaDataMap);
    }

    public getUserInfoByPhone_result() {
    }

    public getUserInfoByPhone_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByPhone_result(getUserInfoByPhone_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public getUserInfoByPhone_result deepCopy() {
      return new getUserInfoByPhone_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public getUserInfoByPhone_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByPhone_result)
        return this.equals((getUserInfoByPhone_result)that);
      return false;
    }

    public boolean equals(getUserInfoByPhone_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByPhone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByPhone_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByPhone_resultStandardScheme getScheme() {
        return new getUserInfoByPhone_resultStandardScheme();
      }
    }

    private static class getUserInfoByPhone_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByPhone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByPhone_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByPhone_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByPhone_resultTupleScheme getScheme() {
        return new getUserInfoByPhone_resultTupleScheme();
      }
    }

    private static class getUserInfoByPhone_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByPhone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByEmail_args implements org.apache.thrift.TBase<getUserInfoByEmail_args, getUserInfoByEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByEmail_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EMAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("emailList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByEmail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByEmail_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.util.List<java.lang.String> emailList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      EMAIL_LIST((short)2, "emailList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // EMAIL_LIST
            return EMAIL_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.EMAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("emailList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByEmail_args.class, metaDataMap);
    }

    public getUserInfoByEmail_args() {
    }

    public getUserInfoByEmail_args(
      com.thrift.common.head.UDCHead serverHead,
      java.util.List<java.lang.String> emailList)
    {
      this();
      this.serverHead = serverHead;
      this.emailList = emailList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByEmail_args(getUserInfoByEmail_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetEmailList()) {
        java.util.List<java.lang.String> __this__emailList = new java.util.ArrayList<java.lang.String>(other.emailList);
        this.emailList = __this__emailList;
      }
    }

    public getUserInfoByEmail_args deepCopy() {
      return new getUserInfoByEmail_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.emailList = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getUserInfoByEmail_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getEmailListSize() {
      return (this.emailList == null) ? 0 : this.emailList.size();
    }

    public java.util.Iterator<java.lang.String> getEmailListIterator() {
      return (this.emailList == null) ? null : this.emailList.iterator();
    }

    public void addToEmailList(java.lang.String elem) {
      if (this.emailList == null) {
        this.emailList = new java.util.ArrayList<java.lang.String>();
      }
      this.emailList.add(elem);
    }

    public java.util.List<java.lang.String> getEmailList() {
      return this.emailList;
    }

    public getUserInfoByEmail_args setEmailList(java.util.List<java.lang.String> emailList) {
      this.emailList = emailList;
      return this;
    }

    public void unsetEmailList() {
      this.emailList = null;
    }

    /** Returns true if field emailList is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailList() {
      return this.emailList != null;
    }

    public void setEmailListIsSet(boolean value) {
      if (!value) {
        this.emailList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case EMAIL_LIST:
        if (value == null) {
          unsetEmailList();
        } else {
          setEmailList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case EMAIL_LIST:
        return getEmailList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case EMAIL_LIST:
        return isSetEmailList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByEmail_args)
        return this.equals((getUserInfoByEmail_args)that);
      return false;
    }

    public boolean equals(getUserInfoByEmail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_emailList = true && this.isSetEmailList();
      boolean that_present_emailList = true && that.isSetEmailList();
      if (this_present_emailList || that_present_emailList) {
        if (!(this_present_emailList && that_present_emailList))
          return false;
        if (!this.emailList.equals(that.emailList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetEmailList()) ? 131071 : 524287);
      if (isSetEmailList())
        hashCode = hashCode * 8191 + emailList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEmailList()).compareTo(other.isSetEmailList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailList, other.emailList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByEmail_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emailList:");
      if (this.emailList == null) {
        sb.append("null");
      } else {
        sb.append(this.emailList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByEmail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByEmail_argsStandardScheme getScheme() {
        return new getUserInfoByEmail_argsStandardScheme();
      }
    }

    private static class getUserInfoByEmail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAIL_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.emailList = new java.util.ArrayList<java.lang.String>(_list16.size);
                  java.lang.String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.emailList.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setEmailListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.emailList != null) {
          oprot.writeFieldBegin(EMAIL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emailList.size()));
            for (java.lang.String _iter19 : struct.emailList)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByEmail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByEmail_argsTupleScheme getScheme() {
        return new getUserInfoByEmail_argsTupleScheme();
      }
    }

    private static class getUserInfoByEmail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetEmailList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetEmailList()) {
          {
            oprot.writeI32(struct.emailList.size());
            for (java.lang.String _iter20 : struct.emailList)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.emailList = new java.util.ArrayList<java.lang.String>(_list21.size);
            java.lang.String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.emailList.add(_elem22);
            }
          }
          struct.setEmailListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByEmail_result implements org.apache.thrift.TBase<getUserInfoByEmail_result, getUserInfoByEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByEmail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByEmail_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByEmail_result.class, metaDataMap);
    }

    public getUserInfoByEmail_result() {
    }

    public getUserInfoByEmail_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByEmail_result(getUserInfoByEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public getUserInfoByEmail_result deepCopy() {
      return new getUserInfoByEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public getUserInfoByEmail_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByEmail_result)
        return this.equals((getUserInfoByEmail_result)that);
      return false;
    }

    public boolean equals(getUserInfoByEmail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByEmail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByEmail_resultStandardScheme getScheme() {
        return new getUserInfoByEmail_resultStandardScheme();
      }
    }

    private static class getUserInfoByEmail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByEmail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByEmail_resultTupleScheme getScheme() {
        return new getUserInfoByEmail_resultTupleScheme();
      }
    }

    private static class getUserInfoByEmail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByLoginName_args implements org.apache.thrift.TBase<getUserInfoByLoginName_args, getUserInfoByLoginName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByLoginName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByLoginName_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_NAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("loginNameList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByLoginName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByLoginName_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.util.List<java.lang.String> loginNameList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      LOGIN_NAME_LIST((short)2, "loginNameList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // LOGIN_NAME_LIST
            return LOGIN_NAME_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.LOGIN_NAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("loginNameList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByLoginName_args.class, metaDataMap);
    }

    public getUserInfoByLoginName_args() {
    }

    public getUserInfoByLoginName_args(
      com.thrift.common.head.UDCHead serverHead,
      java.util.List<java.lang.String> loginNameList)
    {
      this();
      this.serverHead = serverHead;
      this.loginNameList = loginNameList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByLoginName_args(getUserInfoByLoginName_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetLoginNameList()) {
        java.util.List<java.lang.String> __this__loginNameList = new java.util.ArrayList<java.lang.String>(other.loginNameList);
        this.loginNameList = __this__loginNameList;
      }
    }

    public getUserInfoByLoginName_args deepCopy() {
      return new getUserInfoByLoginName_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.loginNameList = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getUserInfoByLoginName_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getLoginNameListSize() {
      return (this.loginNameList == null) ? 0 : this.loginNameList.size();
    }

    public java.util.Iterator<java.lang.String> getLoginNameListIterator() {
      return (this.loginNameList == null) ? null : this.loginNameList.iterator();
    }

    public void addToLoginNameList(java.lang.String elem) {
      if (this.loginNameList == null) {
        this.loginNameList = new java.util.ArrayList<java.lang.String>();
      }
      this.loginNameList.add(elem);
    }

    public java.util.List<java.lang.String> getLoginNameList() {
      return this.loginNameList;
    }

    public getUserInfoByLoginName_args setLoginNameList(java.util.List<java.lang.String> loginNameList) {
      this.loginNameList = loginNameList;
      return this;
    }

    public void unsetLoginNameList() {
      this.loginNameList = null;
    }

    /** Returns true if field loginNameList is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginNameList() {
      return this.loginNameList != null;
    }

    public void setLoginNameListIsSet(boolean value) {
      if (!value) {
        this.loginNameList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case LOGIN_NAME_LIST:
        if (value == null) {
          unsetLoginNameList();
        } else {
          setLoginNameList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case LOGIN_NAME_LIST:
        return getLoginNameList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case LOGIN_NAME_LIST:
        return isSetLoginNameList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByLoginName_args)
        return this.equals((getUserInfoByLoginName_args)that);
      return false;
    }

    public boolean equals(getUserInfoByLoginName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_loginNameList = true && this.isSetLoginNameList();
      boolean that_present_loginNameList = true && that.isSetLoginNameList();
      if (this_present_loginNameList || that_present_loginNameList) {
        if (!(this_present_loginNameList && that_present_loginNameList))
          return false;
        if (!this.loginNameList.equals(that.loginNameList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetLoginNameList()) ? 131071 : 524287);
      if (isSetLoginNameList())
        hashCode = hashCode * 8191 + loginNameList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByLoginName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLoginNameList()).compareTo(other.isSetLoginNameList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginNameList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginNameList, other.loginNameList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByLoginName_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginNameList:");
      if (this.loginNameList == null) {
        sb.append("null");
      } else {
        sb.append(this.loginNameList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByLoginName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByLoginName_argsStandardScheme getScheme() {
        return new getUserInfoByLoginName_argsStandardScheme();
      }
    }

    private static class getUserInfoByLoginName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByLoginName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByLoginName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_NAME_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.loginNameList = new java.util.ArrayList<java.lang.String>(_list24.size);
                  java.lang.String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.loginNameList.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setLoginNameListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByLoginName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.loginNameList != null) {
          oprot.writeFieldBegin(LOGIN_NAME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.loginNameList.size()));
            for (java.lang.String _iter27 : struct.loginNameList)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByLoginName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByLoginName_argsTupleScheme getScheme() {
        return new getUserInfoByLoginName_argsTupleScheme();
      }
    }

    private static class getUserInfoByLoginName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByLoginName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByLoginName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetLoginNameList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetLoginNameList()) {
          {
            oprot.writeI32(struct.loginNameList.size());
            for (java.lang.String _iter28 : struct.loginNameList)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByLoginName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.loginNameList = new java.util.ArrayList<java.lang.String>(_list29.size);
            java.lang.String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.loginNameList.add(_elem30);
            }
          }
          struct.setLoginNameListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoByLoginName_result implements org.apache.thrift.TBase<getUserInfoByLoginName_result, getUserInfoByLoginName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoByLoginName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoByLoginName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoByLoginName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoByLoginName_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoByLoginName_result.class, metaDataMap);
    }

    public getUserInfoByLoginName_result() {
    }

    public getUserInfoByLoginName_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoByLoginName_result(getUserInfoByLoginName_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public getUserInfoByLoginName_result deepCopy() {
      return new getUserInfoByLoginName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public getUserInfoByLoginName_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoByLoginName_result)
        return this.equals((getUserInfoByLoginName_result)that);
      return false;
    }

    public boolean equals(getUserInfoByLoginName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoByLoginName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoByLoginName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoByLoginName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByLoginName_resultStandardScheme getScheme() {
        return new getUserInfoByLoginName_resultStandardScheme();
      }
    }

    private static class getUserInfoByLoginName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoByLoginName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoByLoginName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoByLoginName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoByLoginName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoByLoginName_resultTupleScheme getScheme() {
        return new getUserInfoByLoginName_resultTupleScheme();
      }
    }

    private static class getUserInfoByLoginName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoByLoginName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoByLoginName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoByLoginName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verifyLoginByTokenId_args implements org.apache.thrift.TBase<verifyLoginByTokenId_args, verifyLoginByTokenId_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyLoginByTokenId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyLoginByTokenId_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyLoginByTokenId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyLoginByTokenId_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.lang.String tokenId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      TOKEN_ID((short)2, "tokenId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // TOKEN_ID
            return TOKEN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.TOKEN_ID, new org.apache.thrift.meta_data.FieldMetaData("tokenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyLoginByTokenId_args.class, metaDataMap);
    }

    public verifyLoginByTokenId_args() {
    }

    public verifyLoginByTokenId_args(
      com.thrift.common.head.UDCHead serverHead,
      java.lang.String tokenId)
    {
      this();
      this.serverHead = serverHead;
      this.tokenId = tokenId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyLoginByTokenId_args(verifyLoginByTokenId_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetTokenId()) {
        this.tokenId = other.tokenId;
      }
    }

    public verifyLoginByTokenId_args deepCopy() {
      return new verifyLoginByTokenId_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.tokenId = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public verifyLoginByTokenId_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public java.lang.String getTokenId() {
      return this.tokenId;
    }

    public verifyLoginByTokenId_args setTokenId(java.lang.String tokenId) {
      this.tokenId = tokenId;
      return this;
    }

    public void unsetTokenId() {
      this.tokenId = null;
    }

    /** Returns true if field tokenId is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenId() {
      return this.tokenId != null;
    }

    public void setTokenIdIsSet(boolean value) {
      if (!value) {
        this.tokenId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case TOKEN_ID:
        if (value == null) {
          unsetTokenId();
        } else {
          setTokenId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case TOKEN_ID:
        return getTokenId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case TOKEN_ID:
        return isSetTokenId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyLoginByTokenId_args)
        return this.equals((verifyLoginByTokenId_args)that);
      return false;
    }

    public boolean equals(verifyLoginByTokenId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_tokenId = true && this.isSetTokenId();
      boolean that_present_tokenId = true && that.isSetTokenId();
      if (this_present_tokenId || that_present_tokenId) {
        if (!(this_present_tokenId && that_present_tokenId))
          return false;
        if (!this.tokenId.equals(that.tokenId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenId()) ? 131071 : 524287);
      if (isSetTokenId())
        hashCode = hashCode * 8191 + tokenId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verifyLoginByTokenId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenId()).compareTo(other.isSetTokenId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenId, other.tokenId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyLoginByTokenId_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenId:");
      if (this.tokenId == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyLoginByTokenId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyLoginByTokenId_argsStandardScheme getScheme() {
        return new verifyLoginByTokenId_argsStandardScheme();
      }
    }

    private static class verifyLoginByTokenId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyLoginByTokenId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyLoginByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tokenId = iprot.readString();
                struct.setTokenIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyLoginByTokenId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenId != null) {
          oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
          oprot.writeString(struct.tokenId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyLoginByTokenId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyLoginByTokenId_argsTupleScheme getScheme() {
        return new verifyLoginByTokenId_argsTupleScheme();
      }
    }

    private static class verifyLoginByTokenId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyLoginByTokenId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyLoginByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetTokenId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetTokenId()) {
          oprot.writeString(struct.tokenId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyLoginByTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenId = iprot.readString();
          struct.setTokenIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verifyLoginByTokenId_result implements org.apache.thrift.TBase<verifyLoginByTokenId_result, verifyLoginByTokenId_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyLoginByTokenId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyLoginByTokenId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyLoginByTokenId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyLoginByTokenId_resultTupleSchemeFactory();

    public com.thrift.common.body.UserLoginResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserLoginResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyLoginByTokenId_result.class, metaDataMap);
    }

    public verifyLoginByTokenId_result() {
    }

    public verifyLoginByTokenId_result(
      com.thrift.common.body.UserLoginResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyLoginByTokenId_result(verifyLoginByTokenId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserLoginResp(other.success);
      }
    }

    public verifyLoginByTokenId_result deepCopy() {
      return new verifyLoginByTokenId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserLoginResp getSuccess() {
      return this.success;
    }

    public verifyLoginByTokenId_result setSuccess(com.thrift.common.body.UserLoginResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserLoginResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyLoginByTokenId_result)
        return this.equals((verifyLoginByTokenId_result)that);
      return false;
    }

    public boolean equals(verifyLoginByTokenId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verifyLoginByTokenId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyLoginByTokenId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyLoginByTokenId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyLoginByTokenId_resultStandardScheme getScheme() {
        return new verifyLoginByTokenId_resultStandardScheme();
      }
    }

    private static class verifyLoginByTokenId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyLoginByTokenId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyLoginByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserLoginResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyLoginByTokenId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyLoginByTokenId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyLoginByTokenId_resultTupleScheme getScheme() {
        return new verifyLoginByTokenId_resultTupleScheme();
      }
    }

    private static class verifyLoginByTokenId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyLoginByTokenId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyLoginByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyLoginByTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserLoginResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addUserInfo_args implements org.apache.thrift.TBase<addUserInfo_args, addUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserInfo_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUserInfo_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public com.thrift.common.body.UserInfo userInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_INFO((short)2, "userInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_INFO
            return USER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserInfo_args.class, metaDataMap);
    }

    public addUserInfo_args() {
    }

    public addUserInfo_args(
      com.thrift.common.head.UDCHead serverHead,
      com.thrift.common.body.UserInfo userInfo)
    {
      this();
      this.serverHead = serverHead;
      this.userInfo = userInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserInfo_args(addUserInfo_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetUserInfo()) {
        this.userInfo = new com.thrift.common.body.UserInfo(other.userInfo);
      }
    }

    public addUserInfo_args deepCopy() {
      return new addUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.userInfo = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public addUserInfo_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public com.thrift.common.body.UserInfo getUserInfo() {
      return this.userInfo;
    }

    public addUserInfo_args setUserInfo(com.thrift.common.body.UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    public void unsetUserInfo() {
      this.userInfo = null;
    }

    /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserInfo() {
      return this.userInfo != null;
    }

    public void setUserInfoIsSet(boolean value) {
      if (!value) {
        this.userInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_INFO:
        if (value == null) {
          unsetUserInfo();
        } else {
          setUserInfo((com.thrift.common.body.UserInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_INFO:
        return getUserInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_INFO:
        return isSetUserInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserInfo_args)
        return this.equals((addUserInfo_args)that);
      return false;
    }

    public boolean equals(addUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userInfo = true && this.isSetUserInfo();
      boolean that_present_userInfo = true && that.isSetUserInfo();
      if (this_present_userInfo || that_present_userInfo) {
        if (!(this_present_userInfo && that_present_userInfo))
          return false;
        if (!this.userInfo.equals(that.userInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
      if (isSetUserInfo())
        hashCode = hashCode * 8191 + userInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addUserInfo_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
      if (userInfo != null) {
        userInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUserInfo_argsStandardScheme getScheme() {
        return new addUserInfo_argsStandardScheme();
      }
    }

    private static class addUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userInfo = new com.thrift.common.body.UserInfo();
                struct.userInfo.read(iprot);
                struct.setUserInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userInfo != null) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.userInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUserInfo_argsTupleScheme getScheme() {
        return new addUserInfo_argsTupleScheme();
      }
    }

    private static class addUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserInfo()) {
          struct.userInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userInfo = new com.thrift.common.body.UserInfo();
          struct.userInfo.read(iprot);
          struct.setUserInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addUserInfo_result implements org.apache.thrift.TBase<addUserInfo_result, addUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUserInfo_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserInfo_result.class, metaDataMap);
    }

    public addUserInfo_result() {
    }

    public addUserInfo_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserInfo_result(addUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public addUserInfo_result deepCopy() {
      return new addUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public addUserInfo_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserInfo_result)
        return this.equals((addUserInfo_result)that);
      return false;
    }

    public boolean equals(addUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUserInfo_resultStandardScheme getScheme() {
        return new addUserInfo_resultStandardScheme();
      }
    }

    private static class addUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addUserInfo_resultTupleScheme getScheme() {
        return new addUserInfo_resultTupleScheme();
      }
    }

    private static class addUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserInfo_args implements org.apache.thrift.TBase<updateUserInfo_args, updateUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserInfo_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserInfo_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public int userId; // required
    public com.thrift.common.body.UserInfo userInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_ID((short)2, "userId"),
      USER_INFO((short)3, "userInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_ID
            return USER_ID;
          case 3: // USER_INFO
            return USER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserInfo_args.class, metaDataMap);
    }

    public updateUserInfo_args() {
    }

    public updateUserInfo_args(
      com.thrift.common.head.UDCHead serverHead,
      int userId,
      com.thrift.common.body.UserInfo userInfo)
    {
      this();
      this.serverHead = serverHead;
      this.userId = userId;
      setUserIdIsSet(true);
      this.userInfo = userInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserInfo_args(updateUserInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      this.userId = other.userId;
      if (other.isSetUserInfo()) {
        this.userInfo = new com.thrift.common.body.UserInfo(other.userInfo);
      }
    }

    public updateUserInfo_args deepCopy() {
      return new updateUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.userInfo = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public updateUserInfo_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public updateUserInfo_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public com.thrift.common.body.UserInfo getUserInfo() {
      return this.userInfo;
    }

    public updateUserInfo_args setUserInfo(com.thrift.common.body.UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    public void unsetUserInfo() {
      this.userInfo = null;
    }

    /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserInfo() {
      return this.userInfo != null;
    }

    public void setUserInfoIsSet(boolean value) {
      if (!value) {
        this.userInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case USER_INFO:
        if (value == null) {
          unsetUserInfo();
        } else {
          setUserInfo((com.thrift.common.body.UserInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_ID:
        return getUserId();

      case USER_INFO:
        return getUserInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_ID:
        return isSetUserId();
      case USER_INFO:
        return isSetUserInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserInfo_args)
        return this.equals((updateUserInfo_args)that);
      return false;
    }

    public boolean equals(updateUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_userInfo = true && this.isSetUserInfo();
      boolean that_present_userInfo = true && that.isSetUserInfo();
      if (this_present_userInfo || that_present_userInfo) {
        if (!(this_present_userInfo && that_present_userInfo))
          return false;
        if (!this.userInfo.equals(that.userInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
      if (isSetUserInfo())
        hashCode = hashCode * 8191 + userInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserInfo_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
      if (userInfo != null) {
        userInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_argsStandardScheme getScheme() {
        return new updateUserInfo_argsStandardScheme();
      }
    }

    private static class updateUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userInfo = new com.thrift.common.body.UserInfo();
                struct.userInfo.read(iprot);
                struct.setUserInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.userInfo != null) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.userInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_argsTupleScheme getScheme() {
        return new updateUserInfo_argsTupleScheme();
      }
    }

    private static class updateUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetUserInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetUserInfo()) {
          struct.userInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userInfo = new com.thrift.common.body.UserInfo();
          struct.userInfo.read(iprot);
          struct.setUserInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserInfo_result implements org.apache.thrift.TBase<updateUserInfo_result, updateUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserInfo_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserInfo_result.class, metaDataMap);
    }

    public updateUserInfo_result() {
    }

    public updateUserInfo_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserInfo_result(updateUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public updateUserInfo_result deepCopy() {
      return new updateUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public updateUserInfo_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserInfo_result)
        return this.equals((updateUserInfo_result)that);
      return false;
    }

    public boolean equals(updateUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_resultStandardScheme getScheme() {
        return new updateUserInfo_resultStandardScheme();
      }
    }

    private static class updateUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_resultTupleScheme getScheme() {
        return new updateUserInfo_resultTupleScheme();
      }
    }

    private static class updateUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updatePasswordByPhone_args implements org.apache.thrift.TBase<updatePasswordByPhone_args, updatePasswordByPhone_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePasswordByPhone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePasswordByPhone_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePasswordByPhone_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePasswordByPhone_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.lang.String phone; // required
    public java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      PHONE((short)2, "phone"),
      PASSWORD((short)3, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // PHONE
            return PHONE;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePasswordByPhone_args.class, metaDataMap);
    }

    public updatePasswordByPhone_args() {
    }

    public updatePasswordByPhone_args(
      com.thrift.common.head.UDCHead serverHead,
      java.lang.String phone,
      java.lang.String password)
    {
      this();
      this.serverHead = serverHead;
      this.phone = phone;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePasswordByPhone_args(updatePasswordByPhone_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public updatePasswordByPhone_args deepCopy() {
      return new updatePasswordByPhone_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.phone = null;
      this.password = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public updatePasswordByPhone_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public java.lang.String getPhone() {
      return this.phone;
    }

    public updatePasswordByPhone_args setPhone(java.lang.String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public updatePasswordByPhone_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case PHONE:
        return getPhone();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case PHONE:
        return isSetPhone();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePasswordByPhone_args)
        return this.equals((updatePasswordByPhone_args)that);
      return false;
    }

    public boolean equals(updatePasswordByPhone_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
      if (isSetPhone())
        hashCode = hashCode * 8191 + phone.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updatePasswordByPhone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePasswordByPhone_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePasswordByPhone_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPhone_argsStandardScheme getScheme() {
        return new updatePasswordByPhone_argsStandardScheme();
      }
    }

    private static class updatePasswordByPhone_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePasswordByPhone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePasswordByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePasswordByPhone_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePasswordByPhone_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPhone_argsTupleScheme getScheme() {
        return new updatePasswordByPhone_argsTupleScheme();
      }
    }

    private static class updatePasswordByPhone_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePasswordByPhone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetPhone()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updatePasswordByPhone_result implements org.apache.thrift.TBase<updatePasswordByPhone_result, updatePasswordByPhone_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePasswordByPhone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePasswordByPhone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePasswordByPhone_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePasswordByPhone_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePasswordByPhone_result.class, metaDataMap);
    }

    public updatePasswordByPhone_result() {
    }

    public updatePasswordByPhone_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePasswordByPhone_result(updatePasswordByPhone_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public updatePasswordByPhone_result deepCopy() {
      return new updatePasswordByPhone_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public updatePasswordByPhone_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePasswordByPhone_result)
        return this.equals((updatePasswordByPhone_result)that);
      return false;
    }

    public boolean equals(updatePasswordByPhone_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updatePasswordByPhone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePasswordByPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePasswordByPhone_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPhone_resultStandardScheme getScheme() {
        return new updatePasswordByPhone_resultStandardScheme();
      }
    }

    private static class updatePasswordByPhone_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePasswordByPhone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePasswordByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePasswordByPhone_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePasswordByPhone_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPhone_resultTupleScheme getScheme() {
        return new updatePasswordByPhone_resultTupleScheme();
      }
    }

    private static class updatePasswordByPhone_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePasswordByPhone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updatePasswordByPassword_args implements org.apache.thrift.TBase<updatePasswordByPassword_args, updatePasswordByPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePasswordByPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePasswordByPassword_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePasswordByPassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePasswordByPassword_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public com.thrift.common.body.UserInfo userInfo; // required
    public java.lang.String newPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_INFO((short)2, "userInfo"),
      NEW_PASSWORD((short)3, "newPassword");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_INFO
            return USER_INFO;
          case 3: // NEW_PASSWORD
            return NEW_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfo.class)));
      tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePasswordByPassword_args.class, metaDataMap);
    }

    public updatePasswordByPassword_args() {
    }

    public updatePasswordByPassword_args(
      com.thrift.common.head.UDCHead serverHead,
      com.thrift.common.body.UserInfo userInfo,
      java.lang.String newPassword)
    {
      this();
      this.serverHead = serverHead;
      this.userInfo = userInfo;
      this.newPassword = newPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePasswordByPassword_args(updatePasswordByPassword_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetUserInfo()) {
        this.userInfo = new com.thrift.common.body.UserInfo(other.userInfo);
      }
      if (other.isSetNewPassword()) {
        this.newPassword = other.newPassword;
      }
    }

    public updatePasswordByPassword_args deepCopy() {
      return new updatePasswordByPassword_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.userInfo = null;
      this.newPassword = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public updatePasswordByPassword_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public com.thrift.common.body.UserInfo getUserInfo() {
      return this.userInfo;
    }

    public updatePasswordByPassword_args setUserInfo(com.thrift.common.body.UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    public void unsetUserInfo() {
      this.userInfo = null;
    }

    /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserInfo() {
      return this.userInfo != null;
    }

    public void setUserInfoIsSet(boolean value) {
      if (!value) {
        this.userInfo = null;
      }
    }

    public java.lang.String getNewPassword() {
      return this.newPassword;
    }

    public updatePasswordByPassword_args setNewPassword(java.lang.String newPassword) {
      this.newPassword = newPassword;
      return this;
    }

    public void unsetNewPassword() {
      this.newPassword = null;
    }

    /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPassword() {
      return this.newPassword != null;
    }

    public void setNewPasswordIsSet(boolean value) {
      if (!value) {
        this.newPassword = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_INFO:
        if (value == null) {
          unsetUserInfo();
        } else {
          setUserInfo((com.thrift.common.body.UserInfo)value);
        }
        break;

      case NEW_PASSWORD:
        if (value == null) {
          unsetNewPassword();
        } else {
          setNewPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_INFO:
        return getUserInfo();

      case NEW_PASSWORD:
        return getNewPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_INFO:
        return isSetUserInfo();
      case NEW_PASSWORD:
        return isSetNewPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePasswordByPassword_args)
        return this.equals((updatePasswordByPassword_args)that);
      return false;
    }

    public boolean equals(updatePasswordByPassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userInfo = true && this.isSetUserInfo();
      boolean that_present_userInfo = true && that.isSetUserInfo();
      if (this_present_userInfo || that_present_userInfo) {
        if (!(this_present_userInfo && that_present_userInfo))
          return false;
        if (!this.userInfo.equals(that.userInfo))
          return false;
      }

      boolean this_present_newPassword = true && this.isSetNewPassword();
      boolean that_present_newPassword = true && that.isSetNewPassword();
      if (this_present_newPassword || that_present_newPassword) {
        if (!(this_present_newPassword && that_present_newPassword))
          return false;
        if (!this.newPassword.equals(that.newPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
      if (isSetUserInfo())
        hashCode = hashCode * 8191 + userInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewPassword()) ? 131071 : 524287);
      if (isSetNewPassword())
        hashCode = hashCode * 8191 + newPassword.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updatePasswordByPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePasswordByPassword_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPassword:");
      if (this.newPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.newPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
      if (userInfo != null) {
        userInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePasswordByPassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPassword_argsStandardScheme getScheme() {
        return new updatePasswordByPassword_argsStandardScheme();
      }
    }

    private static class updatePasswordByPassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePasswordByPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePasswordByPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userInfo = new com.thrift.common.body.UserInfo();
                struct.userInfo.read(iprot);
                struct.setUserInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPassword = iprot.readString();
                struct.setNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePasswordByPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userInfo != null) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.userInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newPassword != null) {
          oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.newPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePasswordByPassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPassword_argsTupleScheme getScheme() {
        return new updatePasswordByPassword_argsTupleScheme();
      }
    }

    private static class updatePasswordByPassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePasswordByPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserInfo()) {
          optionals.set(1);
        }
        if (struct.isSetNewPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserInfo()) {
          struct.userInfo.write(oprot);
        }
        if (struct.isSetNewPassword()) {
          oprot.writeString(struct.newPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userInfo = new com.thrift.common.body.UserInfo();
          struct.userInfo.read(iprot);
          struct.setUserInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newPassword = iprot.readString();
          struct.setNewPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updatePasswordByPassword_result implements org.apache.thrift.TBase<updatePasswordByPassword_result, updatePasswordByPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePasswordByPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePasswordByPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePasswordByPassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePasswordByPassword_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePasswordByPassword_result.class, metaDataMap);
    }

    public updatePasswordByPassword_result() {
    }

    public updatePasswordByPassword_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePasswordByPassword_result(updatePasswordByPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public updatePasswordByPassword_result deepCopy() {
      return new updatePasswordByPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public updatePasswordByPassword_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePasswordByPassword_result)
        return this.equals((updatePasswordByPassword_result)that);
      return false;
    }

    public boolean equals(updatePasswordByPassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updatePasswordByPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePasswordByPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePasswordByPassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPassword_resultStandardScheme getScheme() {
        return new updatePasswordByPassword_resultStandardScheme();
      }
    }

    private static class updatePasswordByPassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePasswordByPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePasswordByPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePasswordByPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePasswordByPassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePasswordByPassword_resultTupleScheme getScheme() {
        return new updatePasswordByPassword_resultTupleScheme();
      }
    }

    private static class updatePasswordByPassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePasswordByPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePasswordByPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSystemUser_args implements org.apache.thrift.TBase<deleteSystemUser_args, deleteSystemUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSystemUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSystemUser_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SYSTEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("systemType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSystemUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSystemUser_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public int userId; // required
    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType systemType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_ID((short)2, "userId"),
      /**
       * 
       * @see com.thrift.common.define.AppType
       */
      SYSTEM_TYPE((short)3, "systemType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SYSTEM_TYPE
            return SYSTEM_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYSTEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("systemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.AppType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSystemUser_args.class, metaDataMap);
    }

    public deleteSystemUser_args() {
    }

    public deleteSystemUser_args(
      com.thrift.common.head.UDCHead serverHead,
      int userId,
      com.thrift.common.define.AppType systemType)
    {
      this();
      this.serverHead = serverHead;
      this.userId = userId;
      setUserIdIsSet(true);
      this.systemType = systemType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSystemUser_args(deleteSystemUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      this.userId = other.userId;
      if (other.isSetSystemType()) {
        this.systemType = other.systemType;
      }
    }

    public deleteSystemUser_args deepCopy() {
      return new deleteSystemUser_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.systemType = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public deleteSystemUser_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public deleteSystemUser_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType getSystemType() {
      return this.systemType;
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public deleteSystemUser_args setSystemType(com.thrift.common.define.AppType systemType) {
      this.systemType = systemType;
      return this;
    }

    public void unsetSystemType() {
      this.systemType = null;
    }

    /** Returns true if field systemType is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemType() {
      return this.systemType != null;
    }

    public void setSystemTypeIsSet(boolean value) {
      if (!value) {
        this.systemType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case SYSTEM_TYPE:
        if (value == null) {
          unsetSystemType();
        } else {
          setSystemType((com.thrift.common.define.AppType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_ID:
        return getUserId();

      case SYSTEM_TYPE:
        return getSystemType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_ID:
        return isSetUserId();
      case SYSTEM_TYPE:
        return isSetSystemType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSystemUser_args)
        return this.equals((deleteSystemUser_args)that);
      return false;
    }

    public boolean equals(deleteSystemUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_systemType = true && this.isSetSystemType();
      boolean that_present_systemType = true && that.isSetSystemType();
      if (this_present_systemType || that_present_systemType) {
        if (!(this_present_systemType && that_present_systemType))
          return false;
        if (!this.systemType.equals(that.systemType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetSystemType()) ? 131071 : 524287);
      if (isSetSystemType())
        hashCode = hashCode * 8191 + systemType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSystemUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSystemType()).compareTo(other.isSetSystemType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemType, other.systemType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteSystemUser_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemType:");
      if (this.systemType == null) {
        sb.append("null");
      } else {
        sb.append(this.systemType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSystemUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSystemUser_argsStandardScheme getScheme() {
        return new deleteSystemUser_argsStandardScheme();
      }
    }

    private static class deleteSystemUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSystemUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSystemUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYSTEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.systemType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
                struct.setSystemTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSystemUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.systemType != null) {
          oprot.writeFieldBegin(SYSTEM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.systemType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSystemUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSystemUser_argsTupleScheme getScheme() {
        return new deleteSystemUser_argsTupleScheme();
      }
    }

    private static class deleteSystemUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSystemUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSystemUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetSystemType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetSystemType()) {
          oprot.writeI32(struct.systemType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSystemUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.systemType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
          struct.setSystemTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSystemUser_result implements org.apache.thrift.TBase<deleteSystemUser_result, deleteSystemUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSystemUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSystemUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSystemUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSystemUser_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSystemUser_result.class, metaDataMap);
    }

    public deleteSystemUser_result() {
    }

    public deleteSystemUser_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSystemUser_result(deleteSystemUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public deleteSystemUser_result deepCopy() {
      return new deleteSystemUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public deleteSystemUser_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSystemUser_result)
        return this.equals((deleteSystemUser_result)that);
      return false;
    }

    public boolean equals(deleteSystemUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSystemUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteSystemUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSystemUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSystemUser_resultStandardScheme getScheme() {
        return new deleteSystemUser_resultStandardScheme();
      }
    }

    private static class deleteSystemUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSystemUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSystemUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSystemUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSystemUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSystemUser_resultTupleScheme getScheme() {
        return new deleteSystemUser_resultTupleScheme();
      }
    }

    private static class deleteSystemUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSystemUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSystemUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSystemUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userRelationToSystem_args implements org.apache.thrift.TBase<userRelationToSystem_args, userRelationToSystem_args._Fields>, java.io.Serializable, Cloneable, Comparable<userRelationToSystem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRelationToSystem_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SYSTEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("systemType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userRelationToSystem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userRelationToSystem_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public int userId; // required
    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType systemType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_ID((short)2, "userId"),
      /**
       * 
       * @see com.thrift.common.define.AppType
       */
      SYSTEM_TYPE((short)3, "systemType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SYSTEM_TYPE
            return SYSTEM_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYSTEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("systemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.AppType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRelationToSystem_args.class, metaDataMap);
    }

    public userRelationToSystem_args() {
    }

    public userRelationToSystem_args(
      com.thrift.common.head.UDCHead serverHead,
      int userId,
      com.thrift.common.define.AppType systemType)
    {
      this();
      this.serverHead = serverHead;
      this.userId = userId;
      setUserIdIsSet(true);
      this.systemType = systemType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRelationToSystem_args(userRelationToSystem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      this.userId = other.userId;
      if (other.isSetSystemType()) {
        this.systemType = other.systemType;
      }
    }

    public userRelationToSystem_args deepCopy() {
      return new userRelationToSystem_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.systemType = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public userRelationToSystem_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public userRelationToSystem_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType getSystemType() {
      return this.systemType;
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public userRelationToSystem_args setSystemType(com.thrift.common.define.AppType systemType) {
      this.systemType = systemType;
      return this;
    }

    public void unsetSystemType() {
      this.systemType = null;
    }

    /** Returns true if field systemType is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemType() {
      return this.systemType != null;
    }

    public void setSystemTypeIsSet(boolean value) {
      if (!value) {
        this.systemType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case SYSTEM_TYPE:
        if (value == null) {
          unsetSystemType();
        } else {
          setSystemType((com.thrift.common.define.AppType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_ID:
        return getUserId();

      case SYSTEM_TYPE:
        return getSystemType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_ID:
        return isSetUserId();
      case SYSTEM_TYPE:
        return isSetSystemType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userRelationToSystem_args)
        return this.equals((userRelationToSystem_args)that);
      return false;
    }

    public boolean equals(userRelationToSystem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_systemType = true && this.isSetSystemType();
      boolean that_present_systemType = true && that.isSetSystemType();
      if (this_present_systemType || that_present_systemType) {
        if (!(this_present_systemType && that_present_systemType))
          return false;
        if (!this.systemType.equals(that.systemType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetSystemType()) ? 131071 : 524287);
      if (isSetSystemType())
        hashCode = hashCode * 8191 + systemType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(userRelationToSystem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSystemType()).compareTo(other.isSetSystemType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemType, other.systemType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userRelationToSystem_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemType:");
      if (this.systemType == null) {
        sb.append("null");
      } else {
        sb.append(this.systemType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRelationToSystem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRelationToSystem_argsStandardScheme getScheme() {
        return new userRelationToSystem_argsStandardScheme();
      }
    }

    private static class userRelationToSystem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<userRelationToSystem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRelationToSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYSTEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.systemType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
                struct.setSystemTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRelationToSystem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.systemType != null) {
          oprot.writeFieldBegin(SYSTEM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.systemType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRelationToSystem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRelationToSystem_argsTupleScheme getScheme() {
        return new userRelationToSystem_argsTupleScheme();
      }
    }

    private static class userRelationToSystem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<userRelationToSystem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRelationToSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetSystemType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetSystemType()) {
          oprot.writeI32(struct.systemType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRelationToSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.systemType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
          struct.setSystemTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class userRelationToSystem_result implements org.apache.thrift.TBase<userRelationToSystem_result, userRelationToSystem_result._Fields>, java.io.Serializable, Cloneable, Comparable<userRelationToSystem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userRelationToSystem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new userRelationToSystem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new userRelationToSystem_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userRelationToSystem_result.class, metaDataMap);
    }

    public userRelationToSystem_result() {
    }

    public userRelationToSystem_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userRelationToSystem_result(userRelationToSystem_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public userRelationToSystem_result deepCopy() {
      return new userRelationToSystem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public userRelationToSystem_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof userRelationToSystem_result)
        return this.equals((userRelationToSystem_result)that);
      return false;
    }

    public boolean equals(userRelationToSystem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(userRelationToSystem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("userRelationToSystem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userRelationToSystem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRelationToSystem_resultStandardScheme getScheme() {
        return new userRelationToSystem_resultStandardScheme();
      }
    }

    private static class userRelationToSystem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<userRelationToSystem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userRelationToSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userRelationToSystem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userRelationToSystem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public userRelationToSystem_resultTupleScheme getScheme() {
        return new userRelationToSystem_resultTupleScheme();
      }
    }

    private static class userRelationToSystem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<userRelationToSystem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userRelationToSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userRelationToSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkInvalidTokenIdList_args implements org.apache.thrift.TBase<checkInvalidTokenIdList_args, checkInvalidTokenIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkInvalidTokenIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkInvalidTokenIdList_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkInvalidTokenIdList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkInvalidTokenIdList_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.util.List<java.lang.String> tokenIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      TOKEN_ID_LIST((short)2, "tokenIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // TOKEN_ID_LIST
            return TOKEN_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.TOKEN_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkInvalidTokenIdList_args.class, metaDataMap);
    }

    public checkInvalidTokenIdList_args() {
    }

    public checkInvalidTokenIdList_args(
      com.thrift.common.head.UDCHead serverHead,
      java.util.List<java.lang.String> tokenIdList)
    {
      this();
      this.serverHead = serverHead;
      this.tokenIdList = tokenIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkInvalidTokenIdList_args(checkInvalidTokenIdList_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetTokenIdList()) {
        java.util.List<java.lang.String> __this__tokenIdList = new java.util.ArrayList<java.lang.String>(other.tokenIdList);
        this.tokenIdList = __this__tokenIdList;
      }
    }

    public checkInvalidTokenIdList_args deepCopy() {
      return new checkInvalidTokenIdList_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.tokenIdList = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public checkInvalidTokenIdList_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public int getTokenIdListSize() {
      return (this.tokenIdList == null) ? 0 : this.tokenIdList.size();
    }

    public java.util.Iterator<java.lang.String> getTokenIdListIterator() {
      return (this.tokenIdList == null) ? null : this.tokenIdList.iterator();
    }

    public void addToTokenIdList(java.lang.String elem) {
      if (this.tokenIdList == null) {
        this.tokenIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.tokenIdList.add(elem);
    }

    public java.util.List<java.lang.String> getTokenIdList() {
      return this.tokenIdList;
    }

    public checkInvalidTokenIdList_args setTokenIdList(java.util.List<java.lang.String> tokenIdList) {
      this.tokenIdList = tokenIdList;
      return this;
    }

    public void unsetTokenIdList() {
      this.tokenIdList = null;
    }

    /** Returns true if field tokenIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenIdList() {
      return this.tokenIdList != null;
    }

    public void setTokenIdListIsSet(boolean value) {
      if (!value) {
        this.tokenIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case TOKEN_ID_LIST:
        if (value == null) {
          unsetTokenIdList();
        } else {
          setTokenIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case TOKEN_ID_LIST:
        return getTokenIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case TOKEN_ID_LIST:
        return isSetTokenIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkInvalidTokenIdList_args)
        return this.equals((checkInvalidTokenIdList_args)that);
      return false;
    }

    public boolean equals(checkInvalidTokenIdList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_tokenIdList = true && this.isSetTokenIdList();
      boolean that_present_tokenIdList = true && that.isSetTokenIdList();
      if (this_present_tokenIdList || that_present_tokenIdList) {
        if (!(this_present_tokenIdList && that_present_tokenIdList))
          return false;
        if (!this.tokenIdList.equals(that.tokenIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenIdList()) ? 131071 : 524287);
      if (isSetTokenIdList())
        hashCode = hashCode * 8191 + tokenIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkInvalidTokenIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenIdList()).compareTo(other.isSetTokenIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenIdList, other.tokenIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkInvalidTokenIdList_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenIdList:");
      if (this.tokenIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkInvalidTokenIdList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInvalidTokenIdList_argsStandardScheme getScheme() {
        return new checkInvalidTokenIdList_argsStandardScheme();
      }
    }

    private static class checkInvalidTokenIdList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkInvalidTokenIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkInvalidTokenIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.tokenIdList = new java.util.ArrayList<java.lang.String>(_list32.size);
                  java.lang.String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.tokenIdList.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setTokenIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkInvalidTokenIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenIdList != null) {
          oprot.writeFieldBegin(TOKEN_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tokenIdList.size()));
            for (java.lang.String _iter35 : struct.tokenIdList)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkInvalidTokenIdList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInvalidTokenIdList_argsTupleScheme getScheme() {
        return new checkInvalidTokenIdList_argsTupleScheme();
      }
    }

    private static class checkInvalidTokenIdList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkInvalidTokenIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkInvalidTokenIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetTokenIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetTokenIdList()) {
          {
            oprot.writeI32(struct.tokenIdList.size());
            for (java.lang.String _iter36 : struct.tokenIdList)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkInvalidTokenIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tokenIdList = new java.util.ArrayList<java.lang.String>(_list37.size);
            java.lang.String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.tokenIdList.add(_elem38);
            }
          }
          struct.setTokenIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkInvalidTokenIdList_result implements org.apache.thrift.TBase<checkInvalidTokenIdList_result, checkInvalidTokenIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkInvalidTokenIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkInvalidTokenIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkInvalidTokenIdList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkInvalidTokenIdList_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInvalidTokenIdResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInvalidTokenIdResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkInvalidTokenIdList_result.class, metaDataMap);
    }

    public checkInvalidTokenIdList_result() {
    }

    public checkInvalidTokenIdList_result(
      com.thrift.common.body.UserInvalidTokenIdResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkInvalidTokenIdList_result(checkInvalidTokenIdList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInvalidTokenIdResp(other.success);
      }
    }

    public checkInvalidTokenIdList_result deepCopy() {
      return new checkInvalidTokenIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInvalidTokenIdResp getSuccess() {
      return this.success;
    }

    public checkInvalidTokenIdList_result setSuccess(com.thrift.common.body.UserInvalidTokenIdResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInvalidTokenIdResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkInvalidTokenIdList_result)
        return this.equals((checkInvalidTokenIdList_result)that);
      return false;
    }

    public boolean equals(checkInvalidTokenIdList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkInvalidTokenIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkInvalidTokenIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkInvalidTokenIdList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInvalidTokenIdList_resultStandardScheme getScheme() {
        return new checkInvalidTokenIdList_resultStandardScheme();
      }
    }

    private static class checkInvalidTokenIdList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkInvalidTokenIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkInvalidTokenIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInvalidTokenIdResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkInvalidTokenIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkInvalidTokenIdList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInvalidTokenIdList_resultTupleScheme getScheme() {
        return new checkInvalidTokenIdList_resultTupleScheme();
      }
    }

    private static class checkInvalidTokenIdList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkInvalidTokenIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkInvalidTokenIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkInvalidTokenIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInvalidTokenIdResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTemporaryTokenId_args implements org.apache.thrift.TBase<getTemporaryTokenId_args, getTemporaryTokenId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTemporaryTokenId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemporaryTokenId_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemporaryTokenId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemporaryTokenId_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemporaryTokenId_args.class, metaDataMap);
    }

    public getTemporaryTokenId_args() {
    }

    public getTemporaryTokenId_args(
      com.thrift.common.head.UDCHead serverHead)
    {
      this();
      this.serverHead = serverHead;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemporaryTokenId_args(getTemporaryTokenId_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
    }

    public getTemporaryTokenId_args deepCopy() {
      return new getTemporaryTokenId_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getTemporaryTokenId_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTemporaryTokenId_args)
        return this.equals((getTemporaryTokenId_args)that);
      return false;
    }

    public boolean equals(getTemporaryTokenId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemporaryTokenId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemporaryTokenId_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemporaryTokenId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTemporaryTokenId_argsStandardScheme getScheme() {
        return new getTemporaryTokenId_argsStandardScheme();
      }
    }

    private static class getTemporaryTokenId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemporaryTokenId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemporaryTokenId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTemporaryTokenId_argsTupleScheme getScheme() {
        return new getTemporaryTokenId_argsTupleScheme();
      }
    }

    private static class getTemporaryTokenId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemporaryTokenId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTemporaryTokenId_result implements org.apache.thrift.TBase<getTemporaryTokenId_result, getTemporaryTokenId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTemporaryTokenId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemporaryTokenId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemporaryTokenId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemporaryTokenId_resultTupleSchemeFactory();

    public com.thrift.common.body.UserLoginResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserLoginResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemporaryTokenId_result.class, metaDataMap);
    }

    public getTemporaryTokenId_result() {
    }

    public getTemporaryTokenId_result(
      com.thrift.common.body.UserLoginResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemporaryTokenId_result(getTemporaryTokenId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserLoginResp(other.success);
      }
    }

    public getTemporaryTokenId_result deepCopy() {
      return new getTemporaryTokenId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserLoginResp getSuccess() {
      return this.success;
    }

    public getTemporaryTokenId_result setSuccess(com.thrift.common.body.UserLoginResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserLoginResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTemporaryTokenId_result)
        return this.equals((getTemporaryTokenId_result)that);
      return false;
    }

    public boolean equals(getTemporaryTokenId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemporaryTokenId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemporaryTokenId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemporaryTokenId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTemporaryTokenId_resultStandardScheme getScheme() {
        return new getTemporaryTokenId_resultStandardScheme();
      }
    }

    private static class getTemporaryTokenId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemporaryTokenId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserLoginResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemporaryTokenId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTemporaryTokenId_resultTupleScheme getScheme() {
        return new getTemporaryTokenId_resultTupleScheme();
      }
    }

    private static class getTemporaryTokenId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemporaryTokenId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserLoginResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class destroyTemporaryTokenId_args implements org.apache.thrift.TBase<destroyTemporaryTokenId_args, destroyTemporaryTokenId_args._Fields>, java.io.Serializable, Cloneable, Comparable<destroyTemporaryTokenId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyTemporaryTokenId_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new destroyTemporaryTokenId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new destroyTemporaryTokenId_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public java.lang.String tokenId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      TOKEN_ID((short)2, "tokenId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // TOKEN_ID
            return TOKEN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.TOKEN_ID, new org.apache.thrift.meta_data.FieldMetaData("tokenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyTemporaryTokenId_args.class, metaDataMap);
    }

    public destroyTemporaryTokenId_args() {
    }

    public destroyTemporaryTokenId_args(
      com.thrift.common.head.UDCHead serverHead,
      java.lang.String tokenId)
    {
      this();
      this.serverHead = serverHead;
      this.tokenId = tokenId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyTemporaryTokenId_args(destroyTemporaryTokenId_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetTokenId()) {
        this.tokenId = other.tokenId;
      }
    }

    public destroyTemporaryTokenId_args deepCopy() {
      return new destroyTemporaryTokenId_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.tokenId = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public destroyTemporaryTokenId_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public java.lang.String getTokenId() {
      return this.tokenId;
    }

    public destroyTemporaryTokenId_args setTokenId(java.lang.String tokenId) {
      this.tokenId = tokenId;
      return this;
    }

    public void unsetTokenId() {
      this.tokenId = null;
    }

    /** Returns true if field tokenId is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenId() {
      return this.tokenId != null;
    }

    public void setTokenIdIsSet(boolean value) {
      if (!value) {
        this.tokenId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case TOKEN_ID:
        if (value == null) {
          unsetTokenId();
        } else {
          setTokenId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case TOKEN_ID:
        return getTokenId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case TOKEN_ID:
        return isSetTokenId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyTemporaryTokenId_args)
        return this.equals((destroyTemporaryTokenId_args)that);
      return false;
    }

    public boolean equals(destroyTemporaryTokenId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_tokenId = true && this.isSetTokenId();
      boolean that_present_tokenId = true && that.isSetTokenId();
      if (this_present_tokenId || that_present_tokenId) {
        if (!(this_present_tokenId && that_present_tokenId))
          return false;
        if (!this.tokenId.equals(that.tokenId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenId()) ? 131071 : 524287);
      if (isSetTokenId())
        hashCode = hashCode * 8191 + tokenId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(destroyTemporaryTokenId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenId()).compareTo(other.isSetTokenId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenId, other.tokenId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("destroyTemporaryTokenId_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenId:");
      if (this.tokenId == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyTemporaryTokenId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyTemporaryTokenId_argsStandardScheme getScheme() {
        return new destroyTemporaryTokenId_argsStandardScheme();
      }
    }

    private static class destroyTemporaryTokenId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<destroyTemporaryTokenId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tokenId = iprot.readString();
                struct.setTokenIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenId != null) {
          oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
          oprot.writeString(struct.tokenId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyTemporaryTokenId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyTemporaryTokenId_argsTupleScheme getScheme() {
        return new destroyTemporaryTokenId_argsTupleScheme();
      }
    }

    private static class destroyTemporaryTokenId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<destroyTemporaryTokenId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetTokenId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetTokenId()) {
          oprot.writeString(struct.tokenId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyTemporaryTokenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenId = iprot.readString();
          struct.setTokenIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class destroyTemporaryTokenId_result implements org.apache.thrift.TBase<destroyTemporaryTokenId_result, destroyTemporaryTokenId_result._Fields>, java.io.Serializable, Cloneable, Comparable<destroyTemporaryTokenId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyTemporaryTokenId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new destroyTemporaryTokenId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new destroyTemporaryTokenId_resultTupleSchemeFactory();

    public com.thrift.common.body.ResponseInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.ResponseInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyTemporaryTokenId_result.class, metaDataMap);
    }

    public destroyTemporaryTokenId_result() {
    }

    public destroyTemporaryTokenId_result(
      com.thrift.common.body.ResponseInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyTemporaryTokenId_result(destroyTemporaryTokenId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.ResponseInfo(other.success);
      }
    }

    public destroyTemporaryTokenId_result deepCopy() {
      return new destroyTemporaryTokenId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.ResponseInfo getSuccess() {
      return this.success;
    }

    public destroyTemporaryTokenId_result setSuccess(com.thrift.common.body.ResponseInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.ResponseInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyTemporaryTokenId_result)
        return this.equals((destroyTemporaryTokenId_result)that);
      return false;
    }

    public boolean equals(destroyTemporaryTokenId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(destroyTemporaryTokenId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("destroyTemporaryTokenId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyTemporaryTokenId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyTemporaryTokenId_resultStandardScheme getScheme() {
        return new destroyTemporaryTokenId_resultStandardScheme();
      }
    }

    private static class destroyTemporaryTokenId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<destroyTemporaryTokenId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.ResponseInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyTemporaryTokenId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyTemporaryTokenId_resultTupleScheme getScheme() {
        return new destroyTemporaryTokenId_resultTupleScheme();
      }
    }

    private static class destroyTemporaryTokenId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<destroyTemporaryTokenId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyTemporaryTokenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.ResponseInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkUserInfo_args implements org.apache.thrift.TBase<checkUserInfo_args, checkUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUserInfo_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkUserInfo_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    public com.thrift.common.body.UserInfo userInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      USER_INFO((short)2, "userInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // USER_INFO
            return USER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUserInfo_args.class, metaDataMap);
    }

    public checkUserInfo_args() {
    }

    public checkUserInfo_args(
      com.thrift.common.head.UDCHead serverHead,
      com.thrift.common.body.UserInfo userInfo)
    {
      this();
      this.serverHead = serverHead;
      this.userInfo = userInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserInfo_args(checkUserInfo_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetUserInfo()) {
        this.userInfo = new com.thrift.common.body.UserInfo(other.userInfo);
      }
    }

    public checkUserInfo_args deepCopy() {
      return new checkUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.userInfo = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public checkUserInfo_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    public com.thrift.common.body.UserInfo getUserInfo() {
      return this.userInfo;
    }

    public checkUserInfo_args setUserInfo(com.thrift.common.body.UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    public void unsetUserInfo() {
      this.userInfo = null;
    }

    /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetUserInfo() {
      return this.userInfo != null;
    }

    public void setUserInfoIsSet(boolean value) {
      if (!value) {
        this.userInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case USER_INFO:
        if (value == null) {
          unsetUserInfo();
        } else {
          setUserInfo((com.thrift.common.body.UserInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case USER_INFO:
        return getUserInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case USER_INFO:
        return isSetUserInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserInfo_args)
        return this.equals((checkUserInfo_args)that);
      return false;
    }

    public boolean equals(checkUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_userInfo = true && this.isSetUserInfo();
      boolean that_present_userInfo = true && that.isSetUserInfo();
      if (this_present_userInfo || that_present_userInfo) {
        if (!(this_present_userInfo && that_present_userInfo))
          return false;
        if (!this.userInfo.equals(that.userInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
      if (isSetUserInfo())
        hashCode = hashCode * 8191 + userInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkUserInfo_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userInfo:");
      if (this.userInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
      if (userInfo != null) {
        userInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserInfo_argsStandardScheme getScheme() {
        return new checkUserInfo_argsStandardScheme();
      }
    }

    private static class checkUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userInfo = new com.thrift.common.body.UserInfo();
                struct.userInfo.read(iprot);
                struct.setUserInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userInfo != null) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.userInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserInfo_argsTupleScheme getScheme() {
        return new checkUserInfo_argsTupleScheme();
      }
    }

    private static class checkUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetUserInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetUserInfo()) {
          struct.userInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userInfo = new com.thrift.common.body.UserInfo();
          struct.userInfo.read(iprot);
          struct.setUserInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkUserInfo_result implements org.apache.thrift.TBase<checkUserInfo_result, checkUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkUserInfo_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUserInfo_result.class, metaDataMap);
    }

    public checkUserInfo_result() {
    }

    public checkUserInfo_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserInfo_result(checkUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public checkUserInfo_result deepCopy() {
      return new checkUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public checkUserInfo_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserInfo_result)
        return this.equals((checkUserInfo_result)that);
      return false;
    }

    public boolean equals(checkUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserInfo_resultStandardScheme getScheme() {
        return new checkUserInfo_resultStandardScheme();
      }
    }

    private static class checkUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserInfo_resultTupleScheme getScheme() {
        return new checkUserInfo_resultTupleScheme();
      }
    }

    private static class checkUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoListByPage_args implements org.apache.thrift.TBase<getUserInfoListByPage_args, getUserInfoListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoListByPage_args");

    private static final org.apache.thrift.protocol.TField SERVER_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoListByPage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoListByPage_argsTupleSchemeFactory();

    public com.thrift.common.head.UDCHead serverHead; // required
    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType appType; // required
    /**
     * 
     * @see com.thrift.common.define.UserType
     */
    public com.thrift.common.define.UserType userType; // required
    public com.thrift.common.body.PageInfo pageInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_HEAD((short)1, "serverHead"),
      /**
       * 
       * @see com.thrift.common.define.AppType
       */
      APP_TYPE((short)2, "appType"),
      /**
       * 
       * @see com.thrift.common.define.UserType
       */
      USER_TYPE((short)3, "userType"),
      PAGE_INFO((short)4, "pageInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_HEAD
            return SERVER_HEAD;
          case 2: // APP_TYPE
            return APP_TYPE;
          case 3: // USER_TYPE
            return USER_TYPE;
          case 4: // PAGE_INFO
            return PAGE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_HEAD, new org.apache.thrift.meta_data.FieldMetaData("serverHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.head.UDCHead.class)));
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.AppType.class)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.UserType.class)));
      tmpMap.put(_Fields.PAGE_INFO, new org.apache.thrift.meta_data.FieldMetaData("pageInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.PageInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoListByPage_args.class, metaDataMap);
    }

    public getUserInfoListByPage_args() {
    }

    public getUserInfoListByPage_args(
      com.thrift.common.head.UDCHead serverHead,
      com.thrift.common.define.AppType appType,
      com.thrift.common.define.UserType userType,
      com.thrift.common.body.PageInfo pageInfo)
    {
      this();
      this.serverHead = serverHead;
      this.appType = appType;
      this.userType = userType;
      this.pageInfo = pageInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoListByPage_args(getUserInfoListByPage_args other) {
      if (other.isSetServerHead()) {
        this.serverHead = new com.thrift.common.head.UDCHead(other.serverHead);
      }
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetUserType()) {
        this.userType = other.userType;
      }
      if (other.isSetPageInfo()) {
        this.pageInfo = new com.thrift.common.body.PageInfo(other.pageInfo);
      }
    }

    public getUserInfoListByPage_args deepCopy() {
      return new getUserInfoListByPage_args(this);
    }

    @Override
    public void clear() {
      this.serverHead = null;
      this.appType = null;
      this.userType = null;
      this.pageInfo = null;
    }

    public com.thrift.common.head.UDCHead getServerHead() {
      return this.serverHead;
    }

    public getUserInfoListByPage_args setServerHead(com.thrift.common.head.UDCHead serverHead) {
      this.serverHead = serverHead;
      return this;
    }

    public void unsetServerHead() {
      this.serverHead = null;
    }

    /** Returns true if field serverHead is set (has been assigned a value) and false otherwise */
    public boolean isSetServerHead() {
      return this.serverHead != null;
    }

    public void setServerHeadIsSet(boolean value) {
      if (!value) {
        this.serverHead = null;
      }
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public getUserInfoListByPage_args setAppType(com.thrift.common.define.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    /**
     * 
     * @see com.thrift.common.define.UserType
     */
    public com.thrift.common.define.UserType getUserType() {
      return this.userType;
    }

    /**
     * 
     * @see com.thrift.common.define.UserType
     */
    public getUserInfoListByPage_args setUserType(com.thrift.common.define.UserType userType) {
      this.userType = userType;
      return this;
    }

    public void unsetUserType() {
      this.userType = null;
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return this.userType != null;
    }

    public void setUserTypeIsSet(boolean value) {
      if (!value) {
        this.userType = null;
      }
    }

    public com.thrift.common.body.PageInfo getPageInfo() {
      return this.pageInfo;
    }

    public getUserInfoListByPage_args setPageInfo(com.thrift.common.body.PageInfo pageInfo) {
      this.pageInfo = pageInfo;
      return this;
    }

    public void unsetPageInfo() {
      this.pageInfo = null;
    }

    /** Returns true if field pageInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageInfo() {
      return this.pageInfo != null;
    }

    public void setPageInfoIsSet(boolean value) {
      if (!value) {
        this.pageInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVER_HEAD:
        if (value == null) {
          unsetServerHead();
        } else {
          setServerHead((com.thrift.common.head.UDCHead)value);
        }
        break;

      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.thrift.common.define.AppType)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((com.thrift.common.define.UserType)value);
        }
        break;

      case PAGE_INFO:
        if (value == null) {
          unsetPageInfo();
        } else {
          setPageInfo((com.thrift.common.body.PageInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_HEAD:
        return getServerHead();

      case APP_TYPE:
        return getAppType();

      case USER_TYPE:
        return getUserType();

      case PAGE_INFO:
        return getPageInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVER_HEAD:
        return isSetServerHead();
      case APP_TYPE:
        return isSetAppType();
      case USER_TYPE:
        return isSetUserType();
      case PAGE_INFO:
        return isSetPageInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoListByPage_args)
        return this.equals((getUserInfoListByPage_args)that);
      return false;
    }

    public boolean equals(getUserInfoListByPage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serverHead = true && this.isSetServerHead();
      boolean that_present_serverHead = true && that.isSetServerHead();
      if (this_present_serverHead || that_present_serverHead) {
        if (!(this_present_serverHead && that_present_serverHead))
          return false;
        if (!this.serverHead.equals(that.serverHead))
          return false;
      }

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_userType = true && this.isSetUserType();
      boolean that_present_userType = true && that.isSetUserType();
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (!this.userType.equals(that.userType))
          return false;
      }

      boolean this_present_pageInfo = true && this.isSetPageInfo();
      boolean that_present_pageInfo = true && that.isSetPageInfo();
      if (this_present_pageInfo || that_present_pageInfo) {
        if (!(this_present_pageInfo && that_present_pageInfo))
          return false;
        if (!this.pageInfo.equals(that.pageInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServerHead()) ? 131071 : 524287);
      if (isSetServerHead())
        hashCode = hashCode * 8191 + serverHead.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppType()) ? 131071 : 524287);
      if (isSetAppType())
        hashCode = hashCode * 8191 + appType.getValue();

      hashCode = hashCode * 8191 + ((isSetUserType()) ? 131071 : 524287);
      if (isSetUserType())
        hashCode = hashCode * 8191 + userType.getValue();

      hashCode = hashCode * 8191 + ((isSetPageInfo()) ? 131071 : 524287);
      if (isSetPageInfo())
        hashCode = hashCode * 8191 + pageInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServerHead()).compareTo(other.isSetServerHead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerHead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHead, other.serverHead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppType()).compareTo(other.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, other.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageInfo()).compareTo(other.isSetPageInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageInfo, other.pageInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoListByPage_args(");
      boolean first = true;

      sb.append("serverHead:");
      if (this.serverHead == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageInfo:");
      if (this.pageInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serverHead != null) {
        serverHead.validate();
      }
      if (pageInfo != null) {
        pageInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoListByPage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoListByPage_argsStandardScheme getScheme() {
        return new getUserInfoListByPage_argsStandardScheme();
      }
    }

    private static class getUserInfoListByPage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverHead = new com.thrift.common.head.UDCHead();
                struct.serverHead.read(iprot);
                struct.setServerHeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = com.thrift.common.define.UserType.findByValue(iprot.readI32());
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageInfo = new com.thrift.common.body.PageInfo();
                struct.pageInfo.read(iprot);
                struct.setPageInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serverHead != null) {
          oprot.writeFieldBegin(SERVER_HEAD_FIELD_DESC);
          struct.serverHead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.userType != null) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.userType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pageInfo != null) {
          oprot.writeFieldBegin(PAGE_INFO_FIELD_DESC);
          struct.pageInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoListByPage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoListByPage_argsTupleScheme getScheme() {
        return new getUserInfoListByPage_argsTupleScheme();
      }
    }

    private static class getUserInfoListByPage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServerHead()) {
          optionals.set(0);
        }
        if (struct.isSetAppType()) {
          optionals.set(1);
        }
        if (struct.isSetUserType()) {
          optionals.set(2);
        }
        if (struct.isSetPageInfo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServerHead()) {
          struct.serverHead.write(oprot);
        }
        if (struct.isSetAppType()) {
          oprot.writeI32(struct.appType.getValue());
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType.getValue());
        }
        if (struct.isSetPageInfo()) {
          struct.pageInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.serverHead = new com.thrift.common.head.UDCHead();
          struct.serverHead.read(iprot);
          struct.setServerHeadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
          struct.setAppTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userType = com.thrift.common.define.UserType.findByValue(iprot.readI32());
          struct.setUserTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageInfo = new com.thrift.common.body.PageInfo();
          struct.pageInfo.read(iprot);
          struct.setPageInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfoListByPage_result implements org.apache.thrift.TBase<getUserInfoListByPage_result, getUserInfoListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfoListByPage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfoListByPage_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoListByPage_result.class, metaDataMap);
    }

    public getUserInfoListByPage_result() {
    }

    public getUserInfoListByPage_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoListByPage_result(getUserInfoListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public getUserInfoListByPage_result deepCopy() {
      return new getUserInfoListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public getUserInfoListByPage_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoListByPage_result)
        return this.equals((getUserInfoListByPage_result)that);
      return false;
    }

    public boolean equals(getUserInfoListByPage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfoListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserInfoListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoListByPage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoListByPage_resultStandardScheme getScheme() {
        return new getUserInfoListByPage_resultStandardScheme();
      }
    }

    private static class getUserInfoListByPage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfoListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoListByPage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfoListByPage_resultTupleScheme getScheme() {
        return new getUserInfoListByPage_resultTupleScheme();
      }
    }

    private static class getUserInfoListByPage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfoListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRecentlyLoginUserList_args implements org.apache.thrift.TBase<getRecentlyLoginUserList_args, getRecentlyLoginUserList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentlyLoginUserList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentlyLoginUserList_args");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PLATFORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platformType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecentlyLoginUserList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecentlyLoginUserList_argsTupleSchemeFactory();

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType appType; // required
    /**
     * 
     * @see com.thrift.common.define.PlatformType
     */
    public com.thrift.common.define.PlatformType platformType; // required
    public com.thrift.common.body.PageInfo pageInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.thrift.common.define.AppType
       */
      APP_TYPE((short)1, "appType"),
      /**
       * 
       * @see com.thrift.common.define.PlatformType
       */
      PLATFORM_TYPE((short)2, "platformType"),
      PAGE_INFO((short)3, "pageInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_TYPE
            return APP_TYPE;
          case 2: // PLATFORM_TYPE
            return PLATFORM_TYPE;
          case 3: // PAGE_INFO
            return PAGE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.AppType.class)));
      tmpMap.put(_Fields.PLATFORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platformType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.thrift.common.define.PlatformType.class)));
      tmpMap.put(_Fields.PAGE_INFO, new org.apache.thrift.meta_data.FieldMetaData("pageInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.PageInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentlyLoginUserList_args.class, metaDataMap);
    }

    public getRecentlyLoginUserList_args() {
    }

    public getRecentlyLoginUserList_args(
      com.thrift.common.define.AppType appType,
      com.thrift.common.define.PlatformType platformType,
      com.thrift.common.body.PageInfo pageInfo)
    {
      this();
      this.appType = appType;
      this.platformType = platformType;
      this.pageInfo = pageInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentlyLoginUserList_args(getRecentlyLoginUserList_args other) {
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetPlatformType()) {
        this.platformType = other.platformType;
      }
      if (other.isSetPageInfo()) {
        this.pageInfo = new com.thrift.common.body.PageInfo(other.pageInfo);
      }
    }

    public getRecentlyLoginUserList_args deepCopy() {
      return new getRecentlyLoginUserList_args(this);
    }

    @Override
    public void clear() {
      this.appType = null;
      this.platformType = null;
      this.pageInfo = null;
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public com.thrift.common.define.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.thrift.common.define.AppType
     */
    public getRecentlyLoginUserList_args setAppType(com.thrift.common.define.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    /**
     * 
     * @see com.thrift.common.define.PlatformType
     */
    public com.thrift.common.define.PlatformType getPlatformType() {
      return this.platformType;
    }

    /**
     * 
     * @see com.thrift.common.define.PlatformType
     */
    public getRecentlyLoginUserList_args setPlatformType(com.thrift.common.define.PlatformType platformType) {
      this.platformType = platformType;
      return this;
    }

    public void unsetPlatformType() {
      this.platformType = null;
    }

    /** Returns true if field platformType is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformType() {
      return this.platformType != null;
    }

    public void setPlatformTypeIsSet(boolean value) {
      if (!value) {
        this.platformType = null;
      }
    }

    public com.thrift.common.body.PageInfo getPageInfo() {
      return this.pageInfo;
    }

    public getRecentlyLoginUserList_args setPageInfo(com.thrift.common.body.PageInfo pageInfo) {
      this.pageInfo = pageInfo;
      return this;
    }

    public void unsetPageInfo() {
      this.pageInfo = null;
    }

    /** Returns true if field pageInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageInfo() {
      return this.pageInfo != null;
    }

    public void setPageInfoIsSet(boolean value) {
      if (!value) {
        this.pageInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.thrift.common.define.AppType)value);
        }
        break;

      case PLATFORM_TYPE:
        if (value == null) {
          unsetPlatformType();
        } else {
          setPlatformType((com.thrift.common.define.PlatformType)value);
        }
        break;

      case PAGE_INFO:
        if (value == null) {
          unsetPageInfo();
        } else {
          setPageInfo((com.thrift.common.body.PageInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_TYPE:
        return getAppType();

      case PLATFORM_TYPE:
        return getPlatformType();

      case PAGE_INFO:
        return getPageInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case APP_TYPE:
        return isSetAppType();
      case PLATFORM_TYPE:
        return isSetPlatformType();
      case PAGE_INFO:
        return isSetPageInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentlyLoginUserList_args)
        return this.equals((getRecentlyLoginUserList_args)that);
      return false;
    }

    public boolean equals(getRecentlyLoginUserList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_platformType = true && this.isSetPlatformType();
      boolean that_present_platformType = true && that.isSetPlatformType();
      if (this_present_platformType || that_present_platformType) {
        if (!(this_present_platformType && that_present_platformType))
          return false;
        if (!this.platformType.equals(that.platformType))
          return false;
      }

      boolean this_present_pageInfo = true && this.isSetPageInfo();
      boolean that_present_pageInfo = true && that.isSetPageInfo();
      if (this_present_pageInfo || that_present_pageInfo) {
        if (!(this_present_pageInfo && that_present_pageInfo))
          return false;
        if (!this.pageInfo.equals(that.pageInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAppType()) ? 131071 : 524287);
      if (isSetAppType())
        hashCode = hashCode * 8191 + appType.getValue();

      hashCode = hashCode * 8191 + ((isSetPlatformType()) ? 131071 : 524287);
      if (isSetPlatformType())
        hashCode = hashCode * 8191 + platformType.getValue();

      hashCode = hashCode * 8191 + ((isSetPageInfo()) ? 131071 : 524287);
      if (isSetPageInfo())
        hashCode = hashCode * 8191 + pageInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRecentlyLoginUserList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAppType()).compareTo(other.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, other.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPlatformType()).compareTo(other.isSetPlatformType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformType, other.platformType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageInfo()).compareTo(other.isSetPageInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageInfo, other.pageInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecentlyLoginUserList_args(");
      boolean first = true;

      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformType:");
      if (this.platformType == null) {
        sb.append("null");
      } else {
        sb.append(this.platformType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageInfo:");
      if (this.pageInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageInfo != null) {
        pageInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecentlyLoginUserList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRecentlyLoginUserList_argsStandardScheme getScheme() {
        return new getRecentlyLoginUserList_argsStandardScheme();
      }
    }

    private static class getRecentlyLoginUserList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecentlyLoginUserList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentlyLoginUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLATFORM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.platformType = com.thrift.common.define.PlatformType.findByValue(iprot.readI32());
                struct.setPlatformTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageInfo = new com.thrift.common.body.PageInfo();
                struct.pageInfo.read(iprot);
                struct.setPageInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentlyLoginUserList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.platformType != null) {
          oprot.writeFieldBegin(PLATFORM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.platformType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pageInfo != null) {
          oprot.writeFieldBegin(PAGE_INFO_FIELD_DESC);
          struct.pageInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentlyLoginUserList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRecentlyLoginUserList_argsTupleScheme getScheme() {
        return new getRecentlyLoginUserList_argsTupleScheme();
      }
    }

    private static class getRecentlyLoginUserList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecentlyLoginUserList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentlyLoginUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAppType()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformType()) {
          optionals.set(1);
        }
        if (struct.isSetPageInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAppType()) {
          oprot.writeI32(struct.appType.getValue());
        }
        if (struct.isSetPlatformType()) {
          oprot.writeI32(struct.platformType.getValue());
        }
        if (struct.isSetPageInfo()) {
          struct.pageInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentlyLoginUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.appType = com.thrift.common.define.AppType.findByValue(iprot.readI32());
          struct.setAppTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformType = com.thrift.common.define.PlatformType.findByValue(iprot.readI32());
          struct.setPlatformTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageInfo = new com.thrift.common.body.PageInfo();
          struct.pageInfo.read(iprot);
          struct.setPageInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRecentlyLoginUserList_result implements org.apache.thrift.TBase<getRecentlyLoginUserList_result, getRecentlyLoginUserList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentlyLoginUserList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentlyLoginUserList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRecentlyLoginUserList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRecentlyLoginUserList_resultTupleSchemeFactory();

    public com.thrift.common.body.UserInfoResp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thrift.common.body.UserInfoResp.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentlyLoginUserList_result.class, metaDataMap);
    }

    public getRecentlyLoginUserList_result() {
    }

    public getRecentlyLoginUserList_result(
      com.thrift.common.body.UserInfoResp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentlyLoginUserList_result(getRecentlyLoginUserList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.thrift.common.body.UserInfoResp(other.success);
      }
    }

    public getRecentlyLoginUserList_result deepCopy() {
      return new getRecentlyLoginUserList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.thrift.common.body.UserInfoResp getSuccess() {
      return this.success;
    }

    public getRecentlyLoginUserList_result setSuccess(com.thrift.common.body.UserInfoResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.thrift.common.body.UserInfoResp)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentlyLoginUserList_result)
        return this.equals((getRecentlyLoginUserList_result)that);
      return false;
    }

    public boolean equals(getRecentlyLoginUserList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRecentlyLoginUserList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRecentlyLoginUserList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecentlyLoginUserList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRecentlyLoginUserList_resultStandardScheme getScheme() {
        return new getRecentlyLoginUserList_resultStandardScheme();
      }
    }

    private static class getRecentlyLoginUserList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRecentlyLoginUserList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentlyLoginUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.thrift.common.body.UserInfoResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentlyLoginUserList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentlyLoginUserList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRecentlyLoginUserList_resultTupleScheme getScheme() {
        return new getRecentlyLoginUserList_resultTupleScheme();
      }
    }

    private static class getRecentlyLoginUserList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRecentlyLoginUserList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentlyLoginUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentlyLoginUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.thrift.common.body.UserInfoResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
